(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vphp"],{

/***/ "./src/modules/php.js":
/*!****************************!*\
  !*** ./src/modules/php.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_internalFs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/internalFs */ \"./src/modules/utils/internalFs.js\");\n\n\n\nvar PHP = function PHP(code, opts) {\n  var opts = opts || {};\n  opts.filesystem = opts.filesystem || typeof window !== \"undefined\" ? new PHP.Adapters.XHRFileSystem() : _utils_internalFs__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n  opts.SERVER = opts.SERVER || {};\n  opts.SERVER.SCRIPT_FILENAME = opts.SERVER.SCRIPT_FILENAME || \"\"; // if (opts.path) PHP.PATH = opts.path.slice(-1) === '/' ? opts.path.slice(0, -1) : opts.path;\n\n  if (opts.path) PHP.PATH = opts.path;else PHP.PATH = '';\n  var iniContent = opts.filesystem.readFileSync(\"cfg/php.ini\"),\n      iniSet = opts.ini || {};\n  opts.ini = PHP.ini(iniContent);\n  Object.keys(iniSet).forEach(function (key) {\n    this[key] = iniSet[key];\n  }, opts.ini);\n  this.tokens = PHP.Lexer(code, opts.ini);\n\n  try {\n    this.AST = new PHP.Parser(this.tokens);\n  } catch (e) {\n    this.vm = {};\n    this.vm.OUTPUT_BUFFER = \"Parse error: \" + e.message + \" in \" + opts.SERVER.SCRIPT_FILENAME + \" on line \" + e.line;\n    return this;\n  }\n\n  var POST = opts.POST,\n      RAW_POST = opts.RAW_POST,\n      RAW = RAW_POST !== undefined ? PHP.RAWPost(RAW_POST) : {};\n  opts.POST = POST !== undefined ? PHP.Utils.QueryString(POST) : RAW_POST !== undefined ? RAW.Post() : {};\n  opts.RAW_POST = RAW_POST !== undefined ? RAW.Raw() : POST !== undefined ? POST.trim() : \"\";\n  opts.GET = opts.GET !== undefined ? PHP.Utils.QueryString(opts.GET) : {};\n  opts.FILES = RAW_POST !== undefined ? RAW.Files(opts.ini.upload_max_filesize, opts.ini.max_file_uploads, opts.ini.upload_tmp_dir) : {}; // needs to be called after RAW.Files\n\n  if (RAW_POST !== undefined) {\n    RAW.WriteFiles(opts.filesystem.writeFileSync);\n  }\n\n  this.compiler = new PHP.Compiler(this.AST, opts.SERVER.SCRIPT_FILENAME);\n  this.vm = new PHP.VM(this.compiler.src, opts);\n\n  if (RAW_POST !== undefined) {\n    RAW.Error(this.vm[PHP.Compiler.prototype.ERROR].bind(this.vm), opts.SERVER.SCRIPT_FILENAME);\n  }\n\n  this.vm.Run();\n};\n\nPHP.Constants = {};\n\nPHP.Modules = function () {\n  this.OUTPUT_BUFFER = \"\";\n};\n\nPHP.Adapters = {};\nPHP.Utils = {};\n\nPHP.Utils.$A = function (arr) {\n  return Array.prototype.slice.call(arr);\n};\n\nPHP.Utils.ClassName = function (classVar) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (classVar instanceof PHP.VM.Variable) {\n    if (classVar[VARIABLE.TYPE] === VARIABLE.STRING) {\n      return classVar[COMPILER.VARIABLE_VALUE];\n    } else {\n      return classVar[COMPILER.VARIABLE_VALUE][COMPILER.CLASS_NAME];\n    }\n  }\n};\n\nPHP.Utils.Merge = function (obj1, obj2) {\n  Object.keys(obj2).forEach(function (key) {\n    obj1[key] = obj2[key];\n  });\n  return obj1;\n};\n\nPHP.Utils.Path = function (path) {\n  path = path.substring(0, path.lastIndexOf(\"/\"));\n  return path;\n};\n\nPHP.Utils.Visible = function (name, objectValue, ctx) {\n  // helper function for checking whether variable/method is of type\n  function checkType(name, type) {\n    var value = objectValue[PROPERTY_TYPE + name];\n\n    if (value === undefined) {\n      return true;\n    }\n\n    if (type === \"PUBLIC\") {\n      return (value & PHP.VM.Class[type]) === PHP.VM.Class[type] || value === PHP.VM.Class.STATIC;\n    } else {\n      return (value & PHP.VM.Class[type]) === PHP.VM.Class[type];\n    }\n  }\n\n  function hasProperty(proto, prop) {\n    while (proto !== undefined && proto[PHP.VM.Class.PROPERTY + prop] !== undefined) {\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return proto;\n  }\n\n  var COMPILER = PHP.Compiler.prototype,\n      PROPERTY_TYPE = PHP.VM.Class.PROPERTY_TYPE,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (ctx instanceof PHP.VM.ClassPrototype && objectValue[COMPILER.CLASS_NAME] === ctx[COMPILER.CLASS_NAME]) {\n    return true;\n  } else {\n    if (ctx instanceof PHP.VM.ClassPrototype && this.$Class.Inherits(objectValue, ctx[COMPILER.CLASS_NAME]) && checkType(name, \"PROTECTED\")) {\n      return true;\n    } else if (ctx instanceof PHP.VM.ClassPrototype && this.$Class.Inherits(objectValue, ctx[COMPILER.CLASS_NAME]) && checkType(name, \"PRIVATE\")) {\n      if (hasProperty(ctx, name) === ctx) {\n        return true;\n      }\n    } else if (checkType(name, \"PUBLIC\")) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nPHP.Utils.ArgumentHandler = function (ENV, arg, argObject, value, index, functionName) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (argObject[COMPILER.PARAM_BYREF] === true) {\n    // check that we aren't passing a constant for arg which is defined byRef\n    if (ENV.FUNCTION_REFS[functionName] !== true && (value[VARIABLE.CLASS_CONSTANT] === true || value[VARIABLE.CONSTANT] === true || value[COMPILER.NAV] === true)) {\n      ENV[PHP.Compiler.prototype.ERROR](\"Only variables can be passed by reference\", PHP.Constants.E_ERROR, true);\n    } // check that we aren't passing a function return value\n\n\n    if (value[VARIABLE.VARIABLE_TYPE] === VARIABLE.FUNCTION) {\n      ENV[PHP.Compiler.prototype.ERROR](\"Only variables should be passed by reference\", PHP.Constants.E_STRICT, true);\n      value[VARIABLE.VARIABLE_TYPE] = undefined;\n      value = new PHP.VM.Variable(value[COMPILER.VARIABLE_VALUE]);\n    }\n\n    if (value[VARIABLE.DEFINED] !== true) {\n      // trigger setter\n      value[COMPILER.VARIABLE_VALUE] = null;\n    }\n\n    arg[VARIABLE.REF](value);\n  } else {\n    if (value !== undefined) {\n      if (value instanceof PHP.VM.VariableProto) {\n        if (value[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n          // Array assignment always involves value copying. Use the reference operator to copy an array by reference.\n          arg[COMPILER.VARIABLE_VALUE] = value[COMPILER.METHOD_CALL]({}, COMPILER.ARRAY_CLONE);\n        } else {\n          arg[COMPILER.VARIABLE_VALUE] = value[COMPILER.VARIABLE_VALUE];\n        }\n      } else {\n        arg[COMPILER.VARIABLE_VALUE] = value;\n      }\n    } else {\n      if (argObject[COMPILER.PROPERTY_DEFAULT] !== undefined) {\n        arg[COMPILER.VARIABLE_VALUE] = argObject[COMPILER.PROPERTY_DEFAULT][COMPILER.VARIABLE_VALUE];\n      } else {\n        arg[COMPILER.VARIABLE_VALUE] = new PHP.VM.Variable()[COMPILER.VARIABLE_VALUE];\n      }\n    }\n  }\n\n  if (argObject[COMPILER.PROPERTY_TYPE] !== undefined) {\n    ENV[COMPILER.TYPE_CHECK](arg, argObject[COMPILER.PROPERTY_TYPE], argObject[COMPILER.PROPERTY_DEFAULT], index, functionName);\n  }\n};\n\nPHP.Utils.StaticHandler = function (staticHandler, staticVars, handler, $Global) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  staticHandler[COMPILER.FUNCTION_STATIC_SET] = function (name, def) {\n    if (staticVars[name] === undefined) {\n      // store it to storage for this variable\n      staticVars[name] = {\n        def: def[COMPILER.VARIABLE_VALUE],\n        val: def\n      }; // assign it to current running context as well\n\n      handler(name, def);\n    } else {\n      if (def[COMPILER.VARIABLE_VALUE] === staticVars[name].def) {\n        handler(name, staticVars[name].val);\n      } else {\n        staticVars[name] = {\n          def: def[COMPILER.VARIABLE_VALUE],\n          val: def\n        };\n        handler(name, def);\n      }\n    }\n\n    return staticHandler;\n  }; // global handler\n\n\n  staticHandler[COMPILER.FUNCTION_GLOBAL] = function (vars) {\n    vars.forEach(function (varName) {\n      var val = $Global(varName);\n      val[VARIABLE.DEFINED] = true;\n      handler(varName, val);\n    });\n  };\n\n  return staticHandler;\n};\n\nPHP.Utils.CheckRef = function (ret, byRef) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (ret instanceof PHP.VM.Variable) {\n    if (byRef !== true) {\n      ret[VARIABLE.VARIABLE_TYPE] = VARIABLE.FUNCTION;\n    } else if (byRef === true) {\n      if (ret[VARIABLE.REFERRING] === undefined && (ret[VARIABLE.VARIABLE_TYPE] === VARIABLE.NEW_VARIABLE || ret[VARIABLE.VARIABLE_TYPE] === VARIABLE.FUNCTION)) {\n        this[PHP.Compiler.prototype.ERROR](\"Only variable references should be returned by reference\", PHP.Constants.E_NOTICE, true);\n      }\n\n      ret[VARIABLE.VARIABLE_TYPE] = undefined;\n    }\n  }\n};\n\nPHP.Utils.TokenName = function (token) {\n  var constants = [\"T_INCLUDE\", \"T_INCLUDE_ONCE\", \"T_EVAL\", \"T_REQUIRE\", \"T_REQUIRE_ONCE\", \"T_LOGICAL_OR\", \"T_LOGICAL_XOR\", \"T_LOGICAL_AND\", \"T_PRINT\", \"T_PLUS_EQUAL\", \"T_MINUS_EQUAL\", \"T_MUL_EQUAL\", \"T_DIV_EQUAL\", \"T_CONCAT_EQUAL\", \"T_MOD_EQUAL\", \"T_AND_EQUAL\", \"T_OR_EQUAL\", \"T_XOR_EQUAL\", \"T_SL_EQUAL\", \"T_SR_EQUAL\", \"T_BOOLEAN_OR\", \"T_BOOLEAN_AND\", \"T_IS_EQUAL\", \"T_IS_NOT_EQUAL\", \"T_IS_IDENTICAL\", \"T_IS_NOT_IDENTICAL\", \"T_IS_SMALLER_OR_EQUAL\", \"T_IS_GREATER_OR_EQUAL\", \"T_SL\", \"T_SR\", \"T_INSTANCEOF\", \"T_INC\", \"T_DEC\", \"T_INT_CAST\", \"T_DOUBLE_CAST\", \"T_STRING_CAST\", \"T_ARRAY_CAST\", \"T_OBJECT_CAST\", \"T_BOOL_CAST\", \"T_UNSET_CAST\", \"T_NEW\", \"T_CLONE\", \"T_EXIT\", \"T_IF\", \"T_ELSEIF\", \"T_ELSE\", \"T_ENDIF\", \"T_LNUMBER\", \"T_DNUMBER\", \"T_STRING\", \"T_STRING_VARNAME\", \"T_VARIABLE\", \"T_NUM_STRING\", \"T_INLINE_HTML\", \"T_CHARACTER\", \"T_BAD_CHARACTER\", \"T_ENCAPSED_AND_WHITESPACE\", \"T_CONSTANT_ENCAPSED_STRING\", \"T_ECHO\", \"T_DO\", \"T_WHILE\", \"T_ENDWHILE\", \"T_FOR\", \"T_ENDFOR\", \"T_FOREACH\", \"T_ENDFOREACH\", \"T_DECLARE\", \"T_ENDDECLARE\", \"T_AS\", \"T_SWITCH\", \"T_ENDSWITCH\", \"T_CASE\", \"T_DEFAULT\", \"T_BREAK\", \"T_CONTINUE\", \"T_GOTO\", \"T_FUNCTION\", \"T_CONST\", \"T_RETURN\", \"T_TRY\", \"T_CATCH\", \"T_THROW\", \"T_USE\", \"T_INSTEADOF\", \"T_GLOBAL\", \"T_STATIC\", \"T_ABSTRACT\", \"T_FINAL\", \"T_PRIVATE\", \"T_PROTECTED\", \"T_PUBLIC\", \"T_VAR\", \"T_UNSET\", \"T_ISSET\", \"T_EMPTY\", \"T_HALT_COMPILER\", \"T_CLASS\", \"T_TRAIT\", \"T_INTERFACE\", \"T_EXTENDS\", \"T_IMPLEMENTS\", \"T_OBJECT_OPERATOR\", \"T_DOUBLE_ARROW\", \"T_LIST\", \"T_ARRAY\", \"T_CALLABLE\", \"T_CLASS_C\", \"T_TRAIT_C\", \"T_METHOD_C\", \"T_FUNC_C\", \"T_LINE\", \"T_FILE\", \"T_COMMENT\", \"T_DOC_COMMENT\", \"T_OPEN_TAG\", \"T_OPEN_TAG_WITH_ECHO\", \"T_CLOSE_TAG\", \"T_WHITESPACE\", \"T_START_HEREDOC\", \"T_END_HEREDOC\", \"T_DOLLAR_OPEN_CURLY_BRACES\", \"T_CURLY_OPEN\", \"T_PAAMAYIM_NEKUDOTAYIM\", \"T_DOUBLE_COLON\", \"T_NAMESPACE\", \"T_NS_C\", \"T_DIR\", \"T_NS_SEPARATOR\"];\n  var current = \"UNKNOWN\";\n  constants.some(function (constant) {\n    if (PHP.Constants[constant] === token) {\n      current = constant;\n      return true;\n    } else {\n      return false;\n    }\n  });\n  return current;\n};\n\nPHP.Utils.Filesize = function (size) {\n  if (/^\\d+M$/i.test(size)) {\n    return (size.replace(/M/g, \"\") - 0) * 1024 * 1024;\n  } else if (/^\\d+K$/i.test(size)) {\n    return (size.replace(/K/g, \"\") - 0) * 1024;\n  }\n\n  return size;\n};\n\nPHP.Utils.QueryString = function (str) {\n  str = str.trim();\n  var variables = str.split(/&/);\n  var items = {}; // going through each variable which have been split by &\n\n  variables.forEach(function (variable) {\n    var parts = variable.split(/=/),\n        key = decodeURIComponent(parts[0]),\n        value = parts.length > 1 ? decodeURIComponent(parts[1]) : null,\n        arrayManager = function arrayManager(item, parse, value) {\n      var arraySearch = parse.match(/^\\[([a-z0-9+_\\-\\[]*)\\]/i);\n\n      if (arraySearch !== null) {\n        var key = arraySearch[1] === undefined ? Object.keys(item).length : arraySearch[1];\n\n        if (key.length === 0) {\n          key = Object.keys(item).length;\n        }\n\n        parse = parse.substring(arraySearch[0].length);\n\n        if (parse.length > 0) {\n          if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(item[key]) !== \"object\" && item[key] !== null) {\n            item[key] = {};\n          }\n\n          var ret = arrayManager(item[key], parse, value);\n\n          if (ret !== undefined) {\n            item[key] = ret;\n          }\n        } else {\n          item[key] = value !== null ? value.replace(/\\+/g, \" \") : null;\n        }\n      } else {\n        if (parse === \"]\") {\n          item = value;\n          return value;\n        }\n      }\n    };\n\n    var arraySearch = key.match(/^(.*?)((\\[[a-z+0-9_\\-\\[\\]]*\\])+)$/i);\n\n    if (arraySearch !== null) {\n      key = arraySearch[1];\n\n      if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(items[key]) !== \"object\") {\n        items[key] = {};\n      }\n\n      arrayManager(items[key], arraySearch[2], value);\n    } else {\n      items[key] = value !== null ? value.replace(/\\+/g, \" \") : null;\n    }\n  }, this);\n  return items;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 5.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Halt = function (msg, level, lineAppend, catchable) {\n  this.msg = msg;\n  this.level = level;\n  this.lineAppend = lineAppend;\n  this.catchable = catchable;\n};\n\nPHP.Compiler = function (AST, file, opts) {\n  this.file = file;\n  this.src = \"\";\n  this.FOREACH_COUNT = 0;\n  opts = opts || {};\n  this.FUNC_NUM = 0;\n  this.dimVars = \"\";\n  this.tmpDimVars = \"\";\n  this.DEPRECATED = [];\n  this.dimPrev = \"\";\n  this.INSIDE_METHOD = opts.INSIDE_METHOD !== undefined ? opts.INSIDE_METHOD : false;\n  this.src += this.stmts(AST, true);\n  /*\n  AST.forEach( function( action ){\n      if ( this.FATAL_ERROR !== undefined ) {\n          return;\n      }\n      this.src += this[ action.type ]( action ) + \";\\n\";     \n  }, this );*/\n\n  if (this.FATAL_ERROR !== undefined) {\n    this.src = 'this[ PHP.Compiler.prototype.ERROR ](\"' + this.FATAL_ERROR + '\", ' + (this.ERROR_TYPE === undefined ? \"PHP.Constants.E_ERROR\" : this.ERROR_TYPE) + ');';\n  }\n\n  var tmp = \"\";\n  this.DEPRECATED.forEach(function (error) {\n    tmp += 'this[ PHP.Compiler.prototype.ERROR ](\"' + error[0] + ' in ' + this.file + ' on line ' + error[1] + '\", PHP.Constants.E_DEPRECATED);';\n  }, this);\n  this.src = tmp + this.src;\n};\n\nvar COMPILER = PHP.Compiler.prototype;\n\nCOMPILER.getName = function (item) {\n  var parts = item.parts;\n\n  if (Array.isArray(parts)) {\n    return parts[0];\n  } else {\n    return parts;\n  }\n};\n\nCOMPILER.stmts = function (stmts, main) {\n  var src = \"\";\n  stmts.forEach(function (stmt) {\n    if (this.FATAL_ERROR !== undefined) {\n      return;\n    }\n\n    var tmp = this.source(stmt);\n\n    if (this.dimVars.length > 0 || this.tmpDimVars.length > 0) {\n      src += this.dimVars + this.tmpDimVars;\n      this.dimVars = this.tmpDimVars = \"\";\n    }\n\n    src += tmp;\n\n    if (stmt.type === \"Node_Expr_New\") {\n      // init class without assign, call destruct ( this might not be valid in all cases )\n      src += \".\" + this.UNSET + \"()\";\n    }\n\n    if (/^Node_Expr_Post(Inc|Dec)$/.test(stmt.type)) {\n      // trigger POST_MOD\n      src += \".\" + this.VARIABLE_VALUE;\n    }\n\n    src += \";\\n\";\n  }, this);\n  return src;\n};\n\nCOMPILER.source = function (action) {\n  if (action === null) {\n    return \"undefined\";\n  }\n\n  if (typeof action === \"string\") {\n    return action;\n  } else if (action === undefined) {\n    return undefined;\n  } else if (action.type === \"Node_Name\") {\n    return this.getName(action);\n  }\n\n  if (Array.isArray(action)) {\n    return this[action[0].type](action[0]);\n  }\n\n  return this[action.type](action);\n};\n\nCOMPILER.FILE_PATH = \"$FILE_PATH\";\nCOMPILER.NAV = \"$NaV\"; // not a variable;\n\nCOMPILER.FILESYSTEM = \"$FS\";\nCOMPILER.RESOURCES = \"\\π\";\nCOMPILER.TIMER = \"$Timer\";\nCOMPILER.ENV = \"ENV\";\nCOMPILER.OUTPUT_BUFFER = \"OUTPUT_BUFFER\";\nCOMPILER.OUTPUT_BUFFERS = \"OUTPUT_BUFFERS\";\nCOMPILER.CTX = COMPILER.ENV + \".\";\nCOMPILER.PARAM_NAME = \"n\";\nCOMPILER.PARAM_BYREF = \"r\";\nCOMPILER.CATCH = \"$Catch\";\nCOMPILER.EXCEPTION = \"$Exception\";\nCOMPILER.SUPPRESS = \"$Suppress\";\nCOMPILER.CONSTANTS = \"$Constants\";\nCOMPILER.CONSTANT_GET = \"get\";\nCOMPILER.CLASS_CONSTANT_GET = \"$Class.ConstantGet\";\nCOMPILER.CONSTANT_SET = \"set\";\nCOMPILER.CONSTANT_DEFINED = \"defined\";\nCOMPILER.MAGIC_CONSTANTS = \"$MConstants\";\nCOMPILER.ASSIGN = \"_\";\nCOMPILER.ASSIGN_PLUS = \"_Plus\";\nCOMPILER.ASSIGN_MINUS = \"_Minus\";\nCOMPILER.ASSIGN_CONCAT = \"_Concat\";\nCOMPILER.NEG = \"$Neg\";\nCOMPILER.ADD = \"$Add\";\nCOMPILER.MUL = \"$Mul\";\nCOMPILER.MOD = \"$Mod\";\nCOMPILER.DIV = \"$Div\";\nCOMPILER.FUNCTION = \"$F\";\nCOMPILER.FUNCTION_HANDLER = \"$FHandler\";\nCOMPILER.FUNCTION_STATIC = \"$Static\";\nCOMPILER.FUNCTION_GLOBAL = \"$Global\";\nCOMPILER.FUNCTION_STATIC_SET = \"$Set\";\nCOMPILER.BOOLEAN_OR = \"$Or\";\nCOMPILER.PRE_INC = \"$PreInc\";\nCOMPILER.PRE_DEC = \"$PreDec\";\nCOMPILER.POST_INC = \"$PostInc\";\nCOMPILER.POST_DEC = \"$PostDec\";\nCOMPILER.MINUS = \"$Minus\";\nCOMPILER.CONCAT = \"$Concat\";\nCOMPILER.UNSET = \"$Unset\";\nCOMPILER.NOT_IDENTICAL = \"$NIdentical\";\nCOMPILER.IDENTICAL = \"$Identical\";\nCOMPILER.BOOLEAN_NOT = \"$Not\";\nCOMPILER.BOOLEAN_AND = \"$And\";\nCOMPILER.EQUAL = \"$Equal\";\nCOMPILER.NOT_EQUAL = \"$Equal\";\nCOMPILER.SMALLER = \"$Smaller\";\nCOMPILER.SMALLER_OR_EQUAL = \"$S_Equal\";\nCOMPILER.GREATER = \"$Greater\";\nCOMPILER.GREATER_OR_EQUAL = \"$G_Equal\";\nCOMPILER.LABEL = \"LABEL\";\nCOMPILER.LABEL_COUNT = 0;\nCOMPILER.VARIABLE = \"$\";\nCOMPILER.VARIABLE_VALUE = \"$\";\nCOMPILER.CREATE_VARIABLE = \"$$\";\nCOMPILER.ARRAY_CLONE = \"$AClone\";\nCOMPILER.VARIABLE_CLONE = \"$VClone\";\nCOMPILER.ARRAY_GET = \"offsetGet\";\nCOMPILER.ARRAY_SET = \"offsetSet\";\nCOMPILER.METHOD_CALL = \"$Call\";\nCOMPILER.DIM_FETCH = \"$Dim\";\nCOMPILER.DIM_ISSET = \"$DimIsset\";\nCOMPILER.DIM_UNSET = \"$DimUnset\";\nCOMPILER.DIM_EMPTY = \"$DimEmpty\";\nCOMPILER.STATIC_CALL = \"$StaticCall\";\nCOMPILER.CLASS_NAME = \"$Name\";\nCOMPILER.INTERFACE_NEW = \"$Class.INew\";\nCOMPILER.CLASS_NEW = \"$Class.New\";\nCOMPILER.CLASS_GET = \"$Class.Get\";\nCOMPILER.CLASS_STORED = \"$StoredIn\";\nCOMPILER.CLASS_CLONE = \"$CClone\";\nCOMPILER.CLASS_PROPERTY_GET = \"$Prop\";\nCOMPILER.CLASS_PROPERTY_ISSET = \"$PropIsset\";\nCOMPILER.CLASS_STATIC_PROPERTY_ISSET = \"$SPropIsset\";\nCOMPILER.STATIC_PROPERTY_GET = \"$SProp\";\nCOMPILER.CLASS_METHOD = \"Method\";\nCOMPILER.CLASS_CONSTANT = \"Constant\";\nCOMPILER.CLASS_CONSTANT_FETCH = \"$Constant\";\nCOMPILER.PROPERTY_TYPE = \"p\";\nCOMPILER.PROPERTY_DEFAULT = \"d\";\nCOMPILER.CLASS_PROPERTY = \"Variable\";\nCOMPILER.CLASS_DECLARE = \"Create\";\nCOMPILER.CLASS_NAMES = \"$CLASSNAMES\";\nCOMPILER.CLASS_DESTRUCT = \"$Destruct\";\nCOMPILER.CLASS_TYPE = \"$CType\";\nCOMPILER.ARRAY_VALUE = \"v\";\nCOMPILER.ARRAY_KEY = \"k\";\nCOMPILER.ERROR = \"$ERROR\";\nCOMPILER.GLOBAL = \"$Global\";\nCOMPILER.SIGNATURE = \"$SIGNATURE\";\nCOMPILER.DISPLAY_HANDLER = \"$DisplayHandler\";\nCOMPILER.TYPE_CHECK = \"$TypeCheck\";\nCOMPILER.INSTANCEOF = \"$InstanceOf\";\n\nCOMPILER.fixString = function (result) {\n  if (result.match(/^(\"|')/) === null) {\n    result = '\"' + result + '\"';\n  }\n\n  if (result.match(/\\r\\n/) !== null) {\n    var quote = result.substring(0, 1); // this might have unexpected consequenses\n\n    result = result.replace(/\\r\\n\"$/, '\"');\n    result = '[' + result.split(/\\r\\n/).map(function (item) {\n      var a = item.replace(/\\r/g, \"\").replace(/\\n/, \"\\\\n\");\n      return a;\n    }).join(quote + \",\" + quote) + '].join(\"\\\\n\")';\n  }\n\n  result = result.replace(/([^\\\\])\\\\([^\\\\nrt\\$'\"])/g, \"$1\\\\\\\\$2\");\n  return result;\n  /*\n      $val = str_replace(\"\\\\\", \"\\\\\\\\\", $val);\n      //$val = str_replace(\"\\n\", \"\\\\n\", $val);\n      //$val = str_replace(\"\\t\", \"\\\\t\", $val);\n      $val = str_replace('\"', '\\\\\"', $val);\n      //$val = str_replace('\\\\\\\\', '\\\\\\\\\\\\\\\\', $val);\n       $val = str_replace(\"\\n\", \"\\\\n\", $val);\n      $val = str_replace(\"\\t\", \"\\\\t\", $val);\n  */\n};\n\nPHP.Compiler.prototype.Node_Expr_ArrayDimFetch = function (action) {\n  var part;\n\n  if (action.dim !== undefined && action.dim !== null && /^Node_Expr_(FuncCall|Plus)$/.test(action.dim.type)) {\n    var tmp = \"var dim\" + ++this.FUNC_NUM + \" = \" + this.CREATE_VARIABLE + \"(\" + this.source(action.dim) + \".\" + this.VARIABLE_VALUE + \");\";\n\n    if (this.tmpDimVars.length === 0) {\n      this.tmpDimVars += tmp;\n    } else {\n      if (this.dimPrev === \"Node_Expr_Plus\") {\n        this.dimVars += this.tmpDimVars + tmp;\n      } else {\n        this.dimVars += tmp + this.tmpDimVars;\n      }\n\n      this.tmpDimVars = \"\";\n    }\n\n    this.dimPrev = action.dim.type;\n    part = \"dim\" + this.FUNC_NUM;\n  } else {\n    part = this.source(action.dim);\n  }\n\n  var src = \"\",\n      variable;\n\n  if (action.variable.type === \"Node_Expr_PropertyFetch\") {\n    variable = this.Node_Expr_PropertyFetch(action.variable, true);\n  } else {\n    variable = this.source(action.variable);\n  }\n\n  src += variable + \".\" + this.DIM_FETCH + '( this, ' + part + \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Assign = function (action) {\n  if (action.variable.type === \"Node_Expr_Variable\" && action.variable.name === \"this\") {\n    this.FATAL_ERROR = \"Cannot re-assign $this in \" + this.file + \" on line \" + action.attributes.startLine;\n  }\n\n  var src = this.source(action.variable) + \".\" + this.ASSIGN;\n\n  if (action.expr !== undefined) {\n    if (action.expr.type !== \"Node_Expr_Assign\") {\n      src += \"(\" + this.source(action.expr) + \")\";\n    } else {\n      src += \"(\" + this.source(action.expr.variable) + \", \" + this.source(action.expr.expr) + \")\";\n    }\n  } else {\n    src += \"(\" + this.source(action.refVar) + \")\";\n  }\n  /*\n  if (!/Node_Expr_(Plus|Mul|Div|Minus|BitwiseOr|BitwiseAnd)/.test(action.expr.type)) {\n      src += \".\" + this.VARIABLE_VALUE;\n  }*/\n\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignMinus = function (action) {\n  var src = this.source(action.variable) + \".\" + this.ASSIGN_MINUS + \"(\" + this.source(action.expr) + \")\";\n  /*\n  if (!/Node_Expr_(Plus|Mul|Div|Minus|BitwiseOr|BitwiseAnd)/.test(action.expr.type)) {\n      src += \".\" + this.VARIABLE_VALUE;\n  }*/\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignPlus = function (action) {\n  var src = this.source(action.variable) + \".\" + this.ASSIGN_PLUS + \"(\" + this.source(action.expr) + \")\";\n  /*\n  if (!/Node_Expr_(Plus|Mul|Div|Minus|BitwiseOr|BitwiseAnd)/.test(action.expr.type)) {\n      src += \".\" + this.VARIABLE_VALUE;\n  }*/\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignMul = function (action) {\n  var src = this.source(action.variable) + \".\" + this.VARIABLE_VALUE + \" *= \" + this.source(action.expr);\n\n  if (!/Node_Expr_(Plus|Mul|Div|Minus|BitwiseOr|BitwiseAnd)/.test(action.expr.type)) {\n    src += \".\" + this.VARIABLE_VALUE;\n  }\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignDiv = function (action) {\n  var src = this.source(action.variable) + \".\" + this.VARIABLE_VALUE + \" /= \" + this.source(action.expr);\n\n  if (!/Node_Expr_(Plus|Mul|Div|Minus|BitwiseOr|BitwiseAnd)/.test(action.expr.type)) {\n    src += \".\" + this.VARIABLE_VALUE;\n  }\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignConcat = function (action) {\n  var src = this.source(action.variable) + \".\" + this.ASSIGN_CONCAT + \"(\" + this.source(action.expr) + \")\";\n  /*\n  if (!/Node_Expr_(Plus|Mul|Div|Minus|BitwiseOr|BitwiseAnd)/.test(action.expr.type)) {\n      src += \".\" + this.VARIABLE_VALUE;\n  }*/\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignRef = function (action) {\n  if (action.refVar.type === \"Node_Expr_New\") {\n    this.DEPRECATED.push([\"Assigning the return value of new by reference is deprecated\", action.attributes.startLine]);\n  }\n\n  var src = \"\";\n\n  if (action.variable.type === \"Node_Expr_StaticPropertyFetch\") {\n    src += this.Node_Expr_StaticPropertyFetch(action.variable, true);\n  } else {\n    src += this.source(action.variable);\n  }\n\n  src += \".\" + PHP.VM.Variable.prototype.REF + \"(\" + this.source(action.refVar) + \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Ternary = function (action) {\n  var src = \"(( \" + this.source(action.cond) + \".\" + this.VARIABLE_VALUE + \" ) ? \" + this.source(action.If) + \" : \" + this.source(action.Else) + \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_ErrorSuppress = function (action) {\n  var src = this.CTX + this.SUPPRESS + \"(function() { return \" + this.source(action.expr) + \" })\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_FuncCall = function (action) {\n  var src = \"(\" + this.CTX + this.FUNCTION + '(';\n\n  if (action.func.type !== \"Node_Name\") {\n    src += this.source(action.func) + \".\" + this.VARIABLE_VALUE + \", arguments\";\n  } else {\n    src += '\"' + this.getName(action.func) + '\", arguments';\n\n    if (this.getName(action.func) === \"eval\") {\n      src += \", $, $Static, this\";\n\n      if (this.INSIDE_METHOD) {\n        src += \", ctx\";\n      } else {\n        src += \", undefined\";\n      }\n\n      src += \", ENV\"; // args.push(\"$\");\n    }\n  }\n\n  action.args.forEach(function (arg) {\n    if (arg.value.type === \"Node_Expr_PropertyFetch\") {\n      src += \", \" + this.Node_Expr_PropertyFetch(arg.value, true);\n    } else {\n      src += \", \" + this.source(arg.value);\n    } //    args.push( this.source( arg.value ) );\n\n  }, this);\n  src += \"))\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Exit = function (action) {\n  var src = this.CTX + \"exit( \" + this.source(action.expr) + \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_AssignList = function (action) {\n  var src = this.CTX + \"list( \";\n\n  var addList = function (assignList) {\n    var first = \"\";\n    assignList.forEach(function (item) {\n      if (Array.isArray(item)) {\n        src += first + \" [\";\n        addList(item);\n        src += \"]\";\n      } else {\n        src += first + \" \" + this.source(item);\n      }\n\n      first = \", \";\n    }, this);\n  }.bind(this);\n\n  addList(action.assignList);\n  src += \", \" + this.source(action.expr) + \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Isset = function (action) {\n  var src = this.CTX + \"$isset( \";\n  var args = [];\n  action.variables.forEach(function (arg) {\n    switch (arg.type) {\n      case \"Node_Expr_ArrayDimFetch\":\n        args.push(this.source(arg.variable) + \".\" + this.DIM_ISSET + '( this, ' + this.source(arg.dim) + \" )\");\n        break;\n\n      case \"Node_Expr_PropertyFetch\":\n        args.push(this.source(arg.variable) + \".\" + this.VARIABLE_VALUE + \".\" + this.CLASS_PROPERTY_ISSET + '( this, \"' + this.source(arg.name) + '\" )');\n        break;\n\n      case \"Node_Expr_StaticPropertyFetch\":\n        args.push(this.Node_Expr_StaticPropertyFetch(arg, undefined, true));\n        break;\n\n      default:\n        args.push(this.source(arg));\n    }\n  }, this);\n  src += args.join(\", \") + \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Empty = function (action) {\n  var src = this.CTX + \"$empty( \";\n\n  switch (action.variable.type) {\n    case \"Node_Expr_ArrayDimFetch\":\n      src += this.source(action.variable.variable) + \".\" + this.DIM_EMPTY + '( this, ' + this.source(action.variable.dim) + \" )\";\n      break;\n\n    default:\n      src += this.source(action.variable);\n  }\n\n  src += \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Instanceof = function (action) {\n  var classPart;\n\n  if (action.right.type === \"Node_Name\") {\n    classPart = '\"' + this.source(action.right) + '\"';\n  } else {\n    classPart = this.source(action.right) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  return this.source(action.left) + \".\" + this.INSTANCEOF + '(' + classPart + ')';\n};\n\nPHP.Compiler.prototype.Node_Expr_UnaryPlus = function (action) {\n  return this.source(action.expr);\n};\n\nPHP.Compiler.prototype.Node_Expr_UnaryMinus = function (action) {\n  return this.source(action.expr) + \".\" + this.NEG + \"()\";\n};\n\nPHP.Compiler.prototype.Node_Expr_BitwiseOr = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + this.VARIABLE_VALUE + \" | \" + this.source(action.right) + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_BitwiseAnd = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + this.VARIABLE_VALUE + \" & \" + this.source(action.right) + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_BitwiseNot = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + \"~\" + this.source(action.expr) + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Div = function (action) {\n  return this.source(action.left) + \".\" + this.DIV + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Minus = function (action) {\n  return this.source(action.left) + \".\" + this.MINUS + \"(\" + this.source(action.right) + (/^Node_Expr_Post/.test(action.right.type) ? \", true\" : \"\") + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Mul = function (action) {\n  return this.source(action.left) + \".\" + this.MUL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Mod = function (action) {\n  return this.source(action.left) + \".\" + this.MOD + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Plus = function (action) {\n  var str = \"\";\n\n  if (/^Node_Expr_((Static)?Property|ArrayDim)Fetch$/.test(action.left.type)) {\n    str += this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_DOUBLE + \".\" + this.VARIABLE_VALUE + \")\";\n  } else {\n    str += this.source(action.left);\n  }\n\n  str += \".\" + this.ADD + \"(\" + this.source(action.right) + \")\";\n  return str;\n};\n\nPHP.Compiler.prototype.Node_Expr_Equal = function (action) {\n  return this.source(action.left) + \".\" + this.EQUAL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_NotEqual = function (action) {\n  return this.source(action.left) + \".\" + this.NOT_EQUAL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_NotIdentical = function (action) {\n  return this.source(action.left) + \".\" + this.NOT_IDENTICAL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Identical = function (action) {\n  return this.source(action.left) + \".\" + this.IDENTICAL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_LogicalOr = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \" || \" + this.source(action.right) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_LogicalAnd = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \" && \" + this.source(action.right) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_LogicalXor = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + \"!\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \" != \" + \"!\" + this.source(action.right) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_BooleanOr = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \" || \" + this.source(action.right) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_BooleanAnd = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \" && \" + this.source(action.right) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_BooleanNot = function (action) {\n  return this.CREATE_VARIABLE + \"(\" + \"!\" + this.source(action.expr) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Smaller = function (action) {\n  return this.source(action.left) + \".\" + this.SMALLER + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Greater = function (action) {\n  return this.source(action.left) + \".\" + this.GREATER + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_GreaterOrEqual = function (action) {\n  return this.source(action.left) + \".\" + this.GREATER_OR_EQUAL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_SmallerOrEqual = function (action) {\n  return this.source(action.left) + \".\" + this.SMALLER_OR_EQUAL + \"(\" + this.source(action.right) + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_PreInc = function (action) {\n  return this.source(action.variable) + \".\" + this.PRE_INC + \"()\";\n};\n\nPHP.Compiler.prototype.Node_Expr_PreDec = function (action) {\n  return this.source(action.variable) + \".\" + this.PRE_DEC + \"()\";\n};\n\nPHP.Compiler.prototype.Node_Expr_PostInc = function (action) {\n  return this.source(action.variable) + \".\" + this.POST_INC + \"()\";\n};\n\nPHP.Compiler.prototype.Node_Expr_PostDec = function (action) {\n  return this.source(action.variable) + \".\" + this.POST_DEC + \"()\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Concat = function (action) {\n  var str = \"\";\n\n  if (/^Node_Expr_((Static)?Property|ArrayDim)Fetch$/.test(action.left.type)) {\n    str += this.CREATE_VARIABLE + \"(\" + this.source(action.left) + \".\" + PHP.VM.Variable.prototype.CAST_STRING + \".\" + this.VARIABLE_VALUE + \")\";\n  } else {\n    str += this.source(action.left);\n  }\n\n  str += \".\" + this.CONCAT + \"(\" + this.source(action.right) + \")\";\n  return str;\n};\n\nPHP.Compiler.prototype.Node_Expr_Print = function (action) {\n  var src = this.CTX + 'print( ';\n  src += this.source(action.expr);\n  src += ' )';\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Variable = function (action) {\n  var src = this.VARIABLE + \"(\";\n\n  if (action.name === \"this\") {\n    src += '\"' + this.source(action.name) + '\"'; //  return action.name;\n  } else {\n    if (typeof action.name === \"string\") {\n      src += '\"' + this.source(action.name) + '\"';\n    } else {\n      src += this.source(action.name) + \".\" + this.VARIABLE_VALUE;\n    } //  return this.VARIABLE + '(\"' + this.source( action.name ) + '\")';\n\n  }\n\n  return src + \")\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Cast_String = function (action) {\n  return this.source(action.expr) + \".\" + PHP.VM.Variable.prototype.CAST_STRING;\n};\n\nPHP.Compiler.prototype.Node_Expr_Cast_Int = function (action) {\n  return this.source(action.expr) + \".\" + PHP.VM.Variable.prototype.CAST_INT;\n};\n\nPHP.Compiler.prototype.Node_Expr_Cast_Double = function (action) {\n  return this.source(action.expr) + \".\" + PHP.VM.Variable.prototype.CAST_DOUBLE;\n};\n\nPHP.Compiler.prototype.Node_Expr_Cast_Bool = function (action) {\n  return this.source(action.expr) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL;\n};\n\nPHP.Compiler.prototype.Node_Expr_Include = function (action) {\n  return this.CTX + \"include( \" + this.VARIABLE + \", \" + this.FUNCTION_STATIC + \", \" + this.source(action.expr) + \" )\";\n};\n\nPHP.Compiler.prototype.Node_Expr_IncludeOnce = function (action) {\n  return this.CTX + \"include_once( \" + this.VARIABLE + \", \" + this.FUNCTION_STATIC + \", \" + this.source(action.expr) + \" )\";\n};\n\nPHP.Compiler.prototype.Node_Expr_Require = function (action) {\n  return this.CTX + \"require( \" + this.VARIABLE + \", \" + this.FUNCTION_STATIC + \", \" + this.source(action.expr) + \" )\";\n};\n\nPHP.Compiler.prototype.Node_Expr_RequireOnce = function (action) {\n  return this.CTX + \"require_once( \" + this.VARIABLE + \", \" + this.FUNCTION_STATIC + \", \" + this.source(action.expr) + \" )\";\n};\n\nPHP.Compiler.prototype.Node_Expr_New = function (action) {\n  var classPart,\n      src = \"\";\n\n  if (action.Class.type === \"Node_Name\") {\n    classPart = '\"' + this.source(action.Class) + '\"';\n  } else {\n    classPart = this.source(action.Class) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  src += this.CREATE_VARIABLE + '(new (' + this.CTX + this.CLASS_GET + '(' + classPart + '))( this';\n  action.args.forEach(function (arg) {\n    if (arg.value.type === \"Node_Expr_PropertyFetch\") {\n      src += \", \" + this.Node_Expr_PropertyFetch(arg.value, true);\n    } else {\n      src += \", \" + this.source(arg.value);\n    } //   src += \", \"  + this.source( arg.value );\n\n  }, this);\n  src += \" ))\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_ConstFetch = function (action) {\n  if (/true|false|null/i.test(action.name.parts)) {\n    return this.CREATE_VARIABLE + '(' + action.name.parts.toString().toLowerCase() + ')';\n  } else {\n    return this.CTX + this.CONSTANTS + '.' + this.CONSTANT_GET + '(\"' + this.source(action.name) + '\")';\n  }\n};\n\nPHP.Compiler.prototype.Node_Expr_MethodCall = function (action) {\n  var classPart,\n      src = \"\";\n\n  if (action.name.type === undefined) {\n    classPart = '\"' + action.name + '\"';\n  } else {\n    classPart = this.source(action.name) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  src += this.source(action.variable) + \".\" + this.METHOD_CALL + '( ';\n  src += action.variable.name === \"this\" ? \"ctx\" : \"this\";\n  src += ', ' + classPart;\n  action.args.forEach(function (arg) {\n    if (arg.value.type === \"Node_Expr_PropertyFetch\") {\n      src += \", \" + this.Node_Expr_PropertyFetch(arg.value, true);\n    } else {\n      src += \", \" + this.source(arg.value);\n    } // src += \", \" + this.source( arg.value );\n\n  }, this);\n  src += \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_PropertyFetch = function (action, funcCall) {\n  var classParts = \"\";\n\n  if (typeof action.name === \"string\") {\n    classParts += '\"' + this.source(action.name) + '\"';\n  } else {\n    classParts += this.source(action.name) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  var extra = \"\";\n\n  if (funcCall === true) {\n    extra = \", true\";\n  }\n\n  var variable;\n\n  if (action.variable.type === \"Node_Expr_PropertyFetch\") {\n    variable = this.Node_Expr_PropertyFetch(action.variable, funcCall);\n  } else {\n    variable = this.source(action.variable);\n  }\n\n  if (action.variable.name !== \"this\") {\n    return variable + \".\" + this.CLASS_PROPERTY_GET + '( this, ' + classParts + extra + ' )';\n  } else {\n    return variable + \".\" + this.CLASS_PROPERTY_GET + '( ctx, ' + classParts + extra + ' )';\n  }\n};\n\nPHP.Compiler.prototype.Node_Expr_ClassConstFetch = function (action) {\n  var classPart;\n\n  if (action.Class.type === \"Node_Name\") {\n    classPart = '\"' + this.source(action.Class) + '\"';\n  } else {\n    classPart = this.source(action.Class) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  return this.CTX + this.CLASS_CONSTANT_GET + '(' + classPart + ', this, \"' + action.name + '\" )';\n};\n\nPHP.Compiler.prototype.Node_Expr_StaticCall = function (action) {\n  var src = \"\";\n  var classPart, funcPart;\n\n  if (action.Class.type === \"Node_Name\") {\n    classPart = '\"' + this.source(action.Class) + '\"';\n  } else {\n    classPart = this.source(action.Class) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  if (typeof action.func === \"string\") {\n    funcPart = '\"' + this.source(action.func) + '\"';\n  } else {\n    funcPart = this.source(action.func) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  if (/^(parent|self)$/i.test(action.Class.parts)) {\n    src += \"this.\" + this.STATIC_CALL + '( ' + (this.INSIDE_METHOD === true ? \"ctx\" : \"this\") + ', ' + classPart + ', ' + funcPart;\n  } else {\n    src += this.CTX + this.CLASS_GET + '(' + classPart + ', this).' + this.STATIC_CALL + '( ' + (this.INSIDE_METHOD === true ? \"ctx\" : \"this\") + ', ' + classPart + ', ' + funcPart;\n  }\n\n  action.args.forEach(function (arg) {\n    if (arg.value.type === \"Node_Expr_PropertyFetch\") {\n      src += \", \" + this.Node_Expr_PropertyFetch(arg.value, true);\n    } else {\n      src += \", \" + this.source(arg.value);\n    } //  src += \", \" + this.source( arg.value );\n\n  }, this);\n  src += \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_StaticPropertyFetch = function (action, ref, isset) {\n  var src = \"\",\n      extra = \"\",\n      classPart;\n  var actionParts = \"\";\n\n  if (typeof action.name === \"string\") {\n    actionParts += '\"' + this.source(action.name) + '\"';\n  } else {\n    actionParts += this.source(action.name) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  if (action.Class.type === \"Node_Name\") {\n    classPart = '\"' + this.source(action.Class) + '\"';\n  } else {\n    classPart = this.source(action.Class) + \".\" + this.VARIABLE_VALUE;\n  }\n\n  if (ref === true) {\n    extra = \", true\";\n  }\n\n  if (/^(parent|self)$/i.test(action.Class.parts)) {\n    src += \"this.\" + (isset === true ? this.CLASS_STATIC_PROPERTY_ISSET : this.STATIC_PROPERTY_GET) + '( ' + (this.INSIDE_METHOD === true ? \"ctx\" : \"this\") + ', ' + classPart + ', ' + actionParts;\n  } else {\n    src += this.CTX + this.CLASS_GET + '(' + classPart + ', this).' + (isset === true ? this.CLASS_STATIC_PROPERTY_ISSET : this.STATIC_PROPERTY_GET) + '( ' + (this.INSIDE_METHOD === true ? \"ctx\" : \"this\") + ', ' + classPart + ', ' + actionParts;\n  }\n\n  src += extra + \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Array = function (action) {\n  var src = this.CTX + \"array([\",\n      items = [];\n  (Array.isArray(action.items) ? action.items : [action.items]).forEach(function (item) {\n    if (item.value !== undefined) {\n      items.push(\"{\" + this.ARRAY_VALUE + \":\" + this.source(item.value) + (item.key !== undefined ? \", \" + this.ARRAY_KEY + \":\" + this.source(item.key) : \"\") + \"}\");\n    }\n  }, this);\n  src += items.join(\", \") + \"])\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Expr_Clone = function (action) {\n  var src = \"\";\n  src += this.source(action.expr) + \".\" + this.VARIABLE_VALUE + \".\" + this.CLASS_CLONE + \"( this )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Interface = function (action) {\n  action.stmts.forEach(function (stmt) {\n    if (stmt.type === \"Node_Stmt_ClassMethod\" && stmt.stmts !== null) {\n      this.FATAL_ERROR = \"Interface function \" + action.name + \"::\" + stmt.name + \"() cannot contain body {} on line \" + action.attributes.startLine;\n    }\n  }, this);\n  var src = this.CTX + this.INTERFACE_NEW + '( \"' + action.name + '\", [';\n  var ints = [];\n\n  function addInterface(interf) {\n    interf.forEach(function (item) {\n      if (Array.isArray(item)) {\n        addInterface(item);\n      } else {\n        ints.push('\"' + item.parts + '\"');\n      }\n    });\n  }\n\n  addInterface(action.Extends);\n  /*\n      src += (Array.isArray(action.Implements[ 0 ]) ? action.Implements[ 0 ] : action.Implements ).map(function( item ){\n           return '\"' + item.parts + '\"';\n      }).join(\", \");\n      */\n\n  src += ints.join(\", \");\n  /*\n  var exts = [];\n   action.Extends.forEach(function( ext ){\n      exts.push( '\"' + ext.parts + '\"' );\n  }, this);\n   src += exts.join(\", \")\n  */\n\n  src += \"], function( M, $, $$ ){\\n M\";\n  this.currentClass = action.name;\n  action.stmts.forEach(function (stmt) {\n    src += this.source(stmt);\n  }, this);\n  src += \".\" + this.CLASS_DECLARE + '()})';\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Class = function (action) {\n  var src = this.CTX + this.CLASS_NEW + '( \"' + action.name + '\", ' + action.Type + ', {';\n\n  if (action.Extends !== null) {\n    src += 'Extends: \"' + this.source(action.Extends) + '\"';\n  }\n\n  if (action.Implements.length > 0) {\n    if (action.Extends !== null) {\n      src += \", \";\n    } // properly borken somewhere in the parser\n\n\n    src += 'Implements: [';\n    var ints = [];\n    addInterface(action.Implements, ints);\n    /*\n    src += (Array.isArray(action.Implements[ 0 ]) ? action.Implements[ 0 ] : action.Implements ).map(function( item ){\n         return '\"' + item.parts + '\"';\n    }).join(\", \");\n    */\n\n    src += ints.join(\", \");\n    src += \"]\";\n  }\n\n  function addInterface(interf, ints) {\n    interf.forEach(function (item) {\n      if (Array.isArray(item)) {\n        addInterface(item, ints);\n      } else {\n        ints.push('\"' + item.parts + '\"');\n      }\n    });\n  }\n\n  src += \"}, function( M, $, $$ ){\\n M\";\n  this.currentClass = action.name;\n  action.stmts.forEach(function (stmt) {\n    src += this.source(stmt);\n  }, this);\n  src += \".\" + this.CLASS_DECLARE + '()';\n  src += \"})\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Echo = function (action) {\n  var src = this.CTX + 'echo( ',\n      args = [];\n\n  if (Array.isArray(action.exprs)) {\n    action.exprs.forEach(function (arg) {\n      args.push(this.source(arg));\n    }, this);\n    src += args.join(\", \");\n  } else {\n    src += this.source(action.exprs);\n  }\n\n  src += ' )';\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_For = function (action) {\n  var src = this.LABEL + this.LABEL_COUNT++ + \":\\n\";\n  src += \"for( \";\n\n  if (!Array.isArray(action.init) || action.init.length !== 0) {\n    src += this.source(action.init);\n  }\n\n  src += \"; \";\n\n  if (!Array.isArray(action.cond) || action.cond.length !== 0) {\n    src += \"(\" + this.source(action.cond) + \").\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE;\n  }\n\n  src += \"; \"; // if ( !Array.isArray(action.loop) || action.loop.length !== 1 ) { // change\n\n  if (action.loop.length > 0) {\n    src += this.source(action.loop) + \".\" + this.VARIABLE_VALUE;\n  } // }\n\n\n  src += \" ) { \";\n  src += this.CTX + this.TIMER + \"();\\n\";\n  src += this.stmts(action.stmts);\n  src += \"}\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_While = function (action) {\n  var src = this.LABEL + this.LABEL_COUNT++ + \":\\n\";\n  src += \"while( \" + this.source(action.cond) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \") {\";\n  src += this.CTX + this.TIMER + \"(); \\n\";\n  src += this.stmts(action.stmts);\n  src += \"}\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Do = function (action) {\n  var src = this.LABEL + this.LABEL_COUNT++ + \":\\n\";\n  src += \"do {\\n\";\n  src += this.stmts(action.stmts);\n  src += \"} while( \" + this.source(action.cond) + \".\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Switch = function (action) {\n  var src = this.LABEL + this.LABEL_COUNT++ + \":\\n\";\n  src += \"switch(\" + this.source(action.cond) + \".\" + this.VARIABLE_VALUE + \") {\\n\";\n  action.cases.forEach(function (item) {\n    src += this.source(item) + \";\\n\";\n  }, this);\n  src += \"}\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Case = function (action) {\n  var src = \"\";\n\n  if (action.cond === null) {\n    src += \"default:\\n\";\n  } else {\n    src += \"case (\" + this.source(action.cond) + \".\" + this.VARIABLE_VALUE + \"):\\n\";\n  }\n\n  action.stmts.forEach(function (item) {\n    src += this.source(item) + \";\\n\";\n  }, this);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Foreach = function (action) {\n  if (action.expr.type === \"Node_Expr_Array\" && action.byRef === true) {\n    if (action.keyVar === null) {\n      this.FATAL_ERROR = \"syntax error, unexpected '&' in \" + this.file + \" on line \" + action.attributes.startLine;\n      this.ERROR_TYPE = PHP.Constants.E_PARSE;\n    } else {\n      this.FATAL_ERROR = \"Cannot create references to elements of a temporary array expression in \" + this.file + \" on line \" + action.attributes.startLine;\n    }\n\n    return;\n  }\n\n  var count = ++this.FOREACH_COUNT;\n  var src = \"var iterator\" + count + \" = \" + this.CTX + \"$foreachInit(\" + this.source(action.expr) + \", \" + (this.INSIDE_METHOD === true ? \"ctx\" : \"this\") + \");\\n\";\n  src += \"while(\" + this.CTX + 'foreach( iterator' + count + ', ' + action.byRef + \", \" + this.source(action.valueVar);\n\n  if (action.keyVar !== null) {\n    src += ', ' + this.source(action.keyVar);\n  }\n\n  src += ')) {\\n';\n  src += this.stmts(action.stmts);\n  src += '} ';\n  src += this.CTX + \"$foreachEnd( iterator\" + count + \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Continue = function (action) {\n  var src = \"continue\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Break = function (action) {\n  var src = \"break\";\n\n  if (action.num !== null) {\n    src += \" \" + this.LABEL + (this.LABEL_COUNT - action.num.value);\n  }\n\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Function = function (action) {\n  var src = this.CTX + action.name + \" = Function.prototype.bind.apply( function( \" + this.VARIABLE + \", \" + this.FUNCTION_STATIC + \", \" + this.FUNCTION_GLOBAL + \"  ) {\\n\";\n  src += this.VARIABLE + \" = \" + this.VARIABLE + \"([\";\n  var params = [];\n  (action.params[0] === undefined || !Array.isArray(action.params[0]) ? action.params : action.params[0]).forEach(function (param) {\n    if (param.type === \"Node_Param\") {\n      var item = '{' + this.PARAM_NAME + ':\"' + param.name + '\"';\n\n      if (param.byRef === true) {\n        item += \",\" + this.PARAM_BYREF + ':true';\n      }\n\n      if (param.def !== null) {\n        item += \", \" + this.PROPERTY_DEFAULT + \": \" + this.source(param.def);\n      }\n\n      if (param.Type !== null) {\n        item += \", \" + this.PROPERTY_TYPE + ': \"' + this.source(param.Type) + '\"';\n      }\n\n      item += '}';\n      params.push(item);\n    }\n  }, this);\n  src += params.join(\", \") + \"], arguments);\\n\";\n  src += this.stmts(action.stmts);\n  src += \"}, (\" + this.CTX + this.FUNCTION_HANDLER + ')( ENV, \"' + action.name + '\", ' + action.byRef + '  ))';\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Static = function (action) {\n  // todo fix\n  var src = this.FUNCTION_STATIC;\n  action.vars.forEach(function (variable) {\n    src += this.source(variable);\n  }, this);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Global = function (action) {\n  // todo fix\n  var src = this.FUNCTION_STATIC + \".\" + this.FUNCTION_GLOBAL + \"([\",\n      vars = [];\n  action.vars.forEach(function (variable) {\n    vars.push('\"' + variable.name + '\"');\n  }, this);\n  src += vars.join(\", \") + \"])\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_StaticVar = function (action) {\n  // todo fix\n  var src = \".\" + this.FUNCTION_STATIC_SET + '(\"' + action.name + '\", ' + (action.def === null ? \"new PHP.VM.Variable()\" : this.source(action.def)) + \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Property = function (action) {\n  var src = \"\";\n  action.props.forEach(function (prop) {\n    src += \".\" + this.CLASS_PROPERTY + '( \"' + prop.name + '\", ' + action.Type;\n\n    if (prop.def !== null) {\n      src += ', ' + this.source(prop.def);\n    }\n\n    src += \" )\\n\";\n  }, this);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Unset = function (action) {\n  var src = this.CTX + \"unset( \",\n      vars = [];\n  action.variables.forEach(function (variable) {\n    switch (variable.type) {\n      case \"Node_Expr_ArrayDimFetch\":\n        vars.push(this.source(variable.variable) + \".\" + this.DIM_UNSET + '( this, ' + this.source(variable.dim) + \" )\");\n        break;\n\n      default:\n        vars.push(this.source(variable));\n    }\n  }, this);\n  src += vars.join(\", \") + \" )\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_InlineHTML = function (action) {\n  var src = this.CTX + '$ob(\"' + action.value.replace(/[\\\\\"]/g, '\\\\$&').replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\") + '\")';\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_If = function (action) {\n  var src = \"if ( (\" + this.source(action.cond) + \").\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \") {\\n\";\n  action.stmts.forEach(function (stmt) {\n    src += this.source(stmt) + \";\\n\";\n  }, this);\n  action.elseifs.forEach(function (Elseif) {\n    src += this.source(Elseif) + \"\\n\";\n  }, this);\n\n  if (action.Else !== null) {\n    src += \"} else {\\n\";\n    action.Else.stmts.forEach(function (stmt) {\n      src += this.source(stmt) + \";\\n\";\n    }, this);\n  }\n\n  src += \"}\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_ElseIf = function (action) {\n  var src = \"} else if ( (\" + this.source(action.cond) + \").\" + PHP.VM.Variable.prototype.CAST_BOOL + \".\" + this.VARIABLE_VALUE + \") {\\n\";\n  action.stmts.forEach(function (stmt) {\n    src += this.source(stmt) + \";\\n\";\n  }, this);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Throw = function (action) {\n  var src = \"throw \" + this.source(action.expr);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_TryCatch = function (action) {\n  var src = \"try {\\n\";\n  src += this.stmts(action.stmts) + \"} catch( emAll ) {\\n\";\n  src += this.CTX + this.EXCEPTION + '( emAll )';\n  action.catches.forEach(function (Catch) {\n    src += this.source(Catch);\n  }, this);\n  src += \";\\n }\";\n  this.source(action.expr);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Catch = function (action) {\n  var src = \".\" + this.CATCH + '( \"' + action.variable + '\", \"' + action.Type.parts + '\", ' + this.VARIABLE + ', function() {\\n';\n  src += this.stmts(action.stmts);\n  src += \"})\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_ClassMethod = function (action) {\n  this.INSIDE_METHOD = true;\n  var src = \".\" + this.CLASS_METHOD + '( \"' + action.name + '\", ' + action.Type + ', [';\n  var props = [];\n  (Array.isArray(action.params[0]) ? action.params[0] : action.params).forEach(function (prop) {\n    var obj = '{name:\"' + prop.name + '\"';\n\n    if (prop.def !== null) {\n      obj += \", \" + this.PROPERTY_DEFAULT + \": \" + this.source(prop.def);\n    }\n\n    if (prop.Type !== null) {\n      obj += \", \" + this.PROPERTY_TYPE + ': \"' + this.source(prop.Type) + '\"';\n    }\n\n    if (prop.byRef === true) {\n      obj += \", \" + this.PARAM_BYREF + ': true';\n    }\n\n    obj += \"}\";\n    props.push(obj);\n  }, this);\n  src += props.join(\", \") + '], ' + action.byRef + ', function( ' + this.VARIABLE + ', ctx, $Static ) {\\n';\n\n  if (action.stmts !== null) {\n    src += this.stmts(action.stmts);\n  }\n\n  src += '})\\n';\n  this.INSIDE_METHOD = false;\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_ClassConst = function (action) {\n  var src = \"\";\n  (Array.isArray(action.consts[0]) ? action.consts[0] : action.consts).forEach(function (constant) {\n    src += \".\" + this.CLASS_CONSTANT + '(\"' + constant.name + '\", ' + this.source(constant.value) + \")\\n\";\n  }, this);\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Stmt_Return = function (action) {\n  return \"return \" + this.source(action.expr);\n};\n\nPHP.Compiler.prototype.Node_Scalar_String = function (action) {\n  return this.CREATE_VARIABLE + '(' + this.fixString(action.value) + ')';\n};\n\nPHP.Compiler.prototype.Node_Scalar_Encapsed = function (action) {\n  var parts = [],\n      VARIABLE = PHP.VM.Variable.prototype;\n  action.parts.forEach(function (part) {\n    if (typeof part === \"string\") {\n      parts.push(this.fixString(part));\n    } else {\n      parts.push(this.source(part[0] === undefined ? part : part[0]) + \".\" + VARIABLE.CAST_STRING + \".\" + this.VARIABLE_VALUE);\n    }\n  }, this);\n  var src = this.CREATE_VARIABLE + \"(\" + parts.join(\" + \") + \")\";\n  return src;\n};\n\nPHP.Compiler.prototype.Node_Scalar_LNumber = function (action) {\n  return this.CREATE_VARIABLE + '(' + action.value + ')';\n};\n\nPHP.Compiler.prototype.Node_Scalar_DNumber = function (action) {\n  return this.CREATE_VARIABLE + '(' + action.value + ')';\n};\n\nPHP.Compiler.prototype.Node_Scalar_LNumber = function (action) {\n  return this.CREATE_VARIABLE + '(' + action.value + ')';\n};\n\nPHP.Compiler.prototype.Node_Scalar_MethodConst = function (action) {\n  return this.VARIABLE + '(\"$__METHOD__\")';\n};\n\nPHP.Compiler.prototype.Node_Scalar_FuncConst = function (action) {\n  return this.VARIABLE + '(\"$__FUNCTION__\")';\n};\n\nPHP.Compiler.prototype.Node_Scalar_ClassConst = function (action) {\n  return this.VARIABLE + '(\"$__CLASS__\")';\n};\n\nPHP.Compiler.prototype.Node_Scalar_FileConst = function (action) {\n  return this.VARIABLE + '(\"$__FILE__\")'; //   return this.CTX + PHP.Compiler.prototype.MAGIC_CONSTANTS + '(\"FILE\")';\n};\n\nPHP.Compiler.prototype.Node_Scalar_LineConst = function (action) {\n  return this.VARIABLE + '(\"$__LINE__\")'; //    return this.CTX + PHP.Compiler.prototype.MAGIC_CONSTANTS + '(\"LINE\")';\n};\n\nPHP.Compiler.prototype.Node_Scalar_DirConst = function (action) {\n  return this.VARIABLE + '(\"$__DIR__\")';\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 29.6.2012\n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype[PHP.Compiler.prototype.FUNCTION_HANDLER] = function (ENV, functionName, funcByRef) {\n  var args = [null],\n      // undefined context for bind\n  COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      handler,\n      staticHandler = {},\n      $GLOBAL = this[COMPILER.GLOBAL],\n      __FILE__ = \"$__FILE__\",\n      staticVars = {}; // static variable storage\n\n  ENV.FUNCTION_REFS[functionName] = funcByRef; // initializer\n\n  args.push(function (args, values) {\n    handler = PHP.VM.VariableHandler(ENV);\n    var vals = Array.prototype.slice.call(values, 2);\n    args.forEach(function (argObject, index) {\n      var arg = handler(argObject[COMPILER.PARAM_NAME]);\n      PHP.Utils.ArgumentHandler(ENV, arg, argObject, vals[index], index, functionName); // redefine item in arguments object, to be used by func_get_arg(s)\n\n      if (argObject[COMPILER.PARAM_BYREF] === true) {\n        values[index + 2] = arg;\n      } else {\n        values[index + 2] = new PHP.VM.Variable(arg[COMPILER.VARIABLE_VALUE]);\n      }\n    });\n    handler(\"GLOBALS\", $GLOBAL(\"GLOBALS\")); // magic constants\n\n    handler(\"$__FILE__\")[COMPILER.VARIABLE_VALUE] = $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE];\n    handler(\"$__METHOD__\")[COMPILER.VARIABLE_VALUE] = functionName;\n    handler(\"$__FUNCTION__\")[COMPILER.VARIABLE_VALUE] = functionName; // static handler, the messed up ordering of things is needed due to js execution order\n\n    PHP.Utils.StaticHandler(staticHandler, staticVars, handler, ENV[COMPILER.GLOBAL]);\n    return handler;\n  });\n  args.push(staticHandler);\n  return args;\n};\n\nPHP.Modules.prototype[PHP.Compiler.prototype.FUNCTION] = function (functionName, args) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      func_num_args = \"func_num_args\",\n      message = \"():  Called from the global scope - no function context\",\n      func_get_arg = \"func_get_arg\",\n      func_get_args = \"func_get_args\",\n      ret,\n      item = PHP.VM.Array.arrayItem;\n\n  if (/^func_(get_args?|num_args)$/.test(functionName)) {\n    if (args[2] instanceof PHP.VM) {\n      this[PHP.Compiler.prototype.ERROR](functionName + message, PHP.Constants.E_CORE_WARNING, true);\n\n      if (functionName === func_num_args) {\n        return new PHP.VM.Variable(-1);\n      } else {\n        return new PHP.VM.Variable(false);\n      }\n    }\n  }\n\n  if (functionName === func_num_args) {\n    return new PHP.VM.Variable(args.length - 2);\n  } else if (functionName === func_get_arg) {\n    if (!this[COMPILER.SIGNATURE](Array.prototype.slice.call(arguments, 2), func_get_arg, 1, [VARIABLE.INT])) {\n      return new PHP.VM.Variable(false);\n    }\n\n    if (arguments[2][COMPILER.VARIABLE_VALUE] < 0) {\n      this[PHP.Compiler.prototype.ERROR](func_get_arg + \"():  The argument number should be >= 0\", PHP.Constants.E_WARNING, true);\n      return new PHP.VM.Variable(false);\n    }\n\n    if (args[arguments[2][COMPILER.VARIABLE_VALUE] + 2] === undefined) {\n      this[PHP.Compiler.prototype.ERROR](func_get_arg + \"():  Argument \" + arguments[2][COMPILER.VARIABLE_VALUE] + \" not passed to function\", PHP.Constants.E_CORE_WARNING, true);\n      return new PHP.VM.Variable(false);\n    } else {\n      return args[arguments[2][COMPILER.VARIABLE_VALUE] + 2];\n    }\n  } else if (functionName === func_get_args) {\n    var props = [];\n    Array.prototype.slice.call(args, 2).forEach(function (val, index) {\n      props.push(item(index, val));\n    });\n    return this.array(props);\n  } else if (typeof functionName === \"function\") {\n    // anonymous lambda function\n    ret = functionName.apply(this, Array.prototype.slice.call(arguments, 2));\n  } else if (this[functionName] === undefined) {\n    this[PHP.Compiler.prototype.ERROR](\"Call to undefined function \" + functionName + \"()\", PHP.Constants.E_ERROR, true);\n  } else {\n    ret = this[functionName].apply(this, Array.prototype.slice.call(arguments, 2));\n  }\n\n  PHP.Utils.CheckRef.call(this, ret, this.FUNCTION_REFS[functionName]);\n  return ret;\n};\n\nPHP.Modules.prototype[PHP.Compiler.prototype.TYPE_CHECK] = function (variable, propertyType, propertyDefault, index, name) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      classObj,\n      typeInterface = false;\n  classObj = variable[COMPILER.VARIABLE_VALUE];\n\n  if (propertyDefault === undefined || propertyDefault[VARIABLE.TYPE] !== VARIABLE.NULL || variable[VARIABLE.TYPE] !== VARIABLE.NULL) {\n    var argPassedTo = \"Argument \" + (index + 1) + \" passed to \" + name + \"() must \",\n        argGiven,\n        variableType = variable[VARIABLE.TYPE],\n        errorMsg;\n\n    switch (variableType) {\n      case VARIABLE.OBJECT:\n        argGiven = \", instance of \" + classObj[COMPILER.CLASS_NAME] + \" given\";\n        break;\n\n      case VARIABLE.INT:\n        argGiven = \", integer given\";\n        break;\n\n      case VARIABLE.NULL:\n        argGiven = \", none given\";\n        break;\n    } // check if we are looking for implement or instance\n    // do a check if it exists before getting, so we don't trigger an __autoload\n\n\n    if (this.$Class.Exists(propertyType) && this.$Class.Get(propertyType).prototype[COMPILER.CLASS_TYPE] === PHP.VM.Class.INTERFACE) {\n      typeInterface = true;\n    }\n\n    switch (propertyType.toLowerCase()) {\n      case \"array\":\n        if (VARIABLE.ARRAY !== variableType) {\n          errorMsg = argPassedTo + \"be of the type array\" + argGiven;\n        }\n\n        break;\n\n      default:\n        // we are looking for an instance\n        if (classObj === null) {\n          errorMsg = argPassedTo + \"be an instance of \" + propertyType + argGiven;\n        } else if (!typeInterface && classObj[COMPILER.CLASS_NAME] !== propertyType) {\n          // not of same class type\n          errorMsg = argPassedTo + \"be an instance of \" + propertyType + argGiven;\n        } // we are looking for an implementation of interface\n        else if (typeInterface && classObj[PHP.VM.Class.INTERFACES].indexOf(propertyType) === -1) {\n            errorMsg = argPassedTo + \"implement interface \" + propertyType + argGiven;\n          }\n\n    }\n\n    if (errorMsg !== undefined) {\n      this[COMPILER.ERROR](errorMsg, PHP.Constants.E_RECOVERABLE_ERROR, false);\n    }\n  }\n};\n\nPHP.Modules.prototype[PHP.Compiler.prototype.SIGNATURE] = function (args, name, len, types) {\n  var COMPILER = PHP.Compiler.prototype,\n      $GLOBAL = this[COMPILER.GLOBAL],\n      __FILE__ = \"$__FILE__\",\n      VARIABLE = PHP.VM.Variable.prototype,\n      typeStrings = {};\n  typeStrings[VARIABLE.NULL] = \"null\";\n  typeStrings[VARIABLE.BOOL] = \"boolean\";\n  typeStrings[VARIABLE.INT] = \"long\";\n  typeStrings[VARIABLE.FLOAT] = \"float\";\n  typeStrings[VARIABLE.STRING] = \"string\";\n  typeStrings[VARIABLE.ARRAY] = \"array\";\n  typeStrings[VARIABLE.OBJECT] = \"object\";\n  typeStrings[VARIABLE.RESOURCE] = \"resource\";\n\n  if (len < 0 && args.length > -len) {\n    len = -len;\n    this[COMPILER.ERROR](name + \"() expects at most \" + len + \" parameter\" + (len !== 1 ? \"s\" : \"\") + \", \" + args.length + \" given\", PHP.Constants.E_WARNING, true);\n    return false;\n  } else if (args.length !== len && len >= 0) {\n    this[COMPILER.ERROR](name + \"() expects exactly \" + len + \" parameter\" + (len !== 1 ? \"s\" : \"\") + \", \" + args.length + \" given\", PHP.Constants.E_WARNING, true);\n    return false;\n  } else {\n    if (Array.isArray(types)) {\n      var fail = false;\n      types.forEach(function (type, paramIndex) {\n        if (Array.isArray(type)) {\n          if (type.indexOf(args[paramIndex][VARIABLE.TYPE]) === -1) {\n            if (type.indexOf(VARIABLE.STRING) === -1 || args[paramIndex][VARIABLE.CAST_STRING][VARIABLE.TYPE] !== VARIABLE.STRING) {\n              this[COMPILER.ERROR](name + \"() expects parameter \" + (paramIndex + 1) + \" to be \" + typeStrings[type[0]] + \", \" + typeStrings[args[paramIndex][VARIABLE.TYPE]] + \" given in \" + $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE] + \" on line \" + 0, PHP.Constants.E_CORE_WARNING);\n              fail = true;\n            }\n          }\n        } else {\n          if (args[paramIndex] !== undefined && type !== args[paramIndex][VARIABLE.TYPE] && type !== null) {\n            if (type === VARIABLE.INT && args[paramIndex][VARIABLE.TYPE] === VARIABLE.BOOL) {\n              return;\n            }\n\n            if (type !== VARIABLE.STRING || typeof args[paramIndex][VARIABLE.CAST_STRING] !== \"function\") {\n              this[COMPILER.ERROR](name + \"() expects parameter \" + (paramIndex + 1) + \" to be \" + typeStrings[type] + \", \" + typeStrings[args[paramIndex][VARIABLE.TYPE]] + \" given in \" + $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE] + \" on line \" + 0, PHP.Constants.E_CORE_WARNING);\n              fail = true;\n            }\n          }\n        }\n      }, this);\n\n      if (fail === true) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\n\n(function (MODULES) {\n  var COMPILER = PHP.Compiler.prototype,\n      lastError,\n      errorHandler,\n      reportingLevel = 32767,\n      shutdownFunc,\n      shutdownParams,\n      suppress = false;\n\n  MODULES.$ErrorReset = function () {\n    lastError = undefined;\n    errorHandler = undefined;\n    shutdownFunc = undefined;\n    shutdownParams = undefined;\n    suppress = false;\n    reportingLevel = 32767; // E_ALL\n  };\n\n  MODULES.register_shutdown_function = function (func) {\n    shutdownFunc = func;\n    shutdownParams = Array.prototype.slice.call(arguments, 1);\n  };\n\n  MODULES.$shutdown = function () {\n    this.$Class.Shutdown();\n\n    if (shutdownFunc !== undefined) {\n      this.call_user_func.apply(this, [shutdownFunc].concat(arguments));\n    }\n  };\n\n  MODULES[COMPILER.SUPPRESS] = function (expr) {\n    suppress = true;\n    var result = expr();\n\n    if (result === undefined) {\n      result = new PHP.VM.Variable();\n    }\n\n    result[COMPILER.SUPPRESS] = true;\n    suppress = false;\n    return result;\n  };\n\n  MODULES[COMPILER.EXCEPTION] = function (variable) {\n    var methods = {},\n        VARIABLE = PHP.VM.Variable.prototype,\n        caught = false;\n\n    methods[COMPILER.CATCH] = function (name, type, $, func) {\n      if (caught) return methods;\n\n      if (variable[VARIABLE.TYPE] === VARIABLE.OBJECT) {\n        var classObj = variable[COMPILER.VARIABLE_VALUE];\n\n        if (this.$Class.Inherits(classObj, type) || classObj[PHP.VM.Class.INTERFACES].indexOf(type) !== -1) {\n          $(name, variable);\n          caught = true;\n          func();\n        }\n      } else if (variable instanceof PHP.Halt && /^Exception$/i.test(type)) {\n        if (variable.catchable !== true) {\n          $(name, new (this.$Class.Get(\"Exception\"))(this, new PHP.VM.Variable(variable.msg)));\n          caught = true;\n          func();\n        } else {\n          throw variable;\n        }\n      }\n\n      return methods;\n    }.bind(this);\n\n    return methods;\n  };\n\n  MODULES.error_get_last = function () {\n    var item = PHP.VM.Array.arrayItem;\n    return this.array([item(\"type\", lastError.type), item(\"message\", lastError.message), item(\"file\", lastError.file), item(\"line\", lastError.line)]);\n  };\n\n  MODULES.error_reporting = function (level) {\n    reportingLevel = level[COMPILER.VARIABLE_VALUE];\n  };\n\n  MODULES.set_error_handler = function (error_handler, error_types) {\n    errorHandler = error_handler;\n  };\n\n  MODULES[COMPILER.ERROR] = function (msg, level, lineAppend, strict, catchable) {\n    var C = PHP.Constants,\n        $GLOBAL = this[COMPILER.GLOBAL],\n        __FILE__ = \"$__FILE__\";\n    lastError = {\n      message: msg,\n      line: 1,\n      type: level,\n      file: $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE]\n    };\n\n    function checkType(type) {\n      return (reportingLevel & C[type]) === C[type];\n    }\n\n    if (lineAppend === false) {\n      lineAppend = \", called in \" + $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE] + \" on line 1 and defined in \" + $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE] + \" on line 1\";\n    } else if (lineAppend === true) {\n      if (this.EVALING === true) {\n        lineAppend = \" in \" + $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE] + \"(1) : eval()'d code on line 1\";\n      } else {\n        lineAppend = \" in \" + $GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE] + \" on line 1\";\n      }\n    } else {\n      lineAppend = \"\";\n    }\n\n    if (this.$ini.track_errors == 1 || this.$ini.track_errors == \"On\") {\n      $GLOBAL(\"php_errormsg\")[COMPILER.VARIABLE_VALUE] = msg;\n    }\n\n    if (reportingLevel !== 0) {\n      if (suppress === false) {\n        if (errorHandler !== undefined) {\n          this.call_user_func(errorHandler, new PHP.VM.Variable(level), new PHP.VM.Variable(msg), new PHP.VM.Variable($GLOBAL(__FILE__)[COMPILER.VARIABLE_VALUE]), new PHP.VM.Variable(1), this.array([]));\n        } else {\n          switch (level) {\n            case C.E_ERROR:\n              this[COMPILER.DISPLAY_HANDLER] = false;\n              throw new PHP.Halt(msg, level, lineAppend, catchable);\n\n            case C.E_RECOVERABLE_ERROR:\n              this[COMPILER.DISPLAY_HANDLER] = false; //    this.$ob( \"\\nCatchable fatal error: \" + msg + lineAppend + \"\\n\");\n\n              throw new PHP.Halt(msg, level, lineAppend, catchable);\n            //   throw new PHP.Halt( level );\n\n            case C.E_WARNING:\n            case C.E_CORE_WARNING:\n            case C.E_COMPILE_WARNING:\n            case C.E_USER_WARNING:\n              if (this.$ini.display_errors != 0 && this.$ini.display_errors != \"Off\") {\n                this.echo(new PHP.VM.Variable(\"\\nWarning: \" + msg + lineAppend + \"\\n\"));\n              }\n\n              return;\n\n            case C.E_PARSE:\n              this.echo(new PHP.VM.Variable(\"\\nParse error: \" + msg + lineAppend + \"\\n\"));\n              return;\n\n            case C.E_CORE_NOTICE:\n            case C.E_NOTICE:\n              if (checkType(\"E_NOTICE\")) {\n                this.echo(new PHP.VM.Variable(\"\\nNotice: \" + msg + lineAppend + \"\\n\"));\n                return;\n              }\n\n              break;\n\n            case C.E_STRICT:\n              if (checkType(\"E_STRICT\")) {\n                if (strict) {\n                  this.$strict += \"Strict Standards: \" + msg + lineAppend + \"\\n\";\n                } else {\n                  this.echo(new PHP.VM.Variable(\"\\nStrict Standards: \" + msg + lineAppend + \"\\n\"));\n                }\n              }\n\n              return;\n\n            case C.E_DEPRECATED:\n              if (checkType(\"E_DEPRECATED\")) {\n                this.echo(new PHP.VM.Variable(\"\\nDeprecated: \" + msg + lineAppend + \"\\n\"));\n                return;\n              }\n\n              break;\n\n            default:\n              this.echo(new PHP.VM.Variable(\"\\nDefault Warning: \" + msg + lineAppend + \"\\n\"));\n              return;\n          }\n        }\n      }\n    }\n  };\n})(PHP.Modules.prototype);\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 26.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.array = function () {\n  var arr;\n\n  if (Array.isArray(arguments[0])) {\n    arr = new (this.$Class.Get(\"ArrayObject\"))(this, arguments[0]);\n  } else {\n    arr = new (this.$Class.Get(\"ArrayObject\"))(this);\n  }\n\n  return new PHP.VM.Variable(arr);\n};\n\nPHP.Modules.prototype.array_key_exists = function (key, search) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype;\n\n  if (search[VAR.TYPE] === VAR.ARRAY) {\n    var keys = search[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.KEYS][COMPILER.VARIABLE_VALUE];\n    var index = -1,\n        value = key[COMPILER.VARIABLE_VALUE];\n    keys.some(function (item, i) {\n      if (item instanceof PHP.VM.Variable) {\n        item = item[COMPILER.VARIABLE_VALUE];\n      }\n\n      if (item === value) {\n        index = i;\n        return true;\n      }\n\n      return false;\n    });\n    return new PHP.VM.Variable(index !== -1);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 19.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.$array_merge = function () {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      CLASS_PROPERTY = PHP.VM.Class.PROPERTY;\n  var array = this.array([]);\n  var value = array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE].pop(),\n      key = array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE].pop();\n  return array;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 14.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.array_pop = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      CLASS_PROPERTY = PHP.VM.Class.PROPERTY;\n  var value = array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE].pop(),\n      key = array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE].pop();\n  this.reset(array);\n  return value;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 14.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.array_push = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  array[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, \"append\", arguments[1]);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.array_search = function (needle, haystack, strict) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype;\n\n  if (haystack[VAR.TYPE] === VAR.ARRAY) {\n    var values = haystack[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE],\n        keys = haystack[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.KEYS][COMPILER.VARIABLE_VALUE];\n    var index = -1,\n        value = needle[COMPILER.VARIABLE_VALUE];\n    values.some(function (item, i) {\n      if (item instanceof PHP.VM.Variable) {\n        item = item[COMPILER.VARIABLE_VALUE];\n      }\n\n      if (item === value) {\n        index = i;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (index !== -1) {\n      return new PHP.VM.Variable(keys[index]);\n    }\n\n    return new PHP.VM.Variable(false);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 16.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.array_shift = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      CLASS_PROPERTY = PHP.VM.Class.PROPERTY;\n\n  if (array[VARIABLE.VARIABLE_TYPE] === VARIABLE.FUNCTION) {\n    this.ENV[COMPILER.ERROR](\"Only variables should be passed by reference\", PHP.Constants.E_STRICT, true);\n  }\n\n  var value = array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE].shift(),\n      key = array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE].shift();\n  this.reset(array); // key remapper    \n\n  array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.METHOD + \"remap\"]();\n  return value;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 16.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.array_unshift = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      CLASS_PROPERTY = PHP.VM.Class.PROPERTY;\n  var items = Array.prototype.slice.call(arguments, 1),\n      vals = [],\n      lastIndex,\n      keys = [];\n  items.forEach(function (item, index) {\n    if (item[VARIABLE.IS_REF]) {\n      vals.push(item);\n    } else {\n      vals.push(new PHP.VM.Variable(item[COMPILER.VARIABLE_VALUE]));\n    }\n\n    keys.push(index);\n    lastIndex = index;\n  });\n  lastIndex++;\n  var value = Array.prototype.unshift.apply(array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE], vals); // remap keys\n\n  array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE].forEach(function (key, index) {\n    // todo take into account other type of keys\n    if (typeof key === \"number\" && key % 1 === 0) {\n      array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE][index] = key + lastIndex;\n    }\n  });\n  Array.prototype.unshift.apply(array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE], keys);\n  array[COMPILER.VARIABLE_VALUE][CLASS_PROPERTY + ARRAY.POINTER][COMPILER.VARIABLE_VALUE] -= vals.length;\n  return new PHP.VM.Variable(value.length);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 29.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.count = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype;\n\n  if (variable[VAR.TYPE] === VAR.ARRAY) {\n    var values = variable[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE];\n    return new PHP.VM.Variable(values.length);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.current = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype;\n\n  if (array[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var pointer = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER],\n        values = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE];\n\n    if (pointer[COMPILER.VARIABLE_VALUE] >= values.length) {\n      return new PHP.VM.Variable(false);\n    } else {\n      return new PHP.VM.Variable(values[pointer[COMPILER.VARIABLE_VALUE]]);\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.each = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      item = PHP.VM.Array.arrayItem;\n\n  if (array[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var pointer = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER],\n        values = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE];\n\n    if (pointer[COMPILER.VARIABLE_VALUE] >= values.length) {\n      return new PHP.VM.Variable(false);\n    }\n\n    var value = this.current(array),\n        key = this.key(array);\n    this.next(array);\n    return this.array([item(0, key), item(1, value)]);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 2.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_array = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype;\n  return new PHP.VM.Variable(variable[VAR.TYPE] === VAR.ARRAY);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 12.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.key = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype;\n\n  if (array[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var pointer = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER],\n        keys = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE];\n\n    if (pointer[COMPILER.VARIABLE_VALUE] >= keys.length) {\n      return new PHP.VM.Variable(false);\n    } else {\n      return new PHP.VM.Variable(keys[pointer[COMPILER.VARIABLE_VALUE]]);\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.list = function () {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      array = Array.prototype.pop.call(arguments);\n\n  if (array[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var pointer = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER],\n        values = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE];\n    Array.prototype.slice.call(arguments, 0).forEach(function (variable, index) {\n      if (variable instanceof PHP.VM.Variable) {\n        if (values[index] !== undefined) {\n          variable[COMPILER.VARIABLE_VALUE] = values[index][COMPILER.VARIABLE_VALUE];\n        } else {\n          this.ENV[COMPILER.ERROR](\"Undefined offset: \" + index, PHP.Constants.E_NOTICE, true);\n          variable[COMPILER.VARIABLE_VALUE] = new PHP.VM.Variable();\n        }\n      } else if (Array.isArray(variable)) {\n        this.list.apply(this, variable.concat(values[index]));\n      }\n    }, this);\n    return array;\n  } // fill with null\n\n\n  Array.prototype.slice.call(arguments, 0).forEach(function (variable) {\n    if (variable instanceof PHP.VM.Variable) {\n      variable[COMPILER.VARIABLE_VALUE] = new PHP.VM.Variable()[COMPILER.VARIABLE_VALUE];\n    }\n  });\n  return new PHP.VM.Variable(false);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 12.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.next = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype;\n\n  if (array[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var pointer = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER],\n        values = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE];\n    pointer[COMPILER.VARIABLE_VALUE]++; // advance pointer\n\n    if (pointer[COMPILER.VARIABLE_VALUE] >= values.length) {\n      return new PHP.VM.Variable(false);\n    } else {\n      return new PHP.VM.Variable(values[pointer[COMPILER.VARIABLE_VALUE]]);\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.reset = function (array) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype;\n\n  if (array[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var pointer = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER],\n        values = array[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE];\n    pointer[COMPILER.VARIABLE_VALUE] = 0;\n\n    if (values.length === 0) {\n      return new PHP.VM.Variable(false);\n    } else {\n      return values[0];\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 11.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.class_exists = function (class_name, autoload) {\n  var COMPILER = PHP.Compiler.prototype;\n\n  if ((autoload === undefined || autoload[COMPILER.VARIABLE_VALUE] === true) && !this.$Class.Exists(class_name[COMPILER.VARIABLE_VALUE])) {\n    return new PHP.VM.Variable(this.$Class.__autoload(class_name[COMPILER.VARIABLE_VALUE]));\n  }\n\n  return new PHP.VM.Variable(this.$Class.Exists(class_name[COMPILER.VARIABLE_VALUE]));\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 9.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.get_class = function (object) {\n  var COMPILER = PHP.Compiler.prototype;\n\n  if (object instanceof PHP.VM.Variable) {\n    return new PHP.VM.Variable(object[COMPILER.VARIABLE_VALUE][COMPILER.CLASS_NAME]);\n  } else {\n    return new PHP.VM.Variable(object[COMPILER.CLASS_NAME]);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.get_declared_classes = function () {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      item = PHP.VM.Array.arrayItem;\n  var items = [];\n  this.$Class.DeclaredClasses().forEach(function (name, index) {\n    items.push(item(index, name));\n  });\n  return this.array(items);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 12.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.get_class_methods = function (object) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  var prefix = PHP.VM.Class.METHOD,\n      items = [],\n      classObj,\n      index = 0;\n\n  if (object[VARIABLE.TYPE] === VARIABLE.STRING) {\n    classObj = this.$Class.Get(object[COMPILER.VARIABLE_VALUE]).prototype;\n  } else if (object[VARIABLE.TYPE] === VARIABLE.OBJECT) {\n    classObj = object[COMPILER.VARIABLE_VALUE];\n  }\n\n  var item = PHP.VM.Array.arrayItem;\n\n  for (var key in classObj) {\n    if (key.substring(0, prefix.length) === prefix) {\n      var name = key.substring(prefix.length);\n      items.push(item(index++, classObj[PHP.VM.Class.METHOD_REALNAME + name]));\n    }\n  }\n\n  return this.array(items);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 13.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.get_parent_class = function (object) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      classObj,\n      parent;\n\n  if (object[VARIABLE.TYPE] === VARIABLE.STRING) {\n    classObj = this.$Class.Get(object[COMPILER.VARIABLE_VALUE]).prototype;\n  } else {\n    classObj = Object.getPrototypeOf(object[COMPILER.VARIABLE_VALUE]);\n  }\n\n  if ((parent = Object.getPrototypeOf(classObj)[COMPILER.CLASS_NAME]) === undefined) {\n    return new PHP.VM.Variable(false);\n  } else {\n    return new PHP.VM.Variable(parent);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 11.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.interface_exists = function (class_name, autoload) {\n  var COMPILER = PHP.Compiler.prototype;\n\n  if ((autoload === undefined || autoload[COMPILER.VARIABLE_VALUE] === true) && !this.$Class.Exists(class_name[COMPILER.VARIABLE_VALUE])) {\n    return new PHP.VM.Variable(this.$Class.__autoload(class_name[COMPILER.VARIABLE_VALUE]));\n  }\n\n  return new PHP.VM.Variable(this.$Class.Exists(class_name[COMPILER.VARIABLE_VALUE]));\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 13.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_subclass_of = function (object, classNameObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      classObj,\n      parent,\n      className = classNameObj[COMPILER.VARIABLE_VALUE];\n\n  if (object[VARIABLE.TYPE] === VARIABLE.STRING) {\n    classObj = this.$Class.Get(object[COMPILER.VARIABLE_VALUE]).prototype;\n  } else {\n    classObj = Object.getPrototypeOf(object[COMPILER.VARIABLE_VALUE]);\n  }\n\n  while ((parent = Object.getPrototypeOf(classObj)[COMPILER.CLASS_NAME]) !== undefined && parent !== className) {}\n\n  if (parent === undefined) {\n    return new PHP.VM.Variable(false);\n  } else {\n    return new PHP.VM.Variable(true);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 11.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.method_exists = function (object, method) {\n  var VARIABLE = PHP.VM.Variable.prototype,\n      COMPILER = PHP.Compiler.prototype;\n\n  if (object instanceof PHP.VM.Variable && object[VARIABLE.TYPE] === VARIABLE.STRING) {\n    object = this.$Class.Get(object[COMPILER.VARIABLE_VALUE]).prototype;\n  }\n\n  if (object instanceof PHP.VM.Variable) {\n    if (object[VARIABLE.TYPE] === VARIABLE.STRING) {\n      object = this.$Class.Get(object[COMPILER.VARIABLE_VALUE]).prototype;\n    }\n\n    return new PHP.VM.Variable(object[COMPILER.VARIABLE_VALUE][PHP.VM.Class.METHOD + method[COMPILER.VARIABLE_VALUE].toLowerCase()] !== undefined);\n  } else {\n    return new PHP.VM.Variable(object[PHP.VM.Class.METHOD + method[COMPILER.VARIABLE_VALUE].toLowerCase()] !== undefined);\n  }\n};\n\nPHP.Modules.prototype.$foreachInit = function (expr, ctx) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype;\n  var itm = expr[COMPILER.VARIABLE_VALUE]; // trigger get\n\n  if (expr[VAR.TYPE] === VAR.ARRAY) {\n    var pointer = itm[PHP.VM.Class.PROPERTY + ARRAY.POINTER];\n    pointer[COMPILER.VARIABLE_VALUE] = 0;\n    return {\n      len: itm[PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE].length,\n      expr: expr,\n      clone: itm[COMPILER.METHOD_CALL](this, COMPILER.ARRAY_CLONE)\n    };\n  } else if (expr[VAR.TYPE] === VAR.OBJECT) {\n    var objectValue = itm; // iteratorAggregate implemented objects\n\n    if (objectValue[PHP.VM.Class.INTERFACES].indexOf(\"Traversable\") !== -1) {\n      var iterator = objectValue;\n\n      try {\n        while (iterator instanceof PHP.VM.ClassPrototype && iterator[PHP.VM.Class.INTERFACES].indexOf(\"Iterator\") === -1) {\n          iterator = iterator[COMPILER.METHOD_CALL](this, \"getIterator\")[COMPILER.VARIABLE_VALUE];\n        }\n      } catch (e) {}\n\n      if (!(iterator instanceof PHP.VM.ClassPrototype) || iterator[PHP.VM.Class.INTERFACES].indexOf(\"Iterator\") === -1) {\n        this[COMPILER.ERROR](\"Objects returned by \" + objectValue[COMPILER.CLASS_NAME] + \"::getIterator() must be traversable or implement interface Iterator\", PHP.Constants.E_ERROR, true);\n        return;\n      }\n\n      iterator[COMPILER.METHOD_CALL](this, \"rewind\");\n      return {\n        expr: expr,\n        Class: iterator\n      };\n    } else {\n      //  members in object\n      var classProperty = PHP.VM.Class.PROPERTY;\n      return {\n        expr: expr,\n        pointer: 0,\n        keys: function (objectValue) {\n          var items = [],\n              needReorder = false;\n\n          for (var key in objectValue) {\n            if (key.substring(0, classProperty.length) === classProperty) {\n              var name = key.substring(classProperty.length);\n\n              if (PHP.Utils.Visible.call(this, name, objectValue, ctx)) {\n                items.push(name);\n              }\n            }\n\n            if ((objectValue[PHP.VM.Class.PROPERTY_TYPE + name] & PHP.VM.Class.PUBLIC) === PHP.VM.Class.PUBLIC || objectValue[PHP.VM.Class.PROPERTY_TYPE + name] === undefined) {} else {\n              needReorder = true;\n            }\n          }\n\n          if (needReorder) {\n            items.sort();\n          }\n\n          return items;\n        }.bind(this)(objectValue)\n      };\n    }\n  } else {\n    this[COMPILER.ERROR](\"Invalid argument supplied for foreach()\", PHP.Constants.E_CORE_WARNING, true);\n  }\n};\n\nPHP.Modules.prototype.$foreachEnd = function (iterator) {\n  var COMPILER = PHP.Compiler.prototype; // destruct iterator\n\n  if (iterator !== undefined && iterator.Class !== undefined) {\n    iterator.Class[COMPILER.CLASS_DESTRUCT]();\n  }\n};\n\nPHP.Modules.prototype.foreach = function (iterator, byRef, value, key) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      expr;\n\n  if (iterator === undefined || iterator.expr === undefined) {\n    return false;\n  }\n\n  expr = iterator.expr;\n\n  if (iterator.count === undefined) {\n    iterator.count = 0;\n  }\n\n  if (expr[VAR.TYPE] === VAR.ARRAY) {\n    var clonedValues = iterator.clone[PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE],\n        clonedKeys = iterator.clone[PHP.VM.Class.PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE],\n        origValues = expr[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE],\n        origKeys = expr[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE],\n        len = byRef === true || iterator.expr[VAR.IS_REF] === true ? origValues.length : iterator.len,\n        pointer = (byRef === true || iterator.expr[VAR.IS_REF] === true ? expr[COMPILER.VARIABLE_VALUE] : iterator.clone)[PHP.VM.Class.PROPERTY + ARRAY.POINTER];\n    var compareTo = byRef === true || iterator.expr[VAR.IS_REF] === true ? origValues : clonedValues,\n        result;\n\n    var index,\n        lowerLoop = function lowerLoop(index) {\n      while (compareTo[--index] === undefined && index > 0) {}\n\n      return index;\n    };\n\n    if (iterator.breakNext === true) {\n      return false;\n    }\n\n    if (pointer[COMPILER.VARIABLE_VALUE] !== iterator.count) {\n      if (iterator.last !== undefined && iterator.last !== compareTo[pointer[COMPILER.VARIABLE_VALUE]]) {\n        index = pointer[COMPILER.VARIABLE_VALUE];\n      } else if (compareTo[iterator.count] !== undefined) {\n        index = iterator.count;\n      } else if (compareTo[pointer[COMPILER.VARIABLE_VALUE]] !== undefined) {\n        index = pointer[COMPILER.VARIABLE_VALUE];\n      } else {\n        index = lowerLoop(pointer[COMPILER.VARIABLE_VALUE]);\n      }\n    } else if (compareTo[iterator.count] !== undefined) {\n      index = iterator.count;\n    } else {\n      index = lowerLoop(pointer[COMPILER.VARIABLE_VALUE]);\n    }\n\n    if (byRef === true || iterator.expr[VAR.IS_REF] === true) {\n      result = origValues[pointer[COMPILER.VARIABLE_VALUE]] !== undefined && (iterator.count <= origValues.length || iterator.diff || iterator.first !== origValues[0]);\n    } else {\n      result = clonedValues[iterator.count] !== undefined;\n    }\n\n    iterator.first = origValues[0];\n    iterator.last = compareTo[index];\n    iterator.diff = iterator.count === origValues.length;\n\n    if (result === true) {\n      if (byRef === true || iterator.expr[VAR.IS_REF] === true) {\n        value[VAR.REF](origValues[index]);\n      } else {\n        value[COMPILER.VARIABLE_VALUE] = clonedValues[iterator.count][COMPILER.VARIABLE_VALUE];\n      }\n\n      if (key instanceof PHP.VM.Variable) {\n        if (byRef === true || iterator.expr[VAR.IS_REF] === true) {\n          key[COMPILER.VARIABLE_VALUE] = origKeys[index];\n        } else {\n          key[COMPILER.VARIABLE_VALUE] = clonedKeys[index];\n        }\n      }\n      /*\n      if (!byRef && iterator.expr[ VAR.IS_REF ] !== true ) {\n          iterator.expr[ COMPILER.VARIABLE_VALUE ][ PHP.VM.Class.PROPERTY + ARRAY.POINTER][ COMPILER.VARIABLE_VALUE ]++;\n      }*/\n\n\n      iterator.prev = origValues[index];\n      iterator.count++;\n      expr[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER][COMPILER.VARIABLE_VALUE]++;\n      iterator.clone[PHP.VM.Class.PROPERTY + ARRAY.POINTER][COMPILER.VARIABLE_VALUE]++;\n\n      if ((byRef === true || iterator.expr[VAR.IS_REF] === true) && expr[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.POINTER][COMPILER.VARIABLE_VALUE] >= origValues.length) {\n        iterator.breakNext = true;\n      } // pointer[ COMPILER.VARIABLE_VALUE ]++;\n\n    }\n\n    return result;\n  } else if (expr[VAR.TYPE] === VAR.OBJECT) {\n    var objectValue = expr[COMPILER.VARIABLE_VALUE]; // iteratorAggregate implemented objects\n\n    if (objectValue[PHP.VM.Class.INTERFACES].indexOf(\"Traversable\") !== -1) {\n      if (byRef === true) {\n        this.ENV[PHP.Compiler.prototype.ERROR](\"An iterator cannot be used with foreach by reference\", PHP.Constants.E_ERROR, true);\n      }\n\n      if (iterator.first === undefined) {\n        iterator.first = true;\n      } else {\n        if (iterator.Class[COMPILER.METHOD_CALL](this, \"next\")[VAR.DEFINED] !== true) {\n          this.ENV[PHP.Compiler.prototype.ERROR](\"Undefined offset: 3\", PHP.Constants.E_NOTICE, true);\n        }\n      }\n\n      var result = iterator.Class[COMPILER.METHOD_CALL](this, \"valid\")[VAR.CAST_BOOL][COMPILER.VARIABLE_VALUE];\n\n      if (result === true) {\n        value[COMPILER.VARIABLE_VALUE] = iterator.Class[COMPILER.METHOD_CALL](this, \"current\")[COMPILER.VARIABLE_VALUE];\n\n        if (key instanceof PHP.VM.Variable) {\n          key[COMPILER.VARIABLE_VALUE] = iterator.Class[COMPILER.METHOD_CALL](this, \"key\")[COMPILER.VARIABLE_VALUE];\n        }\n      }\n\n      return result;\n    } else {\n      // loop through public members\n      if (iterator.pointer < iterator.keys.length) {\n        value[COMPILER.VARIABLE_VALUE] = objectValue[PHP.VM.Class.PROPERTY + iterator.keys[iterator.pointer]];\n\n        if (key instanceof PHP.VM.Variable) {\n          key[COMPILER.VARIABLE_VALUE] = iterator.keys[iterator.pointer];\n        }\n\n        iterator.pointer++;\n        return true;\n      }\n\n      return false;\n    }\n  } else {\n    this[COMPILER.ERROR](\"Invalid argument supplied for foreach()\", PHP.Constants.E_CORE_WARNING, true);\n    return false;\n  }\n};\n\nPHP.Modules.prototype.$include = function ($, $Static, file) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = file[COMPILER.VARIABLE_VALUE]; // this[COMPILER.FILE_PATH] = this[COMPILER.FILE_PATH] || PHP.PATH;\n  // var path = this[COMPILER.FILE_PATH];\n\n  var path = PHP.PATH; // var loaded_file = (/^(.:|\\/)/.test(filename)) ? filename : path + \"/\" + filename;\n\n  var loaded_file = resolve(path, filename);\n  var $this = this;\n  this.$Included.Include(loaded_file);\n\n  try {\n    var source = this[COMPILER.FILESYSTEM].readFileSync(loaded_file);\n  } catch (e) {\n    $this.ENV[COMPILER.ERROR](\"include(\" + filename + \"): failed to open stream: No such file or directory\", PHP.Constants.E_CORE_WARNING, true);\n    $this.ENV[COMPILER.ERROR](\"include(): Failed opening '\" + filename + \"' for inclusion (include_path='\" + path + \"')\", PHP.Constants.E_CORE_WARNING, true);\n  }\n\n  var COMPILER = PHP.Compiler.prototype; // tokenizer\n\n  var tokens = new PHP.Lexer(source); // build ast tree\n\n  var AST = new PHP.Parser(tokens); // compile tree into JS\n\n  var compiler = new PHP.Compiler(AST); // execture code in current context ($)\n\n  var exec = new Function(\"$$\", \"$\", \"ENV\", \"$Static\", compiler.src); // this[COMPILER.FILE_PATH] = PHP.Utils.Path(loaded_file);\n\n  PHP.PATH = PHP.Utils.Path(loaded_file);\n  exec.call(this, function (arg) {\n    return new PHP.VM.Variable(arg);\n  }, $, this, $Static);\n  PHP.PATH = path;\n  /**\n   * \n   * @param {string} path \n   * @param {string} filename \n   */\n\n  function resolve(path, filename) {\n    var REGEX_back = /^(\\.\\.\\/)/;\n    var REGEX_current = /^(\\.\\/)/;\n    var REGEX_root = /^(\\/)+/;\n    path = path.slice(-1) === '/' ? path.slice(0, -1) : path;\n\n    if (REGEX_root.test(filename)) {\n      return filename.replace(REGEX_root, '/');\n    } else if (REGEX_current.test(filename)) {\n      return resolve(path, filename.replace(REGEX_current, ''));\n    } else if (REGEX_back.test(filename)) {\n      path = path.substring(0, path.lastIndexOf('/'));\n      filename = filename.replace(REGEX_back, '');\n      return resolve(path, filename);\n    } else {\n      return path + '/' + filename;\n    }\n  }\n};\n\nPHP.Modules.prototype.include = function () {\n  this.$include.apply(this, arguments);\n};\n\nPHP.Modules.prototype.include_once = function ($, $Static, file) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = file[COMPILER.VARIABLE_VALUE];\n  var path = this[COMPILER.FILE_PATH];\n  var loaded_file = /^(.:|\\/)/.test(filename) ? filename : path + \"/\" + filename;\n\n  if (!this.$Included.Included(loaded_file)) {\n    this.$include.apply(this, arguments);\n  }\n};\n\nPHP.Modules.prototype.require = function () {\n  this.$include.apply(this, arguments);\n};\n\nPHP.Modules.prototype.require_once = function ($, $Static, file) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = file[COMPILER.VARIABLE_VALUE];\n  var path = this[COMPILER.FILE_PATH];\n  var loaded_file = /^(.:|\\/)/.test(filename) ? filename : path + \"/\" + filename;\n\n  if (!this.$Included.Included(loaded_file)) {\n    this.$include.apply(this, arguments);\n  }\n};\n/* Automatically built from PHP version: 5.4.0-ZS5.6.0 */\n\n\nPHP.Constants.DATE_ATOM = \"Y-m-d\\\\TH:i:sP\";\nPHP.Constants.DATE_COOKIE = \"l, d-M-y H:i:s T\";\nPHP.Constants.DATE_ISO8601 = \"Y-m-d\\\\TH:i:sO\";\nPHP.Constants.DATE_RFC822 = \"D, d M y H:i:s O\";\nPHP.Constants.DATE_RFC850 = \"l, d-M-y H:i:s T\";\nPHP.Constants.DATE_RFC1036 = \"D, d M y H:i:s O\";\nPHP.Constants.DATE_RFC1123 = \"D, d M Y H:i:s O\";\nPHP.Constants.DATE_RFC2822 = \"D, d M Y H:i:s O\";\nPHP.Constants.DATE_RFC3339 = \"Y-m-d\\\\TH:i:sP\";\nPHP.Constants.DATE_RSS = \"D, d M Y H:i:s O\";\nPHP.Constants.DATE_W3C = \"Y-m-d\\\\TH:i:sP\";\nPHP.Constants.SUNFUNCS_RET_TIMESTAMP = 0;\nPHP.Constants.SUNFUNCS_RET_STRING = 1;\nPHP.Constants.SUNFUNCS_RET_DOUBLE = 2;\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012 \n * @website http://hertzen.com\n */\n\nPHP.Modules.prototype.date_default_timezone_set = function () {\n  // todo add functionality\n  return new PHP.VM.Variable(true);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 3.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.mktime = function (hour, minute, second, month, day, year, is_dst) {\n  var date = new Date(),\n      COMPILER = PHP.Compiler.prototype;\n  hour = hour === undefined ? date.getHours() : hour[COMPILER.VARIABLE_VALUE];\n  minute = minute === undefined ? date.getMinutes() : minute[COMPILER.VARIABLE_VALUE];\n  second = second === undefined ? date.getSeconds() : second[COMPILER.VARIABLE_VALUE];\n  month = month === undefined ? date.getMonth() : month[COMPILER.VARIABLE_VALUE];\n  day = day === undefined ? date.getDay() : day[COMPILER.VARIABLE_VALUE];\n  year = year === undefined ? date.getFullYear() : year[COMPILER.VARIABLE_VALUE];\n  var createDate = new Date(year, month, day, hour, minute, second);\n  return new PHP.VM.Variable(Math.round(createDate.getTime() / 1000));\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 3.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.time = function () {\n  return new PHP.VM.Variable(Math.round(Date.now() / 1000));\n};\n/* Automatically built from PHP version: 5.4.0-ZS5.6.0 */\n\n\nPHP.Constants.E_ERROR = 1;\nPHP.Constants.E_RECOVERABLE_ERROR = 4096;\nPHP.Constants.E_WARNING = 2;\nPHP.Constants.E_PARSE = 4;\nPHP.Constants.E_NOTICE = 8;\nPHP.Constants.E_STRICT = 2048;\nPHP.Constants.E_DEPRECATED = 8192;\nPHP.Constants.E_CORE_ERROR = 16;\nPHP.Constants.E_CORE_WARNING = 32;\nPHP.Constants.E_COMPILE_ERROR = 64;\nPHP.Constants.E_COMPILE_WARNING = 128;\nPHP.Constants.E_USER_ERROR = 256;\nPHP.Constants.E_USER_WARNING = 512;\nPHP.Constants.E_USER_NOTICE = 1024;\nPHP.Constants.E_USER_DEPRECATED = 16384;\nPHP.Constants.E_ALL = 32767;\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 26.6.2012 \n * @website http://hertzen.com\n */\n\nPHP.Modules.prototype.trigger_error = function (msg, level) {\n  this[PHP.Compiler.prototype.ERROR](msg.$, level !== undefined ? level.$ : PHP.Constants.E_USER_NOTICE, true); //   throw new Error( \"Fatal error: \" + msg.$ );\n};\n/* Automatically built from PHP version: 5.4.0-ZS5.6.0 */\n\n\nPHP.Constants.UPLOAD_ERR_OK = 0;\nPHP.Constants.UPLOAD_ERR_INI_SIZE = 1;\nPHP.Constants.UPLOAD_ERR_FORM_SIZE = 2;\nPHP.Constants.UPLOAD_ERR_PARTIAL = 3;\nPHP.Constants.UPLOAD_ERR_NO_FILE = 4;\nPHP.Constants.UPLOAD_ERR_NO_TMP_DIR = 6;\nPHP.Constants.UPLOAD_ERR_CANT_WRITE = 7;\nPHP.Constants.UPLOAD_ERR_EXTENSION = 8;\n\nPHP.Modules.prototype.dirname = function (path) {\n  var COMPILER = PHP.Compiler.prototype,\n      dir = PHP.Utils.Path(path[COMPILER.VARIABLE_VALUE]);\n  return new PHP.VM.Variable(dir);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 30.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.fclose = function (fp) {\n  return new PHP.VM.Variable(true);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 18.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.file_get_contents = function (filenameObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = filenameObj[COMPILER.VARIABLE_VALUE];\n\n  if (filename === \"php://input\") {\n    return new PHP.VM.Variable(this.INPUT_BUFFER);\n  } else {\n    try {\n      if (PHP.Adapters.XHRFileSystem !== undefined) {\n        return new PHP.VM.Variable(this[COMPILER.FILESYSTEM].readFileSync(filename, true));\n      } else {\n        return new PHP.VM.Variable(this[COMPILER.FILESYSTEM].readFileSync(filename).toString());\n      }\n    } catch (e) {\n      this.ENV[COMPILER.ERROR](\"file_get_contents(\" + filename + \"): failed to open stream: No such file or directory\", PHP.Constants.E_WARNING, true);\n      return new PHP.VM.Variable(false);\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 29.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.fopen = function (filenameObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = filenameObj[COMPILER.VARIABLE_VALUE];\n  this.ENV[COMPILER.ERROR](\"fopen(\" + filename + \"): failed to open stream: No such file or directory\", PHP.Constants.E_WARNING, true);\n  return new PHP.VM.Variable(new PHP.VM.Resource());\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 18.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_uploaded_file = function (filenameObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = filenameObj[COMPILER.VARIABLE_VALUE]; // todo add check to see it is an uploaded file\n\n  try {\n    var stats = this[COMPILER.FILESYSTEM].lstatSync(filename);\n  } catch (e) {\n    return new PHP.VM.Variable(false);\n  }\n\n  return new PHP.VM.Variable(true);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 18.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.realpath = function (filenameObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = filenameObj[COMPILER.VARIABLE_VALUE]; // todo implement properly\n\n  return new PHP.VM.Variable(filename);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.rename = function (from, to) {\n  var COMPILER = PHP.Compiler.prototype,\n      filename = from[COMPILER.VARIABLE_VALUE],\n      filename2 = to[COMPILER.VARIABLE_VALUE];\n  this.ENV[COMPILER.ERROR](\"rename(\" + filename + \",\" + filename2 + \"):  The system cannot find the file specified. (code: 2)\", PHP.Constants.E_WARNING, true);\n  return new PHP.VM.Variable(false);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 4.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.call_user_func = function (callback) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      Class,\n      methodParts;\n\n  if (callback[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var ClassVar = callback[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, COMPILER.ARRAY_GET, 0),\n        methodName = callback[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, COMPILER.ARRAY_GET, 1)[COMPILER.VARIABLE_VALUE],\n        args;\n    methodParts = methodName.split(\"::\");\n\n    if (ClassVar[VARIABLE.TYPE] === VARIABLE.STRING) {\n      Class = this.$Class.Get(ClassVar[COMPILER.VARIABLE_VALUE]).prototype;\n    } else if (ClassVar[VARIABLE.TYPE] === VARIABLE.OBJECT) {\n      Class = ClassVar[COMPILER.VARIABLE_VALUE];\n    } // method call\n\n\n    if (methodParts.length === 1) {\n      args = [this, methodName].concat(Array.prototype.slice.call(arguments, 1));\n      return Class[COMPILER.METHOD_CALL].apply(Class, args);\n    } else {\n      args = [this, methodParts[0], methodParts[1]].concat(Array.prototype.slice.call(arguments, 1));\n      return Class[COMPILER.STATIC_CALL].apply(Class, args);\n    }\n  } else {\n    methodParts = callback[COMPILER.VARIABLE_VALUE].split(\"::\");\n\n    if (methodParts.length === 1) {\n      // function call\n      args = Array.prototype.slice.call(arguments, 1);\n      return this[callback[COMPILER.VARIABLE_VALUE]].apply(this, args);\n    } else {\n      // static call\n      if (this.$Class.__autoload(methodParts[0])) {\n        Class = this.$Class.Get(methodParts[0]).prototype;\n        args = [this, methodParts[0], methodParts[1]].concat(Array.prototype.slice.call(arguments, 1));\n        return Class[COMPILER.STATIC_CALL].apply(Class, args);\n      } else {\n        this[PHP.Compiler.prototype.ERROR](\"call_user_func() expects parameter 1 to be a valid callback, class '\" + methodParts[0] + \"' not found\", PHP.Constants.E_CORE_WARNING, true);\n      }\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 4.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.call_user_func_array = function (callback) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      Class,\n      methodParts;\n\n  if (callback[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var ClassVar = callback[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, COMPILER.ARRAY_GET, 0),\n        methodName = callback[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, COMPILER.ARRAY_GET, 1)[COMPILER.VARIABLE_VALUE],\n        args;\n    methodParts = methodName.split(\"::\");\n\n    if (ClassVar[VARIABLE.TYPE] === VARIABLE.STRING) {\n      Class = this.$Class.Get(ClassVar[COMPILER.VARIABLE_VALUE]).prototype;\n    } else if (ClassVar[VARIABLE.TYPE] === VARIABLE.OBJECT) {\n      Class = ClassVar[COMPILER.VARIABLE_VALUE];\n    } // method call\n\n\n    if (methodParts.length === 1) {\n      args = [this, methodName].concat(Array.prototype.slice.call(arguments, 1));\n\n      if ((Class[\"$£\" + methodName] & PHP.VM.Class.PRIVATE) === PHP.VM.Class.PRIVATE) {\n        this[COMPILER.ERROR](\"call_user_func_array() expects parameter 1 to be a valid callback, cannot access private method \" + Class[COMPILER.CLASS_NAME] + \"::\" + methodName + \"()\", PHP.Constants.E_WARNING, true);\n      }\n\n      return Class[COMPILER.METHOD_CALL].apply(Class, args);\n    } else {\n      args = [this, methodParts[0], methodParts[1]].concat(Array.prototype.slice.call(arguments, 1));\n      return Class[COMPILER.STATIC_CALL].apply(Class, args);\n    }\n  } else {\n    methodParts = callback[COMPILER.VARIABLE_VALUE].split(\"::\");\n\n    if (methodParts.length === 1) {\n      // function call\n      args = Array.prototype.slice.call(arguments, 1);\n      return this[callback[COMPILER.VARIABLE_VALUE]].apply(this, args);\n    } else {\n      // static call\n      if (this.$Class.__autoload(methodParts[0])) {\n        Class = this.$Class.Get(methodParts[0]).prototype;\n        args = [this, methodParts[0], methodParts[1]].concat(Array.prototype.slice.call(arguments, 1));\n        return Class[COMPILER.STATIC_CALL].apply(Class, args);\n      } else {\n        this[PHP.Compiler.prototype.ERROR](\"call_user_func() expects parameter 1 to be a valid callback, class '\" + methodParts[0] + \"' not found\", PHP.Constants.E_CORE_WARNING, true);\n      }\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 16.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.create_function = function (args, source) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype; // tokenizer\n\n  var tokens = new PHP.Lexer(\"<?php \" + source[COMPILER.VARIABLE_VALUE]); // build ast tree\n\n  var AST = new PHP.Parser(tokens);\n\n  if (Array.isArray(AST)) {\n    // compile tree into JS\n    var compiler = new PHP.Compiler(AST);\n  }\n\n  var src = \"function \" + COMPILER.CREATE_VARIABLE + \"( val ) { return new PHP.VM.Variable( val ); }\\n\" + COMPILER.VARIABLE + \" = \" + COMPILER.VARIABLE + \"(\";\n  src += \"[]\"; // todo, add function variables\n\n  src += \", arguments\";\n  src += \");\\n\" + compiler.src; // execture code in current context ($)\n\n  var lambda = new PHP.VM.Variable(Function.prototype.bind.apply(new Function(\"$\", COMPILER.FUNCTION_STATIC, COMPILER.FUNCTION_GLOBAL, src), this.$FHandler(this, \"anonymous\")));\n  return lambda;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 11.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.function_exists = function (function_name) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  return new PHP.VM.Variable(typeof this[function_name[COMPILER.VARIABLE_VALUE]] === \"function\");\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.dechex = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  var num = variable[COMPILER.VARIABLE_VALUE];\n  return new PHP.VM.Variable(parseInt(num, 10).toString(16));\n};\n\nPHP.Modules.prototype.constant = function (name) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      variableValue = name[COMPILER.VARIABLE_VALUE];\n  var constant = this[COMPILER.CONSTANTS][COMPILER.CONSTANT_GET](variableValue);\n\n  if (constant[VARIABLE.DEFINED] !== true) {\n    this.ENV[COMPILER.ERROR](\"constant(): Couldn't find constant \" + variableValue, PHP.Constants.E_CORE_WARNING, true);\n    return new PHP.VM.Variable();\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 7.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.define = function (name, value, case_insensitive) {\n  var COMPILER = PHP.Compiler.prototype,\n      variableValue = value[COMPILER.VARIABLE_VALUE],\n      variableName = name[COMPILER.VARIABLE_VALUE];\n\n  if (variableName.indexOf(\"::\") !== -1) {\n    this.ENV[COMPILER.ERROR](\"Class constants cannot be defined or redefined\", PHP.Constants.E_CORE_WARNING, true);\n    return new PHP.VM.Variable(false);\n  }\n\n  this[COMPILER.CONSTANTS][COMPILER.CONSTANT_SET](variableName, variableValue);\n  return new PHP.VM.Variable(true);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 7.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.defined = function (name) {\n  var COMPILER = PHP.Compiler.prototype,\n      variableName = name[COMPILER.VARIABLE_VALUE];\n  return new PHP.VM.Variable(this.$Constants[COMPILER.CONSTANT_DEFINED](variableName));\n};\n\nPHP.Modules.prototype.eval = function ($, $Static, $this, ctx, ENV, code) {\n  var COMPILER = PHP.Compiler.prototype;\n  var source = code[COMPILER.VARIABLE_VALUE]; // tokenizer\n\n  var tokens = new PHP.Lexer(\"<?php \" + source); // build ast tree\n\n  var AST = new PHP.Parser(tokens, true);\n\n  if (Array.isArray(AST)) {\n    // compile tree into JS\n    var compiler = new PHP.Compiler(AST, undefined, {\n      INSIDE_METHOD: ctx !== undefined ? true : false\n    }); // execture code in current context ($)\n\n    var exec = new Function(\"$$\", \"$\", \"ENV\", \"$Static\", \"ctx\", compiler.src);\n    this.EVALING = true;\n    var ret = exec.call($this, function (arg) {\n      return new PHP.VM.Variable(arg);\n    }, $, ENV, $Static, ctx);\n    this.EVALING = undefined;\n    return ret;\n  } else {\n    this[COMPILER.ERROR](\"syntax error, unexpected $end in \" + this[COMPILER.GLOBAL](\"$__FILE__\")[COMPILER.VARIABLE_VALUE] + \"(1) : eval()'d code on line \" + 1, PHP.Constants.E_PARSE);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.exit = function (message) {};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 9.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.php_egg_logo_guid = function () {\n  return new PHP.VM.Variable(\"PHPE9568F36-D428-11d2-A769-00AA001ACF42\");\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 9.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.php_logo_guid = function () {\n  return new PHP.VM.Variable(\"PHPE9568F34-D428-11d2-A769-00AA001ACF42\");\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 9.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.php_real_logo_guid = function () {\n  return new PHP.VM.Variable(\"PHPE9568F34-D428-11d2-A769-00AA001ACF42\");\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 9.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.zend_logo_guid = function () {\n  return new PHP.VM.Variable(\"PHPE9568F35-D428-11d2-A769-00AA001ACF42\");\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 18.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.header = function (string) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      variableValue = string[COMPILER.VARIABLE_VALUE]; // todo add to output\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 14.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.assert = function (assertion) {\n  // todo add  \n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(assertion[COMPILER.VARIABLE_VALUE]);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ini_get = function (varname) {\n  var COMPILER = PHP.Compiler.prototype,\n      old = this.$ini[varname[COMPILER.VARIABLE_VALUE]];\n\n  if (old === undefined) {\n    return new PHP.VM.Variable(false);\n  } else {\n    old = old.toString().replace(/^On$/i, \"1\");\n    old = old.toString().replace(/^Off$/i, \"0\");\n    return new PHP.VM.Variable(old + \"\");\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ini_restore = function (varname) {\n  var COMPILER = PHP.Compiler.prototype;\n  this.$ini[varname[COMPILER.VARIABLE_VALUE]] = Object.getPrototypeOf(this.$ini)[varname[COMPILER.VARIABLE_VALUE]];\n  return new PHP.VM.Variable();\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 5.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ini_set = PHP.Modules.prototype.ini_alter = function (varname, newvalue) {\n  var COMPILER = PHP.Compiler.prototype;\n  var old = this.$ini[varname[COMPILER.VARIABLE_VALUE]];\n  this.$ini[varname[COMPILER.VARIABLE_VALUE]] = newvalue[COMPILER.VARIABLE_VALUE];\n  return new PHP.VM.Variable(old);\n};\n\nPHP.Modules.prototype.getenv = function (name) {\n  var COMPILER = PHP.Compiler.prototype,\n      variableValue = name[COMPILER.VARIABLE_VALUE];\n\n  switch (variableValue) {\n    case \"TEST_PHP_EXECUTABLE\":\n      return new PHP.VM.Variable(PHP.Constants.PHP_BINARY);\n\n    default:\n      return new PHP.VM.Variable(false);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 11.7.2012 \n * @website http://hertzen.com\n */\n\n\n(function (MODULES) {\n  MODULES.set_time_limit = function (newvalue) {\n    var COMPILER = PHP.Compiler.prototype;\n    this.$ini.max_execution_time = newvalue[COMPILER.VARIABLE_VALUE];\n  };\n})(PHP.Modules.prototype);\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.zend_version = function () {\n  return new PHP.VM.Variable(\"1.0.0\");\n};\n/* Automatically built from PHP version: 5.4.0-ZS5.6.0 */\n\n\nPHP.Constants.PHP_OUTPUT_HANDLER_START = 1;\nPHP.Constants.PHP_OUTPUT_HANDLER_WRITE = 0;\nPHP.Constants.PHP_OUTPUT_HANDLER_FLUSH = 4;\nPHP.Constants.PHP_OUTPUT_HANDLER_CLEAN = 2;\nPHP.Constants.PHP_OUTPUT_HANDLER_FINAL = 8;\nPHP.Constants.PHP_OUTPUT_HANDLER_CONT = 0;\nPHP.Constants.PHP_OUTPUT_HANDLER_END = 8;\nPHP.Constants.PHP_OUTPUT_HANDLER_CLEANABLE = 16;\nPHP.Constants.PHP_OUTPUT_HANDLER_FLUSHABLE = 32;\nPHP.Constants.PHP_OUTPUT_HANDLER_REMOVABLE = 64;\nPHP.Constants.PHP_OUTPUT_HANDLER_STDFLAGS = 112;\nPHP.Constants.PHP_OUTPUT_HANDLER_STARTED = 4096;\nPHP.Constants.PHP_OUTPUT_HANDLER_DISABLED = 8192;\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\nPHP.Modules.prototype.flush = function () {\n  return new PHP.VM.Variable();\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\n(function (MODULES) {\n  var DEFAULT = \"default output handler\",\n      COMPILER = PHP.Compiler.prototype,\n      OUTPUT_BUFFERS = COMPILER.OUTPUT_BUFFERS,\n      CONSTANTS = PHP.Constants,\n      flags = [],\n      types = [],\n      erasable = [],\n      recurring = 0,\n      NO_BUFFER_MSG = \"(): failed to delete buffer. No buffer to delete\",\n      handlers = [];\n\n  function pop() {\n    handlers.pop();\n    flags.pop();\n    types.pop();\n    erasable.pop();\n  }\n\n  MODULES.ob_gzhandler = function (str) {\n    return str;\n  };\n\n  MODULES.$obreset = function () {\n    flags = [];\n    types = [];\n    handlers = [];\n    erasable = [];\n    recurring = 0;\n  };\n\n  MODULES.$ob = function (str) {\n    var index = this[OUTPUT_BUFFERS].length - 1,\n        VARIABLE = PHP.VM.Variable.prototype;\n    this[OUTPUT_BUFFERS][index] += str;\n  };\n\n  MODULES.$flush = function (str, minus) {\n    minus = minus === undefined ? 1 : 0;\n    var index = this[COMPILER.OUTPUT_BUFFERS].length - 1 - minus,\n        VARIABLE = PHP.VM.Variable.prototype; // trigger flush\n\n    if (handlers[index] !== DEFAULT && handlers[index] !== undefined && this[COMPILER.DISPLAY_HANDLER] !== false) {\n      recurring++; // check that we aren't ending up in any endless error loop\n\n      if (recurring <= 10) {\n        this[COMPILER.DISPLAY_HANDLER] = true;\n        var result = this[handlers[index]].call(this, new PHP.VM.Variable(str), new PHP.VM.Variable(types[index]));\n        recurring = 0;\n        this[COMPILER.DISPLAY_HANDLER] = undefined;\n\n        if (result[VARIABLE.TYPE] !== VARIABLE.NULL) {\n          return result[COMPILER.VARIABLE_VALUE];\n        }\n      }\n\n      return \"\";\n    } else {\n      return str;\n    }\n  };\n\n  MODULES.ob_clean = function () {\n    if (!this[COMPILER.SIGNATURE](arguments, \"ob_clean\", 0, [])) {\n      return new PHP.VM.Variable(null);\n    }\n\n    var index = erasable.length - 1;\n\n    if (erasable[index] === false) {\n      this[COMPILER.ERROR](\"ob_clean(): failed to delete buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n      return new PHP.VM.Variable(false);\n    }\n\n    if (this[COMPILER.OUTPUT_BUFFERS].length > 1) {\n      this[COMPILER.OUTPUT_BUFFERS].pop();\n      this[COMPILER.OUTPUT_BUFFERS].push(\"\");\n      return new PHP.VM.Variable(true);\n    } else {\n      this[COMPILER.ERROR](\"ob_clean(): failed to delete buffer. No buffer to delete\", PHP.Constants.E_CORE_NOTICE, true);\n      return new PHP.VM.Variable(false);\n    }\n  };\n\n  MODULES.$obflush = function () {\n    var index = this[COMPILER.OUTPUT_BUFFERS].length - 1,\n        VARIABLE = PHP.VM.Variable.prototype;\n    var content = this[COMPILER.OUTPUT_BUFFERS][index];\n    this[COMPILER.OUTPUT_BUFFERS][index] = \"\";\n    var value = this.$flush.call(this, content);\n    this[COMPILER.OUTPUT_BUFFERS][index] = value;\n  };\n\n  MODULES.ob_start = function (output_callback, chunk_size, erase) {\n    var FUNCTION_NAME = \"ob_start\",\n        VARIABLE = PHP.VM.Variable.prototype;\n\n    if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, -3, [null, VARIABLE.INT, VARIABLE.INT])) {\n      return new PHP.VM.Variable(null);\n    }\n\n    if (output_callback !== undefined) {\n      var fail = false,\n          splitClassVar;\n\n      if (output_callback[VARIABLE.TYPE] !== VARIABLE.STRING && output_callback[VARIABLE.TYPE] !== VARIABLE.ARRAY && output_callback[VARIABLE.TYPE] !== VARIABLE.LAMBDA) {\n        this[COMPILER.ERROR](FUNCTION_NAME + \"(): no array or string given\", PHP.Constants.E_WARNING, true);\n        fail = true;\n      } else if (output_callback[VARIABLE.TYPE] === VARIABLE.ARRAY || output_callback[VARIABLE.TYPE] === VARIABLE.STRING && (splitClassVar = output_callback[COMPILER.VARIABLE_VALUE].split(\"::\")).length > 1) {\n        // method call\n        var classVar, methodVar;\n\n        if (output_callback[VARIABLE.TYPE] === VARIABLE.STRING) {\n          classVar = new PHP.VM.Variable(splitClassVar[0]);\n          methodVar = new PHP.VM.Variable(splitClassVar[1]);\n        } else {\n          classVar = output_callback[COMPILER.DIM_FETCH](this, new PHP.VM.Variable(0));\n          methodVar = output_callback[COMPILER.DIM_FETCH](this, new PHP.VM.Variable(1));\n\n          if (this.count(output_callback)[COMPILER.VARIABLE_VALUE] !== 2) {\n            this[COMPILER.ERROR](FUNCTION_NAME + \"(): array must have exactly two members\", PHP.Constants.E_WARNING, true);\n            fail = true;\n          }\n        }\n\n        if (!fail) {\n          if (classVar[VARIABLE.TYPE] === VARIABLE.STRING && this.class_exists(classVar)[COMPILER.VARIABLE_VALUE] === false) {\n            this[COMPILER.ERROR](FUNCTION_NAME + \"(): class '\" + PHP.Utils.ClassName(classVar) + \"' not found\", PHP.Constants.E_WARNING, true);\n            fail = true;\n          } else if (this.method_exists(classVar, methodVar)[COMPILER.VARIABLE_VALUE] === false) {\n            this[COMPILER.ERROR](FUNCTION_NAME + \"(): class '\" + PHP.Utils.ClassName(classVar) + \"' does not have a method '\" + methodVar[COMPILER.VARIABLE_VALUE] + \"'\", PHP.Constants.E_WARNING, true);\n            fail = true;\n          }\n        }\n      } else if (output_callback[VARIABLE.TYPE] === VARIABLE.STRING) {\n        // function call\n        if (this.function_exists(output_callback)[COMPILER.VARIABLE_VALUE] === false) {\n          this[COMPILER.ERROR](FUNCTION_NAME + \"(): function '\" + output_callback[COMPILER.VARIABLE_VALUE] + \"' not found or invalid function name\", PHP.Constants.E_WARNING, true);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to create buffer\", PHP.Constants.E_CORE_NOTICE, true);\n        return new PHP.VM.Variable(false);\n      }\n    }\n\n    var handler = DEFAULT,\n        type;\n\n    if (output_callback !== undefined) {\n      handler = output_callback[COMPILER.VARIABLE_VALUE];\n      type = CONSTANTS.PHP_OUTPUT_HANDLER_START;\n    } else {\n      type = CONSTANTS.PHP_OUTPUT_HANDLER_WRITE;\n    }\n\n    this[OUTPUT_BUFFERS].push(\"\");\n    types.push(type);\n    flags.push(CONSTANTS.PHP_OUTPUT_HANDLER_STDFLAGS | type);\n    handlers.push(handler);\n\n    if (erase === undefined || erase[COMPILER.VARIABLE_VALUE] === true) {\n      erasable.push(true);\n    } else {\n      erasable.push(false);\n    }\n\n    return new PHP.VM.Variable(true);\n  };\n\n  MODULES.ob_end_clean = function () {\n    var FUNCTION_NAME = \"ob_end_clean\";\n\n    if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n      return new PHP.VM.Variable(null);\n    }\n\n    var index = erasable.length - 1;\n\n    if (erasable[index] === false) {\n      this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to discard buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n      return new PHP.VM.Variable(false);\n    }\n\n    if (this[COMPILER.OUTPUT_BUFFERS].length > 1) {\n      this[OUTPUT_BUFFERS].pop();\n      pop();\n      return new PHP.VM.Variable(true);\n    } else {\n      this[COMPILER.ERROR](FUNCTION_NAME + NO_BUFFER_MSG, PHP.Constants.E_CORE_NOTICE, true);\n      return new PHP.VM.Variable(false);\n    }\n  };\n\n  MODULES.ob_end_flush = function () {\n    var FUNCTION_NAME = \"ob_end_flush\";\n\n    if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n      return new PHP.VM.Variable(null);\n    }\n\n    var index = erasable.length - 1;\n\n    if (erasable[index] === false) {\n      this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to send buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n      return new PHP.VM.Variable(false);\n    }\n\n    if (this[COMPILER.OUTPUT_BUFFERS].length > 1) {\n      var flush = this[OUTPUT_BUFFERS].pop();\n      this[OUTPUT_BUFFERS][this[OUTPUT_BUFFERS].length - 1] += this.$flush(flush, 1);\n      pop();\n      return new PHP.VM.Variable(true);\n    } else {\n      this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to delete and flush buffer. No buffer to delete or flush\", PHP.Constants.E_CORE_NOTICE, true);\n      return new PHP.VM.Variable(false);\n    }\n  };\n\n  MODULES.ob_get_flush = function () {\n    var FUNCTION_NAME = \"ob_get_flush\";\n\n    if (this[COMPILER.DISPLAY_HANDLER] === true) {\n      this[COMPILER.ERROR](\"ob_get_flush(): Cannot use output buffering in output buffering display handlers\", PHP.Constants.E_ERROR, true);\n    } //  var flush = this[ OUTPUT_BUFFERS ].pop();\n\n\n    var index = erasable.length - 1;\n    var flush = this[OUTPUT_BUFFERS][this[OUTPUT_BUFFERS].length - 1];\n\n    if (erasable[index] === false) {\n      this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to send buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n      this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to delete buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n    } else {\n      this[OUTPUT_BUFFERS].pop();\n      this[OUTPUT_BUFFERS][this[OUTPUT_BUFFERS].length - 1] += this.$flush(flush, 1);\n      pop();\n    }\n\n    return new PHP.VM.Variable(flush);\n  };\n\n  MODULES.ob_get_clean = function () {\n    var FUNCTION_NAME = \"ob_get_clean\";\n\n    if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n      return new PHP.VM.Variable(null);\n    }\n\n    var index = erasable.length - 1;\n\n    if (this[OUTPUT_BUFFERS].length > 1) {\n      var flush = this[OUTPUT_BUFFERS][this[OUTPUT_BUFFERS].length - 1];\n\n      if (erasable[index] === false) {\n        this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to discard buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n        this[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to delete buffer of \" + handlers[index] + \" (0)\", PHP.Constants.E_CORE_NOTICE, true);\n      } else {\n        this[OUTPUT_BUFFERS].pop();\n        pop();\n      }\n\n      return new PHP.VM.Variable(flush);\n    } else {\n      return new PHP.VM.Variable(false);\n    }\n  };\n\n  MODULES.ob_list_handlers = function () {\n    return PHP.VM.Array.fromObject.call(this, handlers);\n  };\n\n  MODULES.ob_get_status = function (full_status) {\n    var item = PHP.VM.Array.arrayItem,\n        get_status = function (index) {\n      return [item(\"name\", handlers[index]), item(\"type\", types[index]), item(\"flags\", flags[index]), item(\"level\", index), item(\"chunk_size\", 0), item(\"buffer_size\", 16384), item(\"buffer_used\", this[OUTPUT_BUFFERS][index + 1].length)];\n    }.bind(this);\n\n    if (this[OUTPUT_BUFFERS].length === 1) {\n      return this.array([]);\n    }\n\n    if (full_status !== undefined && full_status[COMPILER.VARIABLE_VALUE] === true) {\n      var arr = [];\n      handlers.forEach(function (handler, index) {\n        arr.push(item(index, this.array(get_status(index))));\n      }, this);\n      return this.array(arr);\n    } else {\n      return this.array(get_status(handlers.length - 1));\n    }\n  };\n\n  MODULES.ob_implicit_flush = function () {\n    var FUNCTION_NAME = \"ob_implicit_flush\";\n\n    if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, -1, [])) {\n      return new PHP.VM.Variable(null);\n    }\n\n    return new PHP.VM.Variable();\n  };\n})(PHP.Modules.prototype);\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ob_flush = function () {\n  var FUNCTION_NAME = \"ob_flush\",\n      COMPILER = PHP.Compiler.prototype;\n\n  if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n    return new PHP.VM.Variable(null);\n  }\n\n  if (this[COMPILER.OUTPUT_BUFFERS].length > 1) {\n    var flush = this[PHP.Compiler.prototype.OUTPUT_BUFFERS].pop();\n    this[PHP.Compiler.prototype.OUTPUT_BUFFERS][this[PHP.Compiler.prototype.OUTPUT_BUFFERS].length - 1] += flush;\n    this[PHP.Compiler.prototype.OUTPUT_BUFFERS].push(\"\");\n    this.$obflush();\n    return new PHP.VM.Variable(true);\n  } else {\n    this.ENV[COMPILER.ERROR](FUNCTION_NAME + \"(): failed to flush buffer. No buffer to flush\", PHP.Constants.E_CORE_NOTICE, true);\n    return new PHP.VM.Variable(false);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ob_get_contents = function () {\n  var FUNCTION_NAME = \"ob_get_contents\",\n      COMPILER = PHP.Compiler.prototype;\n\n  if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n    return new PHP.VM.Variable(null);\n  }\n\n  if (this[COMPILER.OUTPUT_BUFFERS].length > 1) {\n    return new PHP.VM.Variable(this[PHP.Compiler.prototype.OUTPUT_BUFFERS][this[PHP.Compiler.prototype.OUTPUT_BUFFERS].length - 1]);\n  } else {\n    //   this.ENV[ COMPILER.ERROR ]( FUNCTION_NAME + \"(): failed to flush buffer. No buffer to flush\", PHP.Constants.E_CORE_NOTICE, true );\n    return new PHP.VM.Variable(false);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ob_get_length = function () {\n  var FUNCTION_NAME = \"ob_get_length\",\n      COMPILER = PHP.Compiler.prototype;\n\n  if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n    return new PHP.VM.Variable(null);\n  }\n\n  if (this[COMPILER.OUTPUT_BUFFERS].length > 1) {\n    return new PHP.VM.Variable(this[PHP.Compiler.prototype.OUTPUT_BUFFERS][this[PHP.Compiler.prototype.OUTPUT_BUFFERS].length - 1].length);\n  } else {\n    //   this.ENV[ COMPILER.ERROR ]( FUNCTION_NAME + \"(): failed to flush buffer. No buffer to flush\", PHP.Constants.E_CORE_NOTICE, true );\n    return new PHP.VM.Variable(false);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.ob_get_level = function () {\n  var FUNCTION_NAME = \"ob_get_level\",\n      COMPILER = PHP.Compiler.prototype;\n\n  if (!this[COMPILER.SIGNATURE](arguments, FUNCTION_NAME, 0, [])) {\n    return new PHP.VM.Variable(null);\n  }\n\n  return new PHP.VM.Variable(this[COMPILER.OUTPUT_BUFFERS].length - 1);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 16.7.2012 \n * @website http://hertzen.com\n */\n// todo improve\n\n\nPHP.Modules.prototype.preg_match = function (pattern, subject, matches) {\n  var COMPILER = PHP.Compiler.prototype;\n  var re = new RegExp(pattern[COMPILER.VARIABLE_VALUE].substr(1, pattern[COMPILER.VARIABLE_VALUE].length - 2));\n  var result = subject[COMPILER.VARIABLE_VALUE].toString().match(re);\n  return new PHP.VM.Variable(result === null ? 0 : result.length);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 24.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.echo = function () {\n  var COMPILER = PHP.Compiler.prototype,\n      __toString = \"__toString\",\n      VARIABLE = PHP.VM.Variable.prototype;\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    if (arg instanceof PHP.VM.VariableProto) {\n      var value = arg[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE];\n\n      if (arg[VARIABLE.TYPE] === VARIABLE.FLOAT) {\n        this.$ob(value.toString().replace(/\\./, this.$locale.decimal_point));\n      } else if (arg[VARIABLE.TYPE] === VARIABLE.BOOL && value != 1) {\n        return;\n      } else if (arg[VARIABLE.TYPE] !== VARIABLE.NULL) {\n        this.$ob(value);\n      }\n    } else {\n      this.$ob(arg); //   this[ COMPILER.OUTPUT_BUFFERS ][this[ COMPILER.OUTPUT_BUFFERS ].length - 1] += arg;\n    }\n  }, this);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 27.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.explode = function (delim, string) {\n  var VARIABLE = PHP.VM.Variable.prototype,\n      COMPILER = PHP.Compiler.prototype,\n      item = PHP.VM.Array.arrayItem;\n\n  if (string[VARIABLE.TYPE] === VARIABLE.STRING) {\n    // Defaults to an empty string\n    var items = string[COMPILER.VARIABLE_VALUE].split(delim[COMPILER.VARIABLE_VALUE]),\n        arr = [];\n    items.forEach(function (val, index) {\n      arr.push(item(index, val));\n    });\n    return this.array(arr);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 27.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.implode = function (glue, pieces) {\n  var VARIABLE = PHP.VM.Variable.prototype,\n      COMPILER = PHP.Compiler.prototype;\n\n  if (glue[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    // Defaults to an empty string\n    pieces = glue;\n    glue = \"\";\n  } else {\n    glue = glue[COMPILER.VARIABLE_VALUE];\n  }\n\n  var values = pieces[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE];\n  return new PHP.VM.Variable(values.map(function (val) {\n    return val[COMPILER.VARIABLE_VALUE];\n  }).join(glue));\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.localeconv = function () {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      item = PHP.VM.Array.arrayItem;\n  var locale = this.$locale; // todo add all\n\n  return this.array([item(\"decimal_point\", locale.decimal_point), item(\"thousands_sep\", locale.thousands_sep)]);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 27.6.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.parse_str = function (str, arr) {};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 4.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.print = function (variable) {\n  this.echo(variable);\n  return new PHP.VM.Variable(1);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.printf = function (format) {\n  var COMPILER = PHP.Compiler.prototype,\n      __toString = \"__toString\",\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (format instanceof PHP.VM.VariableProto) {\n    var value = format[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE];\n\n    if (format[COMPILER.VARIABLE_VALUE][COMPILER.CLASS_NAME] === \"stdClass\") {\n      this.ENV[COMPILER.ERROR](\"Object of class stdClass to string conversion\", PHP.Constants.E_NOTICE, true);\n      value = \"Object\";\n    }\n\n    if (format[VARIABLE.TYPE] !== VARIABLE.NULL) {\n      // todo fix to make more specific\n      Array.prototype.slice.call(arguments, 1).forEach(function (item) {\n        value = value.replace(/%./, item[COMPILER.VARIABLE_VALUE]);\n      });\n      this.$ob(value);\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.setlocale = function (category) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  var cat = category[COMPILER.VARIABLE_VALUE],\n      localeObj,\n      localeName;\n  Array.prototype.slice.call(arguments, 1).some(function (localeVar) {\n    var locale = localeVar[COMPILER.VARIABLE_VALUE];\n    return Object.keys(PHP.Locales).some(function (key) {\n      if (key === locale) {\n        localeName = key;\n        localeObj = PHP.Locales[key];\n        return true;\n      }\n\n      return false;\n    });\n  });\n\n  if (localeObj === undefined) {\n    return new PHP.VM.Variable(false);\n  } // console.log( cat );\n\n\n  Object.keys(this.$locale).forEach(function (key) {\n    if (localeObj[key] !== undefined) {\n      this.$locale[key] = localeObj[key];\n    }\n  }, this);\n  return new PHP.VM.Variable(localeName);\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 23.7.2012\n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.sprintf = function (format) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (format instanceof PHP.VM.VariableProto) {\n    var value = format[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE];\n\n    if (format[VARIABLE.TYPE] !== VARIABLE.NULL) {\n      // todo fix to make more specific\n      Array.prototype.slice.call(arguments, 1).forEach(function (item) {\n        value = value.replace(/%./, item[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE]);\n      });\n      return new PHP.VM.Variable(value);\n    }\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 18.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.str_repeat = function (input, multiplier) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      variableValue = input[COMPILER.VARIABLE_VALUE];\n  var str = \"\";\n\n  for (var i = 0, len = multiplier[COMPILER.VARIABLE_VALUE]; i < len; i++) {\n    str += variableValue;\n  }\n\n  return new PHP.VM.Variable(str);\n};\n\nPHP.Modules.prototype.str_replace = function (search, replace, subject) {\n  var COMPILER = PHP.Compiler.prototype;\n  var re = new RegExp(search[COMPILER.VARIABLE_VALUE], \"g\");\n  return new PHP.VM.Variable(subject[COMPILER.VARIABLE_VALUE].replace(re, replace[COMPILER.VARIABLE_VALUE]));\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.str_rot13 = function (str, arr) {\n  var FUNCTION_NAME = \"str_rot13\";\n\n  if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, FUNCTION_NAME, 1, [])) {\n    return new PHP.VM.Variable(null);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 3.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.strlen = function (string) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(string[COMPILER.VARIABLE_VALUE].length);\n};\n\nPHP.Modules.prototype.strncmp = function (str1, str2, len) {\n  var COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype;\n\n  if (str1[VAR.CAST_STRING][COMPILER.VARIABLE_VALUE].substring(0, len[COMPILER.VARIABLE_VALUE]) === str2[VAR.CAST_STRING][COMPILER.VARIABLE_VALUE].substring(0, len[COMPILER.VARIABLE_VALUE])) {\n    return new PHP.VM.Variable(0);\n  } else {\n    return new PHP.VM.Variable(1);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.strtolower = function (str) {\n  var VARIABLE = PHP.VM.Variable.prototype,\n      COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(str[COMPILER.VARIABLE_VALUE].toLowerCase());\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 10.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.strtoupper = function (str) {\n  var VARIABLE = PHP.VM.Variable.prototype,\n      COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(str[COMPILER.VARIABLE_VALUE].toUpperCase());\n};\n\nPHP.Modules.prototype.trim = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (variable[VARIABLE.TYPE] !== VARIABLE.STRING) {\n    variable = variable[VARIABLE.CAST_STRING];\n  }\n\n  return new PHP.VM.Variable(variable[COMPILER.VARIABLE_VALUE].toString().trim());\n};\n\nPHP.Constants.T_INCLUDE = 262;\nPHP.Constants.T_INCLUDE_ONCE = 261;\nPHP.Constants.T_EVAL = 260;\nPHP.Constants.T_REQUIRE = 259;\nPHP.Constants.T_REQUIRE_ONCE = 258;\nPHP.Constants.T_LOGICAL_OR = 263;\nPHP.Constants.T_LOGICAL_XOR = 264;\nPHP.Constants.T_LOGICAL_AND = 265;\nPHP.Constants.T_PRINT = 266;\nPHP.Constants.T_PLUS_EQUAL = 277;\nPHP.Constants.T_MINUS_EQUAL = 276;\nPHP.Constants.T_MUL_EQUAL = 275;\nPHP.Constants.T_DIV_EQUAL = 274;\nPHP.Constants.T_CONCAT_EQUAL = 273;\nPHP.Constants.T_MOD_EQUAL = 272;\nPHP.Constants.T_AND_EQUAL = 271;\nPHP.Constants.T_OR_EQUAL = 270;\nPHP.Constants.T_XOR_EQUAL = 269;\nPHP.Constants.T_SL_EQUAL = 268;\nPHP.Constants.T_SR_EQUAL = 267;\nPHP.Constants.T_BOOLEAN_OR = 278;\nPHP.Constants.T_BOOLEAN_AND = 279;\nPHP.Constants.T_IS_EQUAL = 283;\nPHP.Constants.T_IS_NOT_EQUAL = 282;\nPHP.Constants.T_IS_IDENTICAL = 281;\nPHP.Constants.T_IS_NOT_IDENTICAL = 280;\nPHP.Constants.T_IS_SMALLER_OR_EQUAL = 285;\nPHP.Constants.T_IS_GREATER_OR_EQUAL = 284;\nPHP.Constants.T_SL = 287;\nPHP.Constants.T_SR = 286;\nPHP.Constants.T_INSTANCEOF = 288;\nPHP.Constants.T_INC = 297;\nPHP.Constants.T_DEC = 296;\nPHP.Constants.T_INT_CAST = 295;\nPHP.Constants.T_DOUBLE_CAST = 294;\nPHP.Constants.T_STRING_CAST = 293;\nPHP.Constants.T_ARRAY_CAST = 292;\nPHP.Constants.T_OBJECT_CAST = 291;\nPHP.Constants.T_BOOL_CAST = 290;\nPHP.Constants.T_UNSET_CAST = 289;\nPHP.Constants.T_NEW = 299;\nPHP.Constants.T_CLONE = 298;\nPHP.Constants.T_EXIT = 300;\nPHP.Constants.T_IF = 301;\nPHP.Constants.T_ELSEIF = 302;\nPHP.Constants.T_ELSE = 303;\nPHP.Constants.T_ENDIF = 304;\nPHP.Constants.T_LNUMBER = 305;\nPHP.Constants.T_DNUMBER = 306;\nPHP.Constants.T_STRING = 307;\nPHP.Constants.T_STRING_VARNAME = 308;\nPHP.Constants.T_VARIABLE = 309;\nPHP.Constants.T_NUM_STRING = 310;\nPHP.Constants.T_INLINE_HTML = 311;\nPHP.Constants.T_CHARACTER = 312;\nPHP.Constants.T_BAD_CHARACTER = 313;\nPHP.Constants.T_ENCAPSED_AND_WHITESPACE = 314;\nPHP.Constants.T_CONSTANT_ENCAPSED_STRING = 315;\nPHP.Constants.T_ECHO = 316;\nPHP.Constants.T_DO = 317;\nPHP.Constants.T_WHILE = 318;\nPHP.Constants.T_ENDWHILE = 319;\nPHP.Constants.T_FOR = 320;\nPHP.Constants.T_ENDFOR = 321;\nPHP.Constants.T_FOREACH = 322;\nPHP.Constants.T_ENDFOREACH = 323;\nPHP.Constants.T_DECLARE = 324;\nPHP.Constants.T_ENDDECLARE = 325;\nPHP.Constants.T_AS = 326;\nPHP.Constants.T_SWITCH = 327;\nPHP.Constants.T_ENDSWITCH = 328;\nPHP.Constants.T_CASE = 329;\nPHP.Constants.T_DEFAULT = 330;\nPHP.Constants.T_BREAK = 331;\nPHP.Constants.T_CONTINUE = 332;\nPHP.Constants.T_GOTO = 333;\nPHP.Constants.T_FUNCTION = 334;\nPHP.Constants.T_CONST = 335;\nPHP.Constants.T_RETURN = 336;\nPHP.Constants.T_TRY = 337;\nPHP.Constants.T_CATCH = 338;\nPHP.Constants.T_THROW = 339;\nPHP.Constants.T_USE = 340; //PHP.Constants.T_INSTEADOF = ;\n\nPHP.Constants.T_GLOBAL = 341;\nPHP.Constants.T_STATIC = 347;\nPHP.Constants.T_ABSTRACT = 346;\nPHP.Constants.T_FINAL = 345;\nPHP.Constants.T_PRIVATE = 344;\nPHP.Constants.T_PROTECTED = 343;\nPHP.Constants.T_PUBLIC = 342;\nPHP.Constants.T_VAR = 348;\nPHP.Constants.T_UNSET = 349;\nPHP.Constants.T_ISSET = 350;\nPHP.Constants.T_EMPTY = 351;\nPHP.Constants.T_HALT_COMPILER = 352;\nPHP.Constants.T_CLASS = 353;\nPHP.Constants.T_TRAIT = 382;\nPHP.Constants.T_INTERFACE = 354;\nPHP.Constants.T_EXTENDS = 355;\nPHP.Constants.T_IMPLEMENTS = 356;\nPHP.Constants.T_OBJECT_OPERATOR = 357;\nPHP.Constants.T_DOUBLE_ARROW = 358;\nPHP.Constants.T_LIST = 359;\nPHP.Constants.T_ARRAY = 360; //PHP.Constants.T_CALLABLE = ;\n\nPHP.Constants.T_CLASS_C = 361;\nPHP.Constants.T_TRAIT_C = 381;\nPHP.Constants.T_METHOD_C = 362;\nPHP.Constants.T_FUNC_C = 363;\nPHP.Constants.T_LINE = 364;\nPHP.Constants.T_FILE = 365;\nPHP.Constants.T_COMMENT = 366;\nPHP.Constants.T_DOC_COMMENT = 367;\nPHP.Constants.T_OPEN_TAG = 368;\nPHP.Constants.T_OPEN_TAG_WITH_ECHO = 369;\nPHP.Constants.T_CLOSE_TAG = 370;\nPHP.Constants.T_WHITESPACE = 371;\nPHP.Constants.T_START_HEREDOC = 372;\nPHP.Constants.T_END_HEREDOC = 373;\nPHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES = 374;\nPHP.Constants.T_CURLY_OPEN = 375;\nPHP.Constants.T_PAAMAYIM_NEKUDOTAYIM = 376;\nPHP.Constants.T_DOUBLE_COLON = 376;\nPHP.Constants.T_NAMESPACE = 377;\nPHP.Constants.T_NS_C = 378;\nPHP.Constants.T_DIR = 379;\nPHP.Constants.T_NS_SEPARATOR = 380;\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 28.6.2012 \n * @website http://hertzen.com\n */\n\nPHP.Modules.prototype.token_get_all = function (code) {\n  var VARIABLE = PHP.VM.Variable.prototype,\n      COMPILER = PHP.Compiler.prototype;\n\n  if (!this[COMPILER.SIGNATURE](arguments, \"token_get_all\", 1, [[VARIABLE.STRING, VARIABLE.NULL]])) {\n    return new PHP.VM.Variable(null);\n  }\n\n  switch (code[VARIABLE.TYPE]) {\n    case VARIABLE.BOOL:\n      if (code[COMPILER.VARIABLE_VALUE] === true) {\n        return PHP.VM.Array.fromObject.call(this, PHP.Lexer(\"1\"));\n      } else {\n        return PHP.VM.Array.fromObject.call(this, PHP.Lexer(null));\n      }\n\n      break;\n\n    case VARIABLE.STRING:\n    case VARIABLE.NULL:\n      return PHP.VM.Array.fromObject.call(this, PHP.Lexer(code[COMPILER.VARIABLE_VALUE]));\n      break;\n\n    default:\n      return PHP.VM.Array.fromObject.call(this, PHP.Lexer(code[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE]));\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.6.2012 \n * @website http://hertzen.com\n */\n\n/* token_name — Get the symbolic name of a given PHP token\n * string token_name ( int $token )\n */\n\n\nPHP.Modules.prototype.token_name = function (token) {\n  if (!this[PHP.Compiler.prototype.SIGNATURE](arguments, \"token_name\", 1, [PHP.VM.Variable.prototype.INT])) {\n    return new PHP.VM.Variable(null);\n  } // TODO invert this for faster performance\n\n\n  var constants = {};\n  constants.T_INCLUDE = 262;\n  constants.T_INCLUDE_ONCE = 261;\n  constants.T_EVAL = 260;\n  constants.T_REQUIRE = 259;\n  constants.T_REQUIRE_ONCE = 258;\n  constants.T_LOGICAL_OR = 263;\n  constants.T_LOGICAL_XOR = 264;\n  constants.T_LOGICAL_AND = 265;\n  constants.T_PRINT = 266;\n  constants.T_PLUS_EQUAL = 277;\n  constants.T_MINUS_EQUAL = 276;\n  constants.T_MUL_EQUAL = 275;\n  constants.T_DIV_EQUAL = 274;\n  constants.T_CONCAT_EQUAL = 273;\n  constants.T_MOD_EQUAL = 272;\n  constants.T_AND_EQUAL = 271;\n  constants.T_OR_EQUAL = 270;\n  constants.T_XOR_EQUAL = 269;\n  constants.T_SL_EQUAL = 268;\n  constants.T_SR_EQUAL = 267;\n  constants.T_BOOLEAN_OR = 278;\n  constants.T_BOOLEAN_AND = 279;\n  constants.T_IS_EQUAL = 283;\n  constants.T_IS_NOT_EQUAL = 282;\n  constants.T_IS_IDENTICAL = 281;\n  constants.T_IS_NOT_IDENTICAL = 280;\n  constants.T_IS_SMALLER_OR_EQUAL = 285;\n  constants.T_IS_GREATER_OR_EQUAL = 284;\n  constants.T_SL = 287;\n  constants.T_SR = 286;\n  constants.T_INSTANCEOF = 288;\n  constants.T_INC = 297;\n  constants.T_DEC = 296;\n  constants.T_INT_CAST = 295;\n  constants.T_DOUBLE_CAST = 294;\n  constants.T_STRING_CAST = 293;\n  constants.T_ARRAY_CAST = 292;\n  constants.T_OBJECT_CAST = 291;\n  constants.T_BOOL_CAST = 290;\n  constants.T_UNSET_CAST = 289;\n  constants.T_NEW = 299;\n  constants.T_CLONE = 298;\n  constants.T_EXIT = 300;\n  constants.T_IF = 301;\n  constants.T_ELSEIF = 302;\n  constants.T_ELSE = 303;\n  constants.T_ENDIF = 304;\n  constants.T_LNUMBER = 305;\n  constants.T_DNUMBER = 306;\n  constants.T_STRING = 307;\n  constants.T_STRING_VARNAME = 308;\n  constants.T_VARIABLE = 309;\n  constants.T_NUM_STRING = 310;\n  constants.T_INLINE_HTML = 311;\n  constants.T_CHARACTER = 312;\n  constants.T_BAD_CHARACTER = 313;\n  constants.T_ENCAPSED_AND_WHITESPACE = 314;\n  constants.T_CONSTANT_ENCAPSED_STRING = 315;\n  constants.T_ECHO = 316;\n  constants.T_DO = 317;\n  constants.T_WHILE = 318;\n  constants.T_ENDWHILE = 319;\n  constants.T_FOR = 320;\n  constants.T_ENDFOR = 321;\n  constants.T_FOREACH = 322;\n  constants.T_ENDFOREACH = 323;\n  constants.T_DECLARE = 324;\n  constants.T_ENDDECLARE = 325;\n  constants.T_AS = 326;\n  constants.T_SWITCH = 327;\n  constants.T_ENDSWITCH = 328;\n  constants.T_CASE = 329;\n  constants.T_DEFAULT = 330;\n  constants.T_BREAK = 331;\n  constants.T_CONTINUE = 332;\n  constants.T_GOTO = 333;\n  constants.T_FUNCTION = 334;\n  constants.T_CONST = 335;\n  constants.T_RETURN = 336;\n  constants.T_TRY = 337;\n  constants.T_CATCH = 338;\n  constants.T_THROW = 339;\n  constants.T_USE = 340; //constants.T_INSTEADOF = ;\n\n  constants.T_GLOBAL = 341;\n  constants.T_STATIC = 347;\n  constants.T_ABSTRACT = 346;\n  constants.T_FINAL = 345;\n  constants.T_PRIVATE = 344;\n  constants.T_PROTECTED = 343;\n  constants.T_PUBLIC = 342;\n  constants.T_VAR = 348;\n  constants.T_UNSET = 349;\n  constants.T_ISSET = 350;\n  constants.T_EMPTY = 351;\n  constants.T_HALT_COMPILER = 352;\n  constants.T_CLASS = 353; //constants.T_TRAIT = ;\n\n  constants.T_INTERFACE = 354;\n  constants.T_EXTENDS = 355;\n  constants.T_IMPLEMENTS = 356;\n  constants.T_OBJECT_OPERATOR = 357;\n  constants.T_DOUBLE_ARROW = 358;\n  constants.T_LIST = 359;\n  constants.T_ARRAY = 360; //constants.T_CALLABLE = ;\n\n  constants.T_CLASS_C = 361; //constants.T_TRAIT_C = ;\n\n  constants.T_METHOD_C = 362;\n  constants.T_FUNC_C = 363;\n  constants.T_LINE = 364;\n  constants.T_FILE = 365;\n  constants.T_COMMENT = 366;\n  constants.T_DOC_COMMENT = 367;\n  constants.T_OPEN_TAG = 368;\n  constants.T_OPEN_TAG_WITH_ECHO = 369;\n  constants.T_CLOSE_TAG = 370;\n  constants.T_WHITESPACE = 371;\n  constants.T_START_HEREDOC = 372;\n  constants.T_END_HEREDOC = 373;\n  constants.T_DOLLAR_OPEN_CURLY_BRACES = 374;\n  constants.T_CURLY_OPEN = 375;\n  constants.T_DOUBLE_COLON = 376;\n  constants.T_PAAMAYIM_NEKUDOTAYIM = 376;\n  constants.T_NAMESPACE = 377;\n  constants.T_NS_C = 378;\n  constants.T_DIR = 379;\n  constants.T_NS_SEPARATOR = 380;\n\n  for (var key in constants) {\n    if (constants[key] === token[PHP.Compiler.prototype.VARIABLE_VALUE]) {\n      return new PHP.VM.Variable(key);\n    }\n  }\n\n  return new PHP.VM.Variable(\"UNKNOWN\");\n};\n/* Automatically built from PHP version: 5.4.0-ZS5.6.0 */\n\n\nPHP.Constants.CONNECTION_ABORTED = 1;\nPHP.Constants.CONNECTION_NORMAL = 0;\nPHP.Constants.CONNECTION_TIMEOUT = 2;\nPHP.Constants.INI_USER = 1;\nPHP.Constants.INI_PERDIR = 2;\nPHP.Constants.INI_SYSTEM = 4;\nPHP.Constants.INI_ALL = 7;\nPHP.Constants.INI_SCANNER_NORMAL = 0;\nPHP.Constants.INI_SCANNER_RAW = 1;\nPHP.Constants.PHP_URL_SCHEME = 0;\nPHP.Constants.PHP_URL_HOST = 1;\nPHP.Constants.PHP_URL_PORT = 2;\nPHP.Constants.PHP_URL_USER = 3;\nPHP.Constants.PHP_URL_PASS = 4;\nPHP.Constants.PHP_URL_PATH = 5;\nPHP.Constants.PHP_URL_QUERY = 6;\nPHP.Constants.PHP_URL_FRAGMENT = 7;\nPHP.Constants.PHP_QUERY_RFC1738 = 1;\nPHP.Constants.PHP_QUERY_RFC3986 = 2;\nPHP.Constants.M_E = 2.718281828459;\nPHP.Constants.M_LOG2E = 1.442695040889;\nPHP.Constants.M_LOG10E = 0.43429448190325;\nPHP.Constants.M_LN2 = 0.69314718055995;\nPHP.Constants.M_LN10 = 2.302585092994;\nPHP.Constants.M_PI = 3.1415926535898;\nPHP.Constants.M_PI_2 = 1.5707963267949;\nPHP.Constants.M_PI_4 = 0.78539816339745;\nPHP.Constants.M_1_PI = 0.31830988618379;\nPHP.Constants.M_2_PI = 0.63661977236758;\nPHP.Constants.M_SQRTPI = 1.7724538509055;\nPHP.Constants.M_2_SQRTPI = 1.1283791670955;\nPHP.Constants.M_LNPI = 1.1447298858494;\nPHP.Constants.M_EULER = 0.57721566490153;\nPHP.Constants.M_SQRT2 = 1.4142135623731;\nPHP.Constants.M_SQRT1_2 = 0.70710678118655;\nPHP.Constants.M_SQRT3 = 1.7320508075689;\nPHP.Constants.INF = \"INF\";\nPHP.Constants.NAN = \"NAN\";\nPHP.Constants.PHP_ROUND_HALF_UP = 1;\nPHP.Constants.PHP_ROUND_HALF_DOWN = 2;\nPHP.Constants.PHP_ROUND_HALF_EVEN = 3;\nPHP.Constants.PHP_ROUND_HALF_ODD = 4;\nPHP.Constants.INFO_GENERAL = 1;\nPHP.Constants.INFO_CREDITS = 2;\nPHP.Constants.INFO_CONFIGURATION = 4;\nPHP.Constants.INFO_MODULES = 8;\nPHP.Constants.INFO_ENVIRONMENT = 16;\nPHP.Constants.INFO_VARIABLES = 32;\nPHP.Constants.INFO_LICENSE = 64;\nPHP.Constants.INFO_ALL = -1;\nPHP.Constants.CREDITS_GROUP = 1;\nPHP.Constants.CREDITS_GENERAL = 2;\nPHP.Constants.CREDITS_SAPI = 4;\nPHP.Constants.CREDITS_MODULES = 8;\nPHP.Constants.CREDITS_DOCS = 16;\nPHP.Constants.CREDITS_FULLPAGE = 32;\nPHP.Constants.CREDITS_QA = 64;\nPHP.Constants.CREDITS_ALL = -1;\nPHP.Constants.HTML_SPECIALCHARS = 0;\nPHP.Constants.HTML_ENTITIES = 1;\nPHP.Constants.ENT_COMPAT = 2;\nPHP.Constants.ENT_QUOTES = 3;\nPHP.Constants.ENT_NOQUOTES = 0;\nPHP.Constants.ENT_IGNORE = 4;\nPHP.Constants.ENT_SUBSTITUTE = 8;\nPHP.Constants.ENT_DISALLOWED = 128;\nPHP.Constants.ENT_HTML401 = 0;\nPHP.Constants.ENT_XML1 = 16;\nPHP.Constants.ENT_XHTML = 32;\nPHP.Constants.ENT_HTML5 = 48;\nPHP.Constants.STR_PAD_LEFT = 0;\nPHP.Constants.STR_PAD_RIGHT = 1;\nPHP.Constants.STR_PAD_BOTH = 2;\nPHP.Constants.PATHINFO_DIRNAME = 1;\nPHP.Constants.PATHINFO_BASENAME = 2;\nPHP.Constants.PATHINFO_EXTENSION = 4;\nPHP.Constants.PATHINFO_FILENAME = 8;\nPHP.Constants.CHAR_MAX = 127;\nPHP.Constants.LC_CTYPE = 2;\nPHP.Constants.LC_NUMERIC = 4;\nPHP.Constants.LC_TIME = 5;\nPHP.Constants.LC_COLLATE = 1;\nPHP.Constants.LC_MONETARY = 3;\nPHP.Constants.LC_ALL = 0;\nPHP.Constants.SEEK_SET = 0;\nPHP.Constants.SEEK_CUR = 1;\nPHP.Constants.SEEK_END = 2;\nPHP.Constants.LOCK_SH = 1;\nPHP.Constants.LOCK_EX = 2;\nPHP.Constants.LOCK_UN = 3;\nPHP.Constants.LOCK_NB = 4;\nPHP.Constants.STREAM_NOTIFY_CONNECT = 2;\nPHP.Constants.STREAM_NOTIFY_AUTH_REQUIRED = 3;\nPHP.Constants.STREAM_NOTIFY_AUTH_RESULT = 10;\nPHP.Constants.STREAM_NOTIFY_MIME_TYPE_IS = 4;\nPHP.Constants.STREAM_NOTIFY_FILE_SIZE_IS = 5;\nPHP.Constants.STREAM_NOTIFY_REDIRECTED = 6;\nPHP.Constants.STREAM_NOTIFY_PROGRESS = 7;\nPHP.Constants.STREAM_NOTIFY_FAILURE = 9;\nPHP.Constants.STREAM_NOTIFY_COMPLETED = 8;\nPHP.Constants.STREAM_NOTIFY_RESOLVE = 1;\nPHP.Constants.STREAM_NOTIFY_SEVERITY_INFO = 0;\nPHP.Constants.STREAM_NOTIFY_SEVERITY_WARN = 1;\nPHP.Constants.STREAM_NOTIFY_SEVERITY_ERR = 2;\nPHP.Constants.STREAM_FILTER_READ = 1;\nPHP.Constants.STREAM_FILTER_WRITE = 2;\nPHP.Constants.STREAM_FILTER_ALL = 3;\nPHP.Constants.STREAM_CLIENT_PERSISTENT = 1;\nPHP.Constants.STREAM_CLIENT_ASYNC_CONNECT = 2;\nPHP.Constants.STREAM_CLIENT_CONNECT = 4;\nPHP.Constants.STREAM_CRYPTO_METHOD_SSLv2_CLIENT = 0;\nPHP.Constants.STREAM_CRYPTO_METHOD_SSLv3_CLIENT = 1;\nPHP.Constants.STREAM_CRYPTO_METHOD_SSLv23_CLIENT = 2;\nPHP.Constants.STREAM_CRYPTO_METHOD_TLS_CLIENT = 3;\nPHP.Constants.STREAM_CRYPTO_METHOD_SSLv2_SERVER = 4;\nPHP.Constants.STREAM_CRYPTO_METHOD_SSLv3_SERVER = 5;\nPHP.Constants.STREAM_CRYPTO_METHOD_SSLv23_SERVER = 6;\nPHP.Constants.STREAM_CRYPTO_METHOD_TLS_SERVER = 7;\nPHP.Constants.STREAM_SHUT_RD = 0;\nPHP.Constants.STREAM_SHUT_WR = 1;\nPHP.Constants.STREAM_SHUT_RDWR = 2;\nPHP.Constants.STREAM_PF_INET = 2;\nPHP.Constants.STREAM_PF_UNIX = 1;\nPHP.Constants.STREAM_IPPROTO_IP = 0;\nPHP.Constants.STREAM_IPPROTO_TCP = 6;\nPHP.Constants.STREAM_IPPROTO_UDP = 17;\nPHP.Constants.STREAM_IPPROTO_ICMP = 1;\nPHP.Constants.STREAM_IPPROTO_RAW = 255;\nPHP.Constants.STREAM_SOCK_STREAM = 1;\nPHP.Constants.STREAM_SOCK_DGRAM = 2;\nPHP.Constants.STREAM_SOCK_RAW = 3;\nPHP.Constants.STREAM_SOCK_SEQPACKET = 5;\nPHP.Constants.STREAM_SOCK_RDM = 4;\nPHP.Constants.STREAM_PEEK = 2;\nPHP.Constants.STREAM_OOB = 1;\nPHP.Constants.STREAM_SERVER_BIND = 4;\nPHP.Constants.STREAM_SERVER_LISTEN = 8;\nPHP.Constants.FILE_USE_INCLUDE_PATH = 1;\nPHP.Constants.FILE_IGNORE_NEW_LINES = 2;\nPHP.Constants.FILE_SKIP_EMPTY_LINES = 4;\nPHP.Constants.FILE_APPEND = 8;\nPHP.Constants.FILE_NO_DEFAULT_CONTEXT = 16;\nPHP.Constants.FILE_TEXT = 0;\nPHP.Constants.FILE_BINARY = 0;\nPHP.Constants.FNM_NOESCAPE = 1;\nPHP.Constants.FNM_PATHNAME = 2;\nPHP.Constants.FNM_PERIOD = 4;\nPHP.Constants.FNM_CASEFOLD = 16;\nPHP.Constants.PSFS_PASS_ON = 2;\nPHP.Constants.PSFS_FEED_ME = 1;\nPHP.Constants.PSFS_ERR_FATAL = 0;\nPHP.Constants.PSFS_FLAG_NORMAL = 0;\nPHP.Constants.PSFS_FLAG_FLUSH_INC = 1;\nPHP.Constants.PSFS_FLAG_FLUSH_CLOSE = 2;\nPHP.Constants.CRYPT_SALT_LENGTH = 123;\nPHP.Constants.CRYPT_STD_DES = 1;\nPHP.Constants.CRYPT_EXT_DES = 1;\nPHP.Constants.CRYPT_MD5 = 1;\nPHP.Constants.CRYPT_BLOWFISH = 1;\nPHP.Constants.CRYPT_SHA256 = 1;\nPHP.Constants.CRYPT_SHA512 = 1;\nPHP.Constants.DIRECTORY_SEPARATOR = \"\\\\\";\nPHP.Constants.PATH_SEPARATOR = \";\";\nPHP.Constants.SCANDIR_SORT_ASCENDING = 0;\nPHP.Constants.SCANDIR_SORT_DESCENDING = 1;\nPHP.Constants.SCANDIR_SORT_NONE = 2;\nPHP.Constants.GLOB_BRACE = 128;\nPHP.Constants.GLOB_MARK = 8;\nPHP.Constants.GLOB_NOSORT = 32;\nPHP.Constants.GLOB_NOCHECK = 16;\nPHP.Constants.GLOB_NOESCAPE = 4096;\nPHP.Constants.GLOB_ERR = 4;\nPHP.Constants.GLOB_ONLYDIR = 1073741824;\nPHP.Constants.GLOB_AVAILABLE_FLAGS = 1073746108;\nPHP.Constants.LOG_EMERG = 1;\nPHP.Constants.LOG_ALERT = 1;\nPHP.Constants.LOG_CRIT = 1;\nPHP.Constants.LOG_ERR = 4;\nPHP.Constants.LOG_WARNING = 5;\nPHP.Constants.LOG_NOTICE = 6;\nPHP.Constants.LOG_INFO = 6;\nPHP.Constants.LOG_DEBUG = 6;\nPHP.Constants.LOG_KERN = 0;\nPHP.Constants.LOG_USER = 8;\nPHP.Constants.LOG_MAIL = 16;\nPHP.Constants.LOG_DAEMON = 24;\nPHP.Constants.LOG_AUTH = 32;\nPHP.Constants.LOG_SYSLOG = 40;\nPHP.Constants.LOG_LPR = 48;\nPHP.Constants.LOG_NEWS = 56;\nPHP.Constants.LOG_UUCP = 64;\nPHP.Constants.LOG_CRON = 72;\nPHP.Constants.LOG_AUTHPRIV = 80;\nPHP.Constants.LOG_PID = 1;\nPHP.Constants.LOG_CONS = 2;\nPHP.Constants.LOG_ODELAY = 4;\nPHP.Constants.LOG_NDELAY = 8;\nPHP.Constants.LOG_NOWAIT = 16;\nPHP.Constants.LOG_PERROR = 32;\nPHP.Constants.EXTR_OVERWRITE = 0;\nPHP.Constants.EXTR_SKIP = 1;\nPHP.Constants.EXTR_PREFIX_SAME = 2;\nPHP.Constants.EXTR_PREFIX_ALL = 3;\nPHP.Constants.EXTR_PREFIX_INVALID = 4;\nPHP.Constants.EXTR_PREFIX_IF_EXISTS = 5;\nPHP.Constants.EXTR_IF_EXISTS = 6;\nPHP.Constants.EXTR_REFS = 256;\nPHP.Constants.SORT_ASC = 4;\nPHP.Constants.SORT_DESC = 3;\nPHP.Constants.SORT_REGULAR = 0;\nPHP.Constants.SORT_NUMERIC = 1;\nPHP.Constants.SORT_STRING = 2;\nPHP.Constants.SORT_LOCALE_STRING = 5;\nPHP.Constants.SORT_NATURAL = 6;\nPHP.Constants.SORT_FLAG_CASE = 8;\nPHP.Constants.CASE_LOWER = 0;\nPHP.Constants.CASE_UPPER = 1;\nPHP.Constants.COUNT_NORMAL = 0;\nPHP.Constants.COUNT_RECURSIVE = 1;\nPHP.Constants.ASSERT_ACTIVE = 1;\nPHP.Constants.ASSERT_CALLBACK = 2;\nPHP.Constants.ASSERT_BAIL = 3;\nPHP.Constants.ASSERT_WARNING = 4;\nPHP.Constants.ASSERT_QUIET_EVAL = 5;\nPHP.Constants.STREAM_USE_PATH = 1;\nPHP.Constants.STREAM_IGNORE_URL = 2;\nPHP.Constants.STREAM_REPORT_ERRORS = 8;\nPHP.Constants.STREAM_MUST_SEEK = 16;\nPHP.Constants.STREAM_URL_STAT_LINK = 1;\nPHP.Constants.STREAM_URL_STAT_QUIET = 2;\nPHP.Constants.STREAM_MKDIR_RECURSIVE = 1;\nPHP.Constants.STREAM_IS_URL = 1;\nPHP.Constants.STREAM_OPTION_BLOCKING = 1;\nPHP.Constants.STREAM_OPTION_READ_TIMEOUT = 4;\nPHP.Constants.STREAM_OPTION_READ_BUFFER = 2;\nPHP.Constants.STREAM_OPTION_WRITE_BUFFER = 3;\nPHP.Constants.STREAM_BUFFER_NONE = 0;\nPHP.Constants.STREAM_BUFFER_LINE = 1;\nPHP.Constants.STREAM_BUFFER_FULL = 2;\nPHP.Constants.STREAM_CAST_AS_STREAM = 0;\nPHP.Constants.STREAM_CAST_FOR_SELECT = 3;\nPHP.Constants.STREAM_META_TOUCH = 1;\nPHP.Constants.STREAM_META_OWNER = 3;\nPHP.Constants.STREAM_META_OWNER_NAME = 2;\nPHP.Constants.STREAM_META_GROUP = 5;\nPHP.Constants.STREAM_META_GROUP_NAME = 4;\nPHP.Constants.STREAM_META_ACCESS = 6;\nPHP.Constants.IMAGETYPE_GIF = 1;\nPHP.Constants.IMAGETYPE_JPEG = 2;\nPHP.Constants.IMAGETYPE_PNG = 3;\nPHP.Constants.IMAGETYPE_SWF = 4;\nPHP.Constants.IMAGETYPE_PSD = 5;\nPHP.Constants.IMAGETYPE_BMP = 6;\nPHP.Constants.IMAGETYPE_TIFF_II = 7;\nPHP.Constants.IMAGETYPE_TIFF_MM = 8;\nPHP.Constants.IMAGETYPE_JPC = 9;\nPHP.Constants.IMAGETYPE_JP2 = 10;\nPHP.Constants.IMAGETYPE_JPX = 11;\nPHP.Constants.IMAGETYPE_JB2 = 12;\nPHP.Constants.IMAGETYPE_SWC = 13;\nPHP.Constants.IMAGETYPE_IFF = 14;\nPHP.Constants.IMAGETYPE_WBMP = 15;\nPHP.Constants.IMAGETYPE_JPEG2000 = 9;\nPHP.Constants.IMAGETYPE_XBM = 16;\nPHP.Constants.IMAGETYPE_ICO = 17;\nPHP.Constants.IMAGETYPE_UNKNOWN = 0;\nPHP.Constants.IMAGETYPE_COUNT = 18;\nPHP.Constants.DNS_A = 1;\nPHP.Constants.DNS_NS = 2;\nPHP.Constants.DNS_CNAME = 16;\nPHP.Constants.DNS_SOA = 32;\nPHP.Constants.DNS_PTR = 2048;\nPHP.Constants.DNS_HINFO = 4096;\nPHP.Constants.DNS_MX = 16384;\nPHP.Constants.DNS_TXT = 32768;\nPHP.Constants.DNS_SRV = 33554432;\nPHP.Constants.DNS_NAPTR = 67108864;\nPHP.Constants.DNS_AAAA = 134217728;\nPHP.Constants.DNS_A6 = 16777216;\nPHP.Constants.DNS_ANY = 268435456;\nPHP.Constants.DNS_ALL = 251713587;\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 6.7.2012 \n * @website http://hertzen.com\n */\n\nPHP.Modules.prototype.$empty = function (arg) {\n  var len = arguments.length,\n      i = -1,\n      COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype; // http://www.php.net/manual/en/types.comparisons.php\n\n  if (arg instanceof PHP.VM.Variable) {\n    var tmp = arg[COMPILER.VARIABLE_VALUE];\n    return new PHP.VM.Variable(arg[VARIABLE.TYPE] === VARIABLE.NULL || tmp === \"\" || tmp == 0 || tmp === false);\n  } else {\n    return new PHP.VM.Variable(arg);\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.gettype = function (arg) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  var tmp = arg[COMPILER.VARIABLE_VALUE],\n      // trigger get\n  type = \"unknown type\";\n\n  switch (arg[VARIABLE.TYPE]) {\n    case VARIABLE.BOOL:\n      type = \"boolean\";\n      break;\n\n    case VARIABLE.INT:\n      type = \"integer\";\n      break;\n\n    case VARIABLE.FLOAT:\n      type = \"double\";\n      break;\n\n    case VARIABLE.STRING:\n      type = \"string\";\n      break;\n\n    case VARIABLE.ARRAY:\n      type = \"array\";\n      break;\n\n    case VARIABLE.OBJECT:\n      type = \"object\";\n      break;\n\n    case VARIABLE.RESOURCE:\n      type = \"resource\";\n      break;\n\n    case VARIABLE.NULL:\n      type = \"NULL\";\n      break;\n  }\n\n  return new PHP.VM.Variable(type);\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 4.7.2012\n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_callable = function (callback) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  if (callback[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n    var Class = callback[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, COMPILER.ARRAY_GET, 0)[COMPILER.VARIABLE_VALUE],\n        methodName = callback[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](this, COMPILER.ARRAY_GET, 1)[COMPILER.VARIABLE_VALUE];\n    return new PHP.VM.Variable(typeof Class[PHP.VM.Class.METHOD + methodName.toLowerCase()] === \"function\");\n  }\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 13.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_float = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  return new PHP.VM.Variable(variable[VARIABLE.TYPE] === VARIABLE.FLOAT);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_null = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  return new PHP.VM.Variable(variable[VARIABLE.TYPE] === VARIABLE.NULL);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 13.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.is_string = function (variable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  return new PHP.VM.Variable(variable[VARIABLE.TYPE] === VARIABLE.STRING);\n};\n\nPHP.Modules.prototype.$isset = function () {\n  var len = arguments.length,\n      i = -1,\n      arg,\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  while (++i < len) {\n    arg = arguments[i]; // http://www.php.net/manual/en/types.comparisons.php\n\n    if (arg instanceof PHP.VM.Variable) {\n      if (arg[VARIABLE.TYPE] === VARIABLE.NULL) {\n        return new PHP.VM.Variable(false);\n      }\n    } else if (arg === false) {\n      return new PHP.VM.Variable(false);\n    }\n  }\n\n  return new PHP.VM.Variable(true);\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 26.6.2012\n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.print_r = function () {\n  var str = \"\",\n      indent = 0,\n      COMPILER = PHP.Compiler.prototype,\n      PRIVATE = PHP.VM.Class.PRIVATE,\n      PROTECTED = PHP.VM.Class.PROTECTED,\n      PROPERTY = PHP.VM.Class.PROPERTY,\n      VAR = PHP.VM.Variable.prototype;\n\n  if (this[COMPILER.DISPLAY_HANDLER] === true) {\n    this[COMPILER.ERROR](\"print_r(): Cannot use output buffering in output buffering display handlers\", PHP.Constants.E_ERROR, true);\n  }\n\n  var $dump = function $dump(argument, indent) {\n    var str = \"\",\n        value = argument[COMPILER.VARIABLE_VALUE],\n        ARG_TYPE = argument[VAR.TYPE]; // trigger get for undefined\n\n    if (ARG_TYPE === VAR.ARRAY) {\n      str += \"Array\\n\";\n      str += $INDENT(indent) + \"(\";\n      var values = value[PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE];\n      var keys = value[PROPERTY + PHP.VM.Array.prototype.KEYS][COMPILER.VARIABLE_VALUE];\n      str += \"\\n\";\n      keys.forEach(function (key, index) {\n        str += $INDENT(indent + 4) + \"[\";\n\n        if (key instanceof PHP.VM.Variable) {\n          str += key[COMPILER.VARIABLE_VALUE]; // constants\n        } else {\n          str += key;\n        }\n\n        str += \"] => \";\n        str += $dump(values[index], indent + 8) + \"\\n\";\n      }, this);\n      str += $INDENT(indent) + \")\\n\";\n    } else if (ARG_TYPE === VAR.OBJECT || argument instanceof PHP.VM.ClassPrototype) {\n      var classObj;\n\n      if (argument instanceof PHP.VM.Variable) {\n        classObj = value;\n      } else {\n        classObj = argument;\n      }\n\n      str += classObj[COMPILER.CLASS_NAME] + \" Object\\n\";\n      str += $INDENT(indent) + \"(\\n\";\n      var added = false,\n          definedItems = [],\n          tmp = \"\"; // search whole prototype chain\n\n      for (var item in classObj) {\n        if (item.substring(0, PROPERTY.length) === PROPERTY) {\n          if (classObj.hasOwnProperty(item)) {\n            definedItems.push(item);\n            str += $INDENT(indent + 4) + '[' + item.substring(PROPERTY.length);\n            str += '] => ';\n            str += $dump(classObj[item], indent + 8);\n            str += \"\\n\";\n          } //  props.push( item );\n\n\n          var parent = classObj; // search for overwritten private members\n\n          do {\n            if (parent.hasOwnProperty(item)) {\n              if ((Object.getPrototypeOf(parent)[PHP.VM.Class.PROPERTY_TYPE + item.substring(PROPERTY.length)] & PRIVATE) === PRIVATE) {\n                str += $INDENT(indent + 4) + '[' + item.substring(PROPERTY.length) + ':' + Object.getPrototypeOf(parent)[COMPILER.CLASS_NAME] + ':private] => ';\n                str += $dump(parent[item], indent + 8);\n                str += \"\\n\";\n              } else if ((Object.getPrototypeOf(parent)[PHP.VM.Class.PROPERTY_TYPE + item.substring(PROPERTY.length)] & PROTECTED) === PROTECTED && definedItems.indexOf(item) === -1) {\n                str += $INDENT(indent + 4) + '[' + item.substring(PROPERTY.length) + ':' + Object.getPrototypeOf(parent)[COMPILER.CLASS_NAME] + ':protected] => ';\n                str += $dump(parent[item], indent + 8);\n                str += \"\\n\";\n                definedItems.push(item);\n              } else if (definedItems.indexOf(item) === -1) {\n                str += $INDENT(indent + 4) + '[' + item.substring(PROPERTY.length) + '] => ';\n                str += $dump(parent[item], indent + 8);\n                str += \"\\n\";\n                definedItems.push(item);\n              }\n            }\n\n            parent = Object.getPrototypeOf(parent);\n          } while (parent instanceof PHP.VM.ClassPrototype);\n        }\n      }\n\n      str += tmp;\n      str += $INDENT(indent) + \")\\n\";\n    } else if (ARG_TYPE === VAR.NULL) {\n      str += $INDENT(indent) + \"NULL\";\n    } else if (ARG_TYPE === VAR.STRING) {\n      str += value;\n    } else if (ARG_TYPE === VAR.INT) {\n      str += value;\n    }\n\n    return str;\n  },\n      $INDENT = function $INDENT(num) {\n    var str = \"\",\n        i;\n\n    for (i = 0; i < num; i++) {\n      str += \" \";\n    }\n\n    return str;\n  };\n\n  PHP.Utils.$A(arguments).forEach(function (argument) {\n    str += $dump(argument, 0);\n  }, this);\n  this.echo(str);\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 22.7.2012\n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.serialize = function (valueObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      serialize = \"serialize\",\n      __sleep = \"__sleep\",\n      VARIABLE = PHP.VM.Variable.prototype;\n\n  var item,\n      str = \"\",\n      func = function (item) {\n    var val = item[COMPILER.VARIABLE_VALUE],\n        str = \"\";\n\n    switch (item[VARIABLE.TYPE]) {\n      case VARIABLE.NULL:\n        str += \"N;\";\n        break;\n\n      case VARIABLE.STRING:\n        str += val.length + \":{\" + val + \"}\";\n        break;\n\n      default:\n    }\n\n    return str;\n  }.bind(this),\n      value = valueObj[COMPILER.VARIABLE_VALUE]; // serializable interface\n\n\n  if (value[PHP.VM.Class.METHOD + serialize] !== undefined) {\n    item = value[COMPILER.METHOD_CALL](this, serialize);\n\n    if (item[VARIABLE.TYPE] !== VARIABLE.NULL && item[VARIABLE.TYPE] !== VARIABLE.STRING) {\n      this.ENV[COMPILER.ERROR](value[COMPILER.CLASS_NAME] + \"::\" + serialize + \"() must return a string or NULL\", PHP.Constants.E_ERROR, true);\n      return new PHP.VM.Variable();\n    }\n  } else {\n    item = value;\n\n    if (value[PHP.VM.Class.METHOD + __sleep] !== undefined) {\n      item = value[COMPILER.METHOD_CALL](this, __sleep);\n\n      if (item[VARIABLE.TYPE] !== VARIABLE.ARRAY) {\n        this.ENV[COMPILER.ERROR](value[COMPILER.CLASS_NAME] + \"::\" + serialize + \"() must return a string or NULL\", PHP.Constants.E_ERROR, true);\n        return new PHP.VM.Variable();\n      }\n\n      item[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE].forEach(function (member) {\n        if (value[PHP.VM.Class.PROPERTY + member[COMPILER.VARIABLE_VALUE]] === undefined) {\n          this.ENV[COMPILER.ERROR](serialize + '(): \"' + member[COMPILER.VARIABLE_VALUE] + '\" returned as member variable from ' + __sleep + \"() but does not exist\", PHP.Constants.E_NOTICE, true);\n        }\n      }, this);\n      str += \"O:\" + value[COMPILER.CLASS_NAME].length + ':\"' + value[COMPILER.CLASS_NAME] + '\":';\n    }\n  }\n\n  if (item instanceof PHP.VM.Variable) {\n    if (item[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n      var arr = item[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE];\n      str += arr.length + \":{\";\n      arr.forEach(function (arrItem) {\n        if ((value[PHP.VM.Class.PROPERTY_TYPE + arrItem[COMPILER.VARIABLE_VALUE]] & PHP.VM.Class.PRIVATE) === PHP.VM.Class.PRIVATE) {\n          str += \"s:\" + (2 + value[COMPILER.CLASS_NAME].length + arrItem[COMPILER.VARIABLE_VALUE].length) + \":\";\n          str += '\"\\\\0' + value[COMPILER.CLASS_NAME] + \"\\\\0\" + arrItem[COMPILER.VARIABLE_VALUE] + '\";';\n        } else if ((value[PHP.VM.Class.PROPERTY_TYPE + arrItem[COMPILER.VARIABLE_VALUE]] & PHP.VM.Class.PROTECTED) === PHP.VM.Class.PROTECTED) {\n          str += \"s:\" + (3 + arrItem[COMPILER.VARIABLE_VALUE].length) + \":\";\n          str += '\"\\\\0*\\\\0' + arrItem[COMPILER.VARIABLE_VALUE] + '\";';\n        } else {\n          str += \"s:\" + arrItem[COMPILER.VARIABLE_VALUE].length + \":\";\n          str += '\"' + arrItem[COMPILER.VARIABLE_VALUE] + '\";';\n        }\n\n        var tmp = value[PHP.VM.Class.PROPERTY + arrItem[COMPILER.VARIABLE_VALUE]];\n\n        if (tmp !== undefined) {\n          tmp = tmp[COMPILER.VARIABLE_VALUE];\n          str += \"s:\" + tmp.length + ':\"' + tmp + '\";';\n        } else {\n          str += \"N;\";\n        }\n      });\n      str += \"}\";\n    } else if (item[VARIABLE.TYPE] !== VARIABLE.NULL) {\n      str += \"C:\" + value[COMPILER.CLASS_NAME].length + ':\"' + value[COMPILER.CLASS_NAME] + '\":' + func(item);\n    } else {\n      str += \"N;\";\n    }\n  }\n\n  return new PHP.VM.Variable(str);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 22.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.unserialize = function (valueObj) {\n  var COMPILER = PHP.Compiler.prototype,\n      unserialize = \"unserialize\",\n      VARIABLE = PHP.VM.Variable.prototype;\n  var value = valueObj[COMPILER.VARIABLE_VALUE],\n      parts = value.split(\":\");\n  var item, pos, len, val;\n  /*\n  switch( parts[ 0 ]) {\n      case \"C\":\n          \n          item = new (this.$Class.Get( parts[ 2 ].substring(1, parts[ 2 ].length - 1 ) ))( true );\n          pos = 6 + parts[ 1 ].length + (parts[ 1 ]-0);\n          \n          break;\n      case \"N;\":\n          item = null;\n          pos = 2;\n          break;\n  }\n  */\n  //value = value.substring( pos );\n  // todo add proper unserialization\n\n  while (value.length > 0) {\n    var pos = value.indexOf(\":\");\n\n    if (pos !== -1) {\n      if (item === undefined) {\n        len = value.substring(0, pos);\n\n        switch (len) {\n          case \"O\":\n            var className = parts[2].substring(1, parts[2].length - 1),\n                tmp = this.$Class.__autoload(className);\n\n            item = new (this.$Class.Get(\"__PHP_Incomplete_Class\"))(this, className);\n            value = value.substring(100); // tmp fix\n\n            break;\n\n          case \"C\":\n            item = new (this.$Class.Get(parts[2].substring(1, parts[2].length - 1)))(true);\n            pos = 6 + parts[1].length + (parts[1] - 0);\n            value = value.substring(pos);\n            continue;\n            break;\n\n          case \"N;\":\n            item = null;\n            pos = 2;\n            value = value.substring(pos);\n            continue;\n            break;\n        }\n      } else {\n        len = value.substring(0, pos);\n      }\n    } else {\n      break;\n    }\n\n    value = value.substring(len.length + 1);\n    val = value.substr(1, len);\n    value = value.substring(val.length + 2);\n  }\n\n  if (item !== null && item !== undefined && item[PHP.VM.Class.METHOD + unserialize] !== undefined) {\n    item[COMPILER.METHOD_CALL](this, unserialize, new PHP.VM.Variable(val));\n  }\n\n  return new PHP.VM.Variable(item);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 1.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.unset = function () {\n  PHP.Utils.$A(arguments).forEach(function (arg) {\n    if (arg !== undefined) {\n      arg[PHP.Compiler.prototype.UNSET]();\n    }\n  }, this);\n};\n\nPHP.Modules.prototype.var_dump = function () {\n  var str = \"\",\n      indent = 0,\n      COMPILER = PHP.Compiler.prototype,\n      VAR = PHP.VM.Variable.prototype;\n\n  var $dump = function (argument, indent) {\n    var str = \"\",\n        value = argument[COMPILER.VARIABLE_VALUE],\n        ARG_TYPE = argument[VAR.TYPE]; // trigger get for undefined\n\n    str += $INDENT(indent);\n\n    if (ARG_TYPE === VAR.NULL || argument[VAR.DEFINED] !== true && !(argument instanceof PHP.VM.ClassPrototype)) {\n      str += \"NULL\\n\";\n    } else if (ARG_TYPE === VAR.ARRAY) {\n      str += \"array(\";\n      var values = value[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE];\n      var keys = value[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.KEYS][COMPILER.VARIABLE_VALUE];\n      str += values.length;\n      str += \") {\\n\";\n      keys.forEach(function (key, index) {\n        if (key instanceof PHP.VM.Variable) {\n          key = key[COMPILER.VARIABLE_VALUE];\n        }\n\n        str += $INDENT(indent + 2) + \"[\";\n\n        if (typeof key === \"string\") {\n          str += '\"' + key + '\"';\n        } else {\n          str += key;\n        }\n\n        str += \"]=>\\n\";\n        str += $dump(values[index], indent + 2);\n      }, this);\n      str += $INDENT(indent) + \"}\\n\";\n    } else if (ARG_TYPE === VAR.BOOL) {\n      str += \"bool(\" + value + \")\\n\";\n    } else if (ARG_TYPE === VAR.STRING) {\n      str += \"string(\" + value.length + ') \"' + value + '\"\\n';\n    } else if (ARG_TYPE === VAR.INT) {\n      str += \"int(\" + value + ')\\n';\n    } else if (argument instanceof PHP.VM.ClassPrototype || ARG_TYPE === VAR.OBJECT) {\n      // todo, complete\n      if (ARG_TYPE === VAR.OBJECT) {\n        argument = value;\n      }\n\n      str += \"object(\" + argument[COMPILER.CLASS_NAME] + ')#1 '; // search whole prototype chain\n\n      var tmp = \"\",\n          count = 0;\n\n      for (var item in argument) {\n        var ignore = false,\n            parent;\n\n        if (item.substring(0, PHP.VM.Class.PROPERTY.length) === PHP.VM.Class.PROPERTY) {\n          if (!((argument[PHP.VM.Class.PROPERTY_TYPE + item.substring(PHP.VM.Class.PROPERTY.length)] & PHP.VM.Class.PRIVATE) === PHP.VM.Class.PRIVATE) && !((argument[PHP.VM.Class.PROPERTY_TYPE + item.substring(PHP.VM.Class.PROPERTY.length)] & PHP.VM.Class.PROTECTED) === PHP.VM.Class.PROTECTED)) {\n            tmp += $INDENT(indent + 2) + '[\"' + item.substring(PHP.VM.Class.PROPERTY.length);\n            tmp += '\"]=>\\n';\n            tmp += $dump(argument[item], indent + 2);\n            count++;\n          } else {\n            ignore = true;\n          }\n        }\n\n        parent = argument; // search for overwritten private members\n\n        do {\n          if ((argument[item] !== parent[item] || ignore) && parent[item] instanceof PHP.VM.Variable && parent.hasOwnProperty(item)) {\n            tmp += $INDENT(indent + 2) + '[\"' + item.substring(PHP.VM.Class.PROPERTY.length) + '\":';\n\n            if ((argument[PHP.VM.Class.PROPERTY_TYPE + item.substring(PHP.VM.Class.PROPERTY.length)] & PHP.VM.Class.PRIVATE) === PHP.VM.Class.PRIVATE) {\n              tmp += '\"' + Object.getPrototypeOf(parent)[COMPILER.CLASS_NAME] + '\":' + \"private\";\n            } else {\n              tmp += \"protected\";\n            }\n\n            tmp += ']=>\\n';\n            tmp += $dump(parent[item], indent + 2);\n            count++;\n          }\n\n          parent = Object.getPrototypeOf(parent);\n        } while (parent instanceof PHP.VM.ClassPrototype);\n      }\n\n      str += '(' + count + ') {\\n' + tmp;\n      str += $INDENT(indent) + '}\\n';\n    } else if (ARG_TYPE === VAR.FLOAT) {\n      str += \"float(\" + value + ')\\n';\n    }\n\n    return str;\n  }.bind(this),\n      $INDENT = function $INDENT(num) {\n    var str = \"\",\n        i;\n\n    for (i = 0; i < num; i++) {\n      str += \" \";\n    }\n\n    return str;\n  };\n\n  PHP.Utils.$A(arguments).forEach(function (argument) {\n    str += $dump(argument, 0);\n  }, this);\n  this.echo(str);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Modules.prototype.var_export = function (variable, ret) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  var val = \"\";\n\n  switch (variable[VARIABLE.TYPE]) {\n    case VARIABLE.STRING:\n      val += \"'\" + variable[COMPILER.VARIABLE_VALUE] + \"'\";\n      break;\n  }\n\n  val = new PHP.VM.Variable(val);\n\n  if (ret === undefined || ret[COMPILER.VARIABLE_VALUE] === false) {\n    this.echo(val);\n  } else {\n    return val;\n  }\n\n  return new PHP.VM.Variable();\n};\n\nPHP.Lexer = function (src, ini) {\n  var heredoc,\n      lineBreaker = function lineBreaker(result) {\n    if (result.match(/\\n/) !== null) {\n      var quote = result.substring(0, 1);\n      result = '[' + result.split(/\\n/).join(quote + \",\" + quote) + '].join(\"\\\\n\")';\n    }\n\n    return result;\n  },\n      prev,\n      openTag = ini === undefined || /^(on|true|1)$/i.test(ini.short_open_tag) ? /(\\<\\?php\\s|\\<\\?|\\<\\%|\\<script language\\=('|\")?php('|\")?\\>)/i : /(\\<\\?php\\s|<\\?=|\\<script language\\=('|\")?php('|\")?\\>)/i,\n      openTagStart = ini === undefined || /^(on|true|1)$/i.test(ini.short_open_tag) ? /^(\\<\\?php\\s|\\<\\?|\\<\\%|\\<script language\\=('|\")?php('|\")?\\>)/i : /^(\\<\\?php\\s|<\\?=|\\<script language\\=('|\")?php('|\")?\\>)/i,\n      tokens = [{\n    value: PHP.Constants.T_NAMESPACE,\n    re: /^namespace(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_USE,\n    re: /^use(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_ABSTRACT,\n    re: /^abstract(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_IMPLEMENTS,\n    re: /^implements(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_INTERFACE,\n    re: /^interface(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_CONST,\n    re: /^const(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_STATIC,\n    re: /^static(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_FINAL,\n    re: /^final(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_VAR,\n    re: /^var(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_GLOBAL,\n    re: /^global(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_CLONE,\n    re: /^clone(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_THROW,\n    re: /^throw(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_EXTENDS,\n    re: /^extends(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_AND_EQUAL,\n    re: /^&=/\n  }, {\n    value: PHP.Constants.T_AS,\n    re: /^as(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_ARRAY_CAST,\n    re: /^\\(array\\)/i\n  }, {\n    value: PHP.Constants.T_BOOL_CAST,\n    re: /^\\((bool|boolean)\\)/i\n  }, {\n    value: PHP.Constants.T_DOUBLE_CAST,\n    re: /^\\((real|float|double)\\)/i\n  }, {\n    value: PHP.Constants.T_INT_CAST,\n    re: /^\\((int|integer)\\)/i\n  }, {\n    value: PHP.Constants.T_OBJECT_CAST,\n    re: /^\\(object\\)/i\n  }, {\n    value: PHP.Constants.T_STRING_CAST,\n    re: /^\\(string\\)/i\n  }, {\n    value: PHP.Constants.T_UNSET_CAST,\n    re: /^\\(unset\\)/i\n  }, {\n    value: PHP.Constants.T_TRY,\n    re: /^try(?=\\s*{)/i\n  }, {\n    value: PHP.Constants.T_CATCH,\n    re: /^catch(?=\\s*\\()/i\n  }, {\n    value: PHP.Constants.T_INSTANCEOF,\n    re: /^instanceof(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_LOGICAL_OR,\n    re: /^or(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_LOGICAL_AND,\n    re: /^and(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_LOGICAL_XOR,\n    re: /^xor(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_BOOLEAN_AND,\n    re: /^&&/\n  }, {\n    value: PHP.Constants.T_BOOLEAN_OR,\n    re: /^\\|\\|/\n  }, {\n    value: PHP.Constants.T_CONTINUE,\n    re: /^continue(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_BREAK,\n    re: /^break(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_ENDDECLARE,\n    re: /^enddeclare(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_ENDFOR,\n    re: /^endfor(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_ENDFOREACH,\n    re: /^endforeach(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_ENDIF,\n    re: /^endif(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_ENDSWITCH,\n    re: /^endswitch(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_ENDWHILE,\n    re: /^endwhile(?=\\s|;)/i\n  }, {\n    value: PHP.Constants.T_CASE,\n    re: /^case(?=\\s)/i\n  }, {\n    value: PHP.Constants.T_DEFAULT,\n    re: /^default(?=\\s|:)/i\n  }, {\n    value: PHP.Constants.T_SWITCH,\n    re: /^switch(?=[ (])/i\n  }, {\n    value: PHP.Constants.T_EXIT,\n    re: /^(exit|die)(?=[ \\(;])/i\n  }, {\n    value: PHP.Constants.T_CLOSE_TAG,\n    re: /^(\\?\\>|\\%\\>|\\<\\/script\\>)\\s?\\s?/i,\n    func: function func(result) {\n      insidePHP = false;\n      return result;\n    }\n  }, {\n    value: PHP.Constants.T_DOUBLE_ARROW,\n    re: /^\\=\\>/\n  }, {\n    value: PHP.Constants.T_DOUBLE_COLON,\n    re: /^\\:\\:/\n  }, {\n    value: PHP.Constants.T_METHOD_C,\n    re: /^__METHOD__/\n  }, {\n    value: PHP.Constants.T_LINE,\n    re: /^__LINE__/\n  }, {\n    value: PHP.Constants.T_FILE,\n    re: /^__FILE__/\n  }, {\n    value: PHP.Constants.T_FUNC_C,\n    re: /^__FUNCTION__/\n  }, {\n    value: PHP.Constants.T_NS_C,\n    re: /^__NAMESPACE__/\n  }, {\n    value: PHP.Constants.T_TRAIT_C,\n    re: /^__TRAIT__/\n  }, {\n    value: PHP.Constants.T_DIR,\n    re: /^__DIR__/\n  }, {\n    value: PHP.Constants.T_CLASS_C,\n    re: /^__CLASS__/\n  }, {\n    value: PHP.Constants.T_INC,\n    re: /^\\+\\+/\n  }, {\n    value: PHP.Constants.T_DEC,\n    re: /^\\-\\-/\n  }, {\n    value: PHP.Constants.T_CONCAT_EQUAL,\n    re: /^\\.\\=/\n  }, {\n    value: PHP.Constants.T_DIV_EQUAL,\n    re: /^\\/\\=/\n  }, {\n    value: PHP.Constants.T_XOR_EQUAL,\n    re: /^\\^\\=/\n  }, {\n    value: PHP.Constants.T_MUL_EQUAL,\n    re: /^\\*\\=/\n  }, {\n    value: PHP.Constants.T_MOD_EQUAL,\n    re: /^\\%\\=/\n  }, {\n    value: PHP.Constants.T_SL_EQUAL,\n    re: /^<<=/\n  }, {\n    value: PHP.Constants.T_START_HEREDOC,\n    re: /^<<<[A-Z_0-9]+\\s/i,\n    func: function func(result) {\n      heredoc = result.substring(3, result.length - 1);\n      return result;\n    }\n  }, {\n    value: PHP.Constants.T_SL,\n    re: /^<</\n  }, {\n    value: PHP.Constants.T_IS_SMALLER_OR_EQUAL,\n    re: /^<=/\n  }, {\n    value: PHP.Constants.T_SR_EQUAL,\n    re: /^>>=/\n  }, {\n    value: PHP.Constants.T_SR,\n    re: /^>>/\n  }, {\n    value: PHP.Constants.T_IS_GREATER_OR_EQUAL,\n    re: /^>=/\n  }, {\n    value: PHP.Constants.T_OR_EQUAL,\n    re: /^\\|\\=/\n  }, {\n    value: PHP.Constants.T_PLUS_EQUAL,\n    re: /^\\+\\=/\n  }, {\n    value: PHP.Constants.T_MINUS_EQUAL,\n    re: /^-\\=/\n  }, {\n    value: PHP.Constants.T_OBJECT_OPERATOR,\n    re: /^\\-\\>/i\n  }, {\n    value: PHP.Constants.T_CLASS,\n    re: /^class(?=[\\s\\{])/i,\n    afterWhitespace: true\n  }, {\n    value: PHP.Constants.T_TRAIT,\n    re: /^trait(?=[\\s]+[A-Za-z])/i\n  }, {\n    value: PHP.Constants.T_PUBLIC,\n    re: /^public(?=[\\s])/i\n  }, {\n    value: PHP.Constants.T_PRIVATE,\n    re: /^private(?=[\\s])/i\n  }, {\n    value: PHP.Constants.T_PROTECTED,\n    re: /^protected(?=[\\s])/i\n  }, {\n    value: PHP.Constants.T_ARRAY,\n    re: /^array(?=\\s*?\\()/i\n  }, {\n    value: PHP.Constants.T_EMPTY,\n    re: /^empty(?=[ \\(])/i\n  }, {\n    value: PHP.Constants.T_ISSET,\n    re: /^isset(?=[ \\(])/i\n  }, {\n    value: PHP.Constants.T_UNSET,\n    re: /^unset(?=[ \\(])/i\n  }, {\n    value: PHP.Constants.T_RETURN,\n    re: /^return(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_FUNCTION,\n    re: /^function(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_ECHO,\n    re: /^echo(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_LIST,\n    re: /^list(?=\\s*?\\()/i\n  }, {\n    value: PHP.Constants.T_PRINT,\n    re: /^print(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_INCLUDE,\n    re: /^include(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_INCLUDE_ONCE,\n    re: /^include_once(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_REQUIRE,\n    re: /^require(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_REQUIRE_ONCE,\n    re: /^require_once(?=[ \"'(;])/i\n  }, {\n    value: PHP.Constants.T_NEW,\n    re: /^new(?=[ ])/i\n  }, {\n    value: PHP.Constants.T_COMMENT,\n    re: /^\\/\\*([\\S\\s]*?)(?:\\*\\/|$)/\n  }, {\n    value: PHP.Constants.T_COMMENT,\n    re: /^\\/\\/.*(\\s)?/\n  }, {\n    value: PHP.Constants.T_COMMENT,\n    re: /^\\#.*(\\s)?/\n  }, {\n    value: PHP.Constants.T_ELSEIF,\n    re: /^elseif(?=[\\s(])/i\n  }, {\n    value: PHP.Constants.T_GOTO,\n    re: /^goto(?=[\\s(])/i\n  }, {\n    value: PHP.Constants.T_ELSE,\n    re: /^else(?=[\\s{:])/i\n  }, {\n    value: PHP.Constants.T_IF,\n    re: /^if(?=[\\s(])/i\n  }, {\n    value: PHP.Constants.T_DO,\n    re: /^do(?=[ {])/i\n  }, {\n    value: PHP.Constants.T_WHILE,\n    re: /^while(?=[ (])/i\n  }, {\n    value: PHP.Constants.T_FOREACH,\n    re: /^foreach(?=[ (])/i\n  }, {\n    value: PHP.Constants.T_ISSET,\n    re: /^isset(?=[ (])/i\n  }, {\n    value: PHP.Constants.T_IS_IDENTICAL,\n    re: /^===/\n  }, {\n    value: PHP.Constants.T_IS_EQUAL,\n    re: /^==/\n  }, {\n    value: PHP.Constants.T_IS_NOT_IDENTICAL,\n    re: /^\\!==/\n  }, {\n    value: PHP.Constants.T_IS_NOT_EQUAL,\n    re: /^(\\!=|\\<\\>)/\n  }, {\n    value: PHP.Constants.T_FOR,\n    re: /^for(?=[ (])/i\n  }, {\n    value: PHP.Constants.T_DNUMBER,\n    re: /^[0-9]*\\.[0-9]+([eE][-]?[0-9]*)?/\n    /*,\n    func: function( result ) {\n    // transform e to E - token_get_all_variation1.phpt\n    return (result - 0).toString().toUpperCase();\n    }*/\n\n  }, {\n    value: PHP.Constants.T_LNUMBER,\n    re: /^(0x[0-9A-F]+|[0-9]+)/i\n  }, {\n    value: PHP.Constants.T_OPEN_TAG_WITH_ECHO,\n    re: /^(\\<\\?=|\\<\\%=)/i\n  }, {\n    value: PHP.Constants.T_OPEN_TAG,\n    re: openTagStart\n  }, {\n    value: PHP.Constants.T_VARIABLE,\n    re: /^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n  }, {\n    value: PHP.Constants.T_WHITESPACE,\n    re: /^\\s+/\n  }, {\n    value: PHP.Constants.T_CONSTANT_ENCAPSED_STRING,\n    re: /^(\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|'(?:[^'\\\\]|\\\\[\\s\\S])*')/,\n    func: function func(result, token) {\n      var curlyOpen = 0,\n          len,\n          bracketOpen = 0;\n\n      if (result.substring(0, 1) === \"'\") {\n        return result;\n      }\n\n      var match = result.match(/(?:[^\\\\]|\\\\.)*[^\\\\]\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/g);\n\n      if (match !== null) {\n        // string has a variable\n        while (result.length > 0) {\n          len = result.length;\n          match = result.match(/^[\\[\\]\\;\\:\\?\\(\\)\\!\\.\\,\\>\\<\\=\\+\\-\\/\\*\\|\\&\\@\\^\\%\\\"\\'\\{\\}]/);\n\n          if (match !== null) {\n            results.push(match[0]);\n            result = result.substring(1);\n\n            if (curlyOpen > 0 && match[0] === \"}\") {\n              curlyOpen--;\n            }\n\n            if (match[0] === \"[\") {\n              bracketOpen++;\n            }\n\n            if (match[0] === \"]\") {\n              bracketOpen--;\n            }\n          }\n\n          match = result.match(/^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/);\n\n          if (match !== null) {\n            results.push([parseInt(PHP.Constants.T_VARIABLE, 10), match[0], line]);\n            result = result.substring(match[0].length);\n            match = result.match(/^(\\-\\>)\\s*([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)\\s*(\\()/);\n\n            if (match !== null) {\n              results.push([parseInt(PHP.Constants.T_OBJECT_OPERATOR, 10), match[1], line]);\n              results.push([parseInt(PHP.Constants.T_STRING, 10), match[2], line]);\n              if (match[3]) results.push(match[3]);\n              result = result.substring(match[0].length);\n            }\n\n            if (result.match(/^\\[/g) !== null) {\n              continue;\n            }\n          }\n\n          var re;\n\n          if (curlyOpen > 0) {\n            re = /^([^\\\\\\$\"{}\\]\\(\\)\\->]|\\\\.)+/g;\n          } else {\n            re = /^([^\\\\\\$\"{]|\\\\.|{[^\\$]|\\$(?=[^a-zA-Z_\\x7f-\\uffff]))+/g;\n          }\n\n          var type, match2;\n\n          while ((match = result.match(re)) !== null) {\n            if (result.length === 1) {\n              throw new Error(match);\n            }\n\n            type = 0;\n\n            if (curlyOpen > 0) {\n              if (match2 = match[0].match(/^[\\[\\]\\;\\:\\?\\(\\)\\!\\.\\,\\>\\<\\=\\+\\-\\/\\*\\|\\&\\{\\}\\@\\^\\%\\$\\~]/)) {\n                results.push(match2[0]);\n              } else {\n                type = PHP.Constants.T_STRING;\n              }\n            } else {\n              type = PHP.Constants.T_ENCAPSED_AND_WHITESPACE;\n            }\n\n            if (type) {\n              results.push([parseInt(type, 10), match[0].replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\"), line]);\n            }\n\n            line += match[0].split('\\n').length - 1;\n            result = result.substring(match[0].length);\n          }\n\n          if (curlyOpen > 0 && result.match(/^\\->/) !== null) {\n            results.push([parseInt(PHP.Constants.T_OBJECT_OPERATOR, 10), '->', line]);\n            result = result.substring(2);\n          }\n\n          if (result.match(/^{\\$/) !== null) {\n            results.push([parseInt(PHP.Constants.T_CURLY_OPEN, 10), \"{\", line]);\n            result = result.substring(1);\n            curlyOpen++;\n          }\n\n          if (len === result.length) {\n            //  nothing has been found yet\n            if ((match = result.match(/^(([^\\\\]|\\\\.)*?[^\\\\]\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)/g)) !== null) {\n              return;\n            }\n          }\n        }\n\n        return undefined;\n      } else {\n        result = result.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\");\n      }\n      /*\n      if (result.match(/\\r\\n/) !== null) {\n      var quote = result.substring(0, 1);\n      result = '[' + result.split(/\\r\\n/).join( quote + \",\" + quote ) + '].join(\"\\\\n\")';\n      }\n      */\n\n\n      return result;\n    }\n  }, {\n    value: PHP.Constants.T_NS_SEPARATOR,\n    re: /^\\\\(?=[a-zA-Z_])/\n  }, {\n    value: PHP.Constants.T_STRING,\n    re: /^[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n  }, {\n    value: -1,\n    re: /^[\\[\\]\\;\\:\\?\\(\\)\\!\\.\\,\\>\\<\\=\\+\\-\\/\\*\\|\\&\\{\\}\\@\\^\\%\\\"\\'\\$\\~]/\n  }];\n\n  var results = [],\n      line = 1,\n      insidePHP = false,\n      cancel = true;\n\n  if (src === null) {\n    return results;\n  }\n\n  if (typeof src !== \"string\") {\n    src = src.toString();\n  }\n\n  while (src.length > 0 && cancel === true) {\n    if (insidePHP === true) {\n      if (heredoc !== undefined) {\n        // we are in a heredoc\n        var regexp = new RegExp('([\\\\S\\\\s]*)(\\\\r\\\\n|\\\\n|\\\\r)(' + heredoc + ')(;|\\\\r\\\\n|\\\\n)', \"i\");\n        var result = src.match(regexp);\n\n        if (result !== null) {\n          // contents\n          results.push([parseInt(PHP.Constants.T_ENCAPSED_AND_WHITESPACE, 10), result[1].replace(/^\\n/g, \"\").replace(/\\\\\\$/g, \"$\") + \"\\n\", line]); // note the no - 1 for length as regexp include one line as well\n\n          line += result[1].split('\\n').length; // heredoc end tag\n\n          results.push([parseInt(PHP.Constants.T_END_HEREDOC, 10), result[3], line]);\n          src = src.substring(result[1].length + result[2].length + result[3].length);\n          heredoc = undefined;\n        }\n\n        if (result === null) {\n          throw Error(\"sup\");\n        }\n      } else {\n        cancel = tokens.some(function (token) {\n          if (token.afterWhitespace === true) {\n            // check last\n            var last = results[results.length - 1];\n\n            if (!Array.isArray(last) || last[0] !== PHP.Constants.T_WHITESPACE && last[0] !== PHP.Constants.T_OPEN_TAG && last[0] !== PHP.Constants.T_COMMENT) {\n              return false;\n            }\n          }\n\n          var result = src.match(token.re);\n\n          if (result !== null) {\n            if (token.value !== -1) {\n              var resultString = result[0];\n\n              if (token.func !== undefined) {\n                resultString = token.func(resultString, token);\n              }\n\n              if (resultString !== undefined) {\n                results.push([parseInt(token.value, 10), resultString, line]);\n                line += resultString.split('\\n').length - 1;\n              }\n            } else {\n              // character token\n              results.push(result[0]);\n            }\n\n            src = src.substring(result[0].length);\n            return true;\n          }\n\n          return false;\n        });\n      }\n    } else {\n      var result = openTag.exec(src);\n\n      if (result !== null) {\n        if (result.index > 0) {\n          var resultString = src.substring(0, result.index);\n          results.push([parseInt(PHP.Constants.T_INLINE_HTML, 10), resultString, line]);\n          line += resultString.split('\\n').length - 1;\n          src = src.substring(result.index);\n        }\n\n        insidePHP = true;\n      } else {\n        results.push([parseInt(PHP.Constants.T_INLINE_HTML, 10), src.replace(/^\\n/, \"\"), line]);\n        return results;\n      } //    src = src.substring(result[ 0 ].length);\n\n    }\n  }\n\n  return results;\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 15.6.2012\n * @website http://hertzen.com\n */\n\n/*\n * The skeleton for this parser was written by Moriyoshi Koizumi and is based on\n * the work by Masato Bito and is in the PUBLIC DOMAIN.\n * Ported to JavaScript by Niklas von Hertzen\n */\n\n\nPHP.Parser = function (preprocessedTokens) {\n  var yybase = this.yybase,\n      yydefault = this.yydefault,\n      yycheck = this.yycheck,\n      yyaction = this.yyaction,\n      yylen = this.yylen,\n      yygbase = this.yygbase,\n      yygcheck = this.yygcheck,\n      yyp = this.yyp,\n      yygoto = this.yygoto,\n      yylhs = this.yylhs,\n      terminals = this.terminals,\n      translate = this.translate,\n      yygdefault = this.yygdefault;\n  this.pos = -1;\n  this.line = 1;\n  this.tokenMap = this.createTokenMap();\n  this.dropTokens = {};\n  this.dropTokens[PHP.Constants.T_WHITESPACE] = 1;\n  this.dropTokens[PHP.Constants.T_OPEN_TAG] = 1;\n  var tokens = []; // pre-process\n\n  preprocessedTokens.forEach(function (token, index) {\n    if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(token) === \"object\" && token[0] === PHP.Constants.T_OPEN_TAG_WITH_ECHO) {\n      tokens.push([PHP.Constants.T_OPEN_TAG, token[1], token[2]]);\n      tokens.push([PHP.Constants.T_ECHO, token[1], token[2]]);\n    } else {\n      tokens.push(token);\n    }\n  });\n  this.tokens = tokens; // We start off with no lookahead-token\n\n  var tokenId = this.TOKEN_NONE; // The attributes for a node are taken from the first and last token of the node.\n  // From the first token only the startAttributes are taken and from the last only\n  // the endAttributes. Both are merged using the array union operator (+).\n\n  this.startAttributes = {\n    'startLine': 1\n  };\n  this.endAttributes = {}; // In order to figure out the attributes for the starting token, we have to keep\n  // them in a stack\n\n  var attributeStack = [this.startAttributes]; // Start off in the initial state and keep a stack of previous states\n\n  var state = 0;\n  var stateStack = [state]; // AST stack\n\n  this.yyastk = []; // Current position in the stack(s)\n\n  this.stackPos = 0;\n  var yyn;\n  var origTokenId;\n\n  for (;;) {\n    if (yybase[state] === 0) {\n      yyn = yydefault[state];\n    } else {\n      if (tokenId === this.TOKEN_NONE) {\n        // fetch the next token id from the lexer and fetch additional info by-ref\n        origTokenId = this.getNextToken(); // map the lexer token id to the internally used token id's\n\n        tokenId = origTokenId >= 0 && origTokenId < this.TOKEN_MAP_SIZE ? translate[origTokenId] : this.TOKEN_INVALID;\n        attributeStack[this.stackPos] = this.startAttributes;\n      }\n\n      if (((yyn = yybase[state] + tokenId) >= 0 && yyn < this.YYLAST && yycheck[yyn] === tokenId || state < this.YY2TBLSTATE && (yyn = yybase[state + this.YYNLSTATES] + tokenId) >= 0 && yyn < this.YYLAST && yycheck[yyn] === tokenId) && (yyn = yyaction[yyn]) !== this.YYDEFAULT) {\n        /*\n         * >= YYNLSTATE: shift and reduce\n         * > 0: shift\n         * = 0: accept\n         * < 0: reduce\n         * = -YYUNEXPECTED: error\n         */\n        if (yyn > 0) {\n          /* shift */\n          ++this.stackPos;\n          stateStack[this.stackPos] = state = yyn;\n          this.yyastk[this.stackPos] = this.tokenValue;\n          attributeStack[this.stackPos] = this.startAttributes;\n          tokenId = this.TOKEN_NONE;\n          if (yyn < this.YYNLSTATES) continue;\n          /* $yyn >= YYNLSTATES means shift-and-reduce */\n\n          yyn -= this.YYNLSTATES;\n        } else {\n          yyn = -yyn;\n        }\n      } else {\n        yyn = yydefault[state];\n      }\n    }\n\n    for (;;) {\n      /* reduce/error */\n      if (yyn === 0) {\n        /* accept */\n        return this.yyval;\n      } else if (yyn !== this.YYUNEXPECTED) {\n        /* reduce */\n        try {\n          this['yyn' + yyn](PHP.Utils.Merge(attributeStack[this.stackPos - yylen[yyn]], this.endAttributes));\n        } catch (e) {\n          /*\n              if (-1 === $e->getRawLine()) {\n                  $e->setRawLine($startAttributes['startLine']);\n              }\n           */\n          throw e;\n        }\n        /* Goto - shift nonterminal */\n\n\n        this.stackPos -= yylen[yyn];\n        yyn = yylhs[yyn];\n\n        if ((yyp = yygbase[yyn] + stateStack[this.stackPos]) >= 0 && yyp < this.YYGLAST && yygcheck[yyp] === yyn) {\n          state = yygoto[yyp];\n        } else {\n          state = yygdefault[yyn];\n        }\n\n        ++this.stackPos;\n        stateStack[this.stackPos] = state;\n        this.yyastk[this.stackPos] = this.yyval;\n        attributeStack[this.stackPos] = this.startAttributes;\n      } else {\n        /* error */\n        if (eval !== true) {\n          var expected = [];\n\n          for (var i = 0; i < this.TOKEN_MAP_SIZE; ++i) {\n            if ((yyn = yybase[state] + i) >= 0 && yyn < this.YYLAST && yycheck[yyn] == i || state < this.YY2TBLSTATE && (yyn = yybase[state + this.YYNLSTATES] + i) && yyn < this.YYLAST && yycheck[yyn] == i) {\n              if (yyaction[yyn] != this.YYUNEXPECTED) {\n                if (expected.length == 4) {\n                  /* Too many expected tokens */\n                  expected = [];\n                  break;\n                }\n\n                expected.push(this.terminals[i]);\n              }\n            }\n          }\n\n          var expectedString = '';\n\n          if (expected.length) {\n            expectedString = ', expecting ' + expected.join(' or ');\n          }\n\n          throw new PHP.ParseError('syntax error, unexpected ' + terminals[tokenId] + expectedString, this.startAttributes['startLine']);\n        } else {\n          return this.startAttributes['startLine'];\n        }\n      }\n\n      if (state < this.YYNLSTATES) break;\n      /* >= YYNLSTATES means shift-and-reduce */\n\n      yyn = state - this.YYNLSTATES;\n    }\n  }\n};\n\nPHP.ParseError = function (msg, line) {\n  this.message = msg;\n  this.line = line;\n};\n\nPHP.Parser.prototype.MODIFIER_PUBLIC = 1;\nPHP.Parser.prototype.MODIFIER_PROTECTED = 2;\nPHP.Parser.prototype.MODIFIER_PRIVATE = 4;\nPHP.Parser.prototype.MODIFIER_STATIC = 8;\nPHP.Parser.prototype.MODIFIER_ABSTRACT = 16;\nPHP.Parser.prototype.MODIFIER_FINAL = 32;\n\nPHP.Parser.prototype.getNextToken = function () {\n  this.startAttributes = {};\n  this.endAttributes = {};\n  var token, tmp;\n\n  while (this.tokens[++this.pos] !== undefined) {\n    token = this.tokens[this.pos];\n\n    if (typeof token === \"string\") {\n      this.startAttributes['startLine'] = this.line;\n      this.endAttributes['endLine'] = this.line; // bug in token_get_all\n\n      if ('b\"' === token) {\n        this.tokenValue = 'b\"';\n        return '\"'.charCodeAt(0);\n      } else {\n        this.tokenValue = token;\n        return token.charCodeAt(0);\n      }\n    } else {\n      this.line += (tmp = token[1].match(/\\n/g)) === null ? 0 : tmp.length;\n\n      if (PHP.Constants.T_COMMENT === token[0]) {\n        if (!Array.isArray(this.startAttributes['comments'])) {\n          this.startAttributes['comments'] = [];\n        }\n\n        this.startAttributes['comments'].push({\n          type: \"comment\",\n          comment: token[1],\n          line: token[2]\n        });\n      } else if (PHP.Constants.T_DOC_COMMENT === token[0]) {\n        this.startAttributes['comments'].push(new PHPParser_Comment_Doc(token[1], token[2]));\n      } else if (this.dropTokens[token[0]] === undefined) {\n        this.tokenValue = token[1];\n        this.startAttributes['startLine'] = token[2];\n        this.endAttributes['endLine'] = this.line;\n        return this.tokenMap[token[0]];\n      }\n    }\n  }\n\n  this.startAttributes['startLine'] = this.line; // 0 is the EOF token\n\n  return 0;\n};\n/**\n * Creates the token map.\n *\n * The token map maps the PHP internal token identifiers\n * to the identifiers used by the PHP.Parser. Additionally it\n * maps T_OPEN_TAG_WITH_ECHO to T_ECHO and T_CLOSE_TAG to ';'.\n *\n * @return array The token map\n */\n\n\nPHP.Parser.prototype.createTokenMap = function () {\n  var tokenMap = {},\n      name,\n      i;\n  var T_DOUBLE_COLON = PHP.Constants.T_PAAMAYIM_NEKUDOTAYIM; // 256 is the minimum possible token number, as everything below\n  // it is an ASCII value\n\n  for (i = 256; i < 1000; ++i) {\n    // T_DOUBLE_COLON is equivalent to T_PAAMAYIM_NEKUDOTAYIM\n    if (T_DOUBLE_COLON === i) {\n      tokenMap[i] = this.T_PAAMAYIM_NEKUDOTAYIM; // T_OPEN_TAG_WITH_ECHO with dropped T_OPEN_TAG results in T_ECHO\n    } else if (PHP.Constants.T_OPEN_TAG_WITH_ECHO === i) {\n      tokenMap[i] = PHP.Constants.T_ECHO; // T_CLOSE_TAG is equivalent to ';'\n    } else if (PHP.Constants.T_CLOSE_TAG === i) {\n      tokenMap[i] = 59; // and the others can be mapped directly\n    } else if ('UNKNOWN' !== (name = PHP.Utils.TokenName(i))) {\n      tokenMap[i] = this[name];\n    }\n  }\n\n  return tokenMap;\n};\n\nvar yynStandard = function yynStandard() {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n}; // todo fix\n\n\nPHP.Parser.prototype.MakeArray = function (arr) {\n  return Array.isArray(arr) ? arr : [arr];\n};\n\nPHP.Parser.prototype.parseString = function (str) {\n  var bLength = 0;\n\n  if ('b' === str[0]) {\n    bLength = 1;\n  }\n\n  if ('\\'' === str[bLength]) {\n    str = str.replace(['\\\\\\\\', '\\\\\\''], ['\\\\', '\\'']);\n  } else {\n    str = this.parseEscapeSequences(str, '\"');\n  }\n\n  return str;\n};\n\nPHP.Parser.prototype.parseEscapeSequences = function (str, quote) {\n  if (undefined !== quote) {\n    str = str.replace(new RegExp('\\\\' + quote, \"g\"), quote);\n  }\n\n  var replacements = {\n    '\\\\': '\\\\',\n    '$': '$',\n    'n': \"\\n\",\n    'r': \"\\r\",\n    't': \"\\t\",\n    'f': \"\\f\",\n    'v': \"\\v\",\n    'e': \"\\x1B\"\n  };\n  return str.replace(/~\\\\\\\\([\\\\\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3})~/g, function (matches) {\n    var str = matches[1];\n\n    if (replacements[str] !== undefined) {\n      return replacements[str];\n    } else if ('x' === str[0] || 'X' === str[0]) {\n      return chr(hexdec(str));\n    } else {\n      return chr(octdec(str));\n    }\n  });\n  return str;\n};\n/* This is an automatically GENERATED file, which should not be manually edited.\n * Instead edit one of the following:\n *  * the grammar file grammar/zend_language_parser.jsy\n *  * the parser skeleton grammar/kymacc.js.parser\n *  * the preprocessing script grammar/rebuildParser.php\n *\n * The skeleton for this parser was written by Moriyoshi Koizumi and is based on\n * the work by Masato Bito and is in the PUBLIC DOMAIN.\n * Ported to JavaScript by Niklas von Hertzen\n */\n\n\nPHP.Parser.prototype.TOKEN_NONE = -1;\nPHP.Parser.prototype.TOKEN_INVALID = 149;\nPHP.Parser.prototype.TOKEN_MAP_SIZE = 384;\nPHP.Parser.prototype.YYLAST = 913;\nPHP.Parser.prototype.YY2TBLSTATE = 328;\nPHP.Parser.prototype.YYGLAST = 415;\nPHP.Parser.prototype.YYNLSTATES = 544;\nPHP.Parser.prototype.YYUNEXPECTED = 32767;\nPHP.Parser.prototype.YYDEFAULT = -32766; // {{{ Tokens\n\nPHP.Parser.prototype.YYERRTOK = 256;\nPHP.Parser.prototype.T_INCLUDE = 257;\nPHP.Parser.prototype.T_INCLUDE_ONCE = 258;\nPHP.Parser.prototype.T_EVAL = 259;\nPHP.Parser.prototype.T_REQUIRE = 260;\nPHP.Parser.prototype.T_REQUIRE_ONCE = 261;\nPHP.Parser.prototype.T_LOGICAL_OR = 262;\nPHP.Parser.prototype.T_LOGICAL_XOR = 263;\nPHP.Parser.prototype.T_LOGICAL_AND = 264;\nPHP.Parser.prototype.T_PRINT = 265;\nPHP.Parser.prototype.T_PLUS_EQUAL = 266;\nPHP.Parser.prototype.T_MINUS_EQUAL = 267;\nPHP.Parser.prototype.T_MUL_EQUAL = 268;\nPHP.Parser.prototype.T_DIV_EQUAL = 269;\nPHP.Parser.prototype.T_CONCAT_EQUAL = 270;\nPHP.Parser.prototype.T_MOD_EQUAL = 271;\nPHP.Parser.prototype.T_AND_EQUAL = 272;\nPHP.Parser.prototype.T_OR_EQUAL = 273;\nPHP.Parser.prototype.T_XOR_EQUAL = 274;\nPHP.Parser.prototype.T_SL_EQUAL = 275;\nPHP.Parser.prototype.T_SR_EQUAL = 276;\nPHP.Parser.prototype.T_BOOLEAN_OR = 277;\nPHP.Parser.prototype.T_BOOLEAN_AND = 278;\nPHP.Parser.prototype.T_IS_EQUAL = 279;\nPHP.Parser.prototype.T_IS_NOT_EQUAL = 280;\nPHP.Parser.prototype.T_IS_IDENTICAL = 281;\nPHP.Parser.prototype.T_IS_NOT_IDENTICAL = 282;\nPHP.Parser.prototype.T_IS_SMALLER_OR_EQUAL = 283;\nPHP.Parser.prototype.T_IS_GREATER_OR_EQUAL = 284;\nPHP.Parser.prototype.T_SL = 285;\nPHP.Parser.prototype.T_SR = 286;\nPHP.Parser.prototype.T_INSTANCEOF = 287;\nPHP.Parser.prototype.T_INC = 288;\nPHP.Parser.prototype.T_DEC = 289;\nPHP.Parser.prototype.T_INT_CAST = 290;\nPHP.Parser.prototype.T_DOUBLE_CAST = 291;\nPHP.Parser.prototype.T_STRING_CAST = 292;\nPHP.Parser.prototype.T_ARRAY_CAST = 293;\nPHP.Parser.prototype.T_OBJECT_CAST = 294;\nPHP.Parser.prototype.T_BOOL_CAST = 295;\nPHP.Parser.prototype.T_UNSET_CAST = 296;\nPHP.Parser.prototype.T_NEW = 297;\nPHP.Parser.prototype.T_CLONE = 298;\nPHP.Parser.prototype.T_EXIT = 299;\nPHP.Parser.prototype.T_IF = 300;\nPHP.Parser.prototype.T_ELSEIF = 301;\nPHP.Parser.prototype.T_ELSE = 302;\nPHP.Parser.prototype.T_ENDIF = 303;\nPHP.Parser.prototype.T_LNUMBER = 304;\nPHP.Parser.prototype.T_DNUMBER = 305;\nPHP.Parser.prototype.T_STRING = 306;\nPHP.Parser.prototype.T_STRING_VARNAME = 307;\nPHP.Parser.prototype.T_VARIABLE = 308;\nPHP.Parser.prototype.T_NUM_STRING = 309;\nPHP.Parser.prototype.T_INLINE_HTML = 310;\nPHP.Parser.prototype.T_CHARACTER = 311;\nPHP.Parser.prototype.T_BAD_CHARACTER = 312;\nPHP.Parser.prototype.T_ENCAPSED_AND_WHITESPACE = 313;\nPHP.Parser.prototype.T_CONSTANT_ENCAPSED_STRING = 314;\nPHP.Parser.prototype.T_ECHO = 315;\nPHP.Parser.prototype.T_DO = 316;\nPHP.Parser.prototype.T_WHILE = 317;\nPHP.Parser.prototype.T_ENDWHILE = 318;\nPHP.Parser.prototype.T_FOR = 319;\nPHP.Parser.prototype.T_ENDFOR = 320;\nPHP.Parser.prototype.T_FOREACH = 321;\nPHP.Parser.prototype.T_ENDFOREACH = 322;\nPHP.Parser.prototype.T_DECLARE = 323;\nPHP.Parser.prototype.T_ENDDECLARE = 324;\nPHP.Parser.prototype.T_AS = 325;\nPHP.Parser.prototype.T_SWITCH = 326;\nPHP.Parser.prototype.T_ENDSWITCH = 327;\nPHP.Parser.prototype.T_CASE = 328;\nPHP.Parser.prototype.T_DEFAULT = 329;\nPHP.Parser.prototype.T_BREAK = 330;\nPHP.Parser.prototype.T_CONTINUE = 331;\nPHP.Parser.prototype.T_GOTO = 332;\nPHP.Parser.prototype.T_FUNCTION = 333;\nPHP.Parser.prototype.T_CONST = 334;\nPHP.Parser.prototype.T_RETURN = 335;\nPHP.Parser.prototype.T_TRY = 336;\nPHP.Parser.prototype.T_CATCH = 337;\nPHP.Parser.prototype.T_THROW = 338;\nPHP.Parser.prototype.T_USE = 339;\nPHP.Parser.prototype.T_INSTEADOF = 340;\nPHP.Parser.prototype.T_GLOBAL = 341;\nPHP.Parser.prototype.T_STATIC = 342;\nPHP.Parser.prototype.T_ABSTRACT = 343;\nPHP.Parser.prototype.T_FINAL = 344;\nPHP.Parser.prototype.T_PRIVATE = 345;\nPHP.Parser.prototype.T_PROTECTED = 346;\nPHP.Parser.prototype.T_PUBLIC = 347;\nPHP.Parser.prototype.T_VAR = 348;\nPHP.Parser.prototype.T_UNSET = 349;\nPHP.Parser.prototype.T_ISSET = 350;\nPHP.Parser.prototype.T_EMPTY = 351;\nPHP.Parser.prototype.T_HALT_COMPILER = 352;\nPHP.Parser.prototype.T_CLASS = 353;\nPHP.Parser.prototype.T_TRAIT = 354;\nPHP.Parser.prototype.T_INTERFACE = 355;\nPHP.Parser.prototype.T_EXTENDS = 356;\nPHP.Parser.prototype.T_IMPLEMENTS = 357;\nPHP.Parser.prototype.T_OBJECT_OPERATOR = 358;\nPHP.Parser.prototype.T_DOUBLE_ARROW = 359;\nPHP.Parser.prototype.T_LIST = 360;\nPHP.Parser.prototype.T_ARRAY = 361;\nPHP.Parser.prototype.T_CALLABLE = 362;\nPHP.Parser.prototype.T_CLASS_C = 363;\nPHP.Parser.prototype.T_TRAIT_C = 364;\nPHP.Parser.prototype.T_METHOD_C = 365;\nPHP.Parser.prototype.T_FUNC_C = 366;\nPHP.Parser.prototype.T_LINE = 367;\nPHP.Parser.prototype.T_FILE = 368;\nPHP.Parser.prototype.T_COMMENT = 369;\nPHP.Parser.prototype.T_DOC_COMMENT = 370;\nPHP.Parser.prototype.T_OPEN_TAG = 371;\nPHP.Parser.prototype.T_OPEN_TAG_WITH_ECHO = 372;\nPHP.Parser.prototype.T_CLOSE_TAG = 373;\nPHP.Parser.prototype.T_WHITESPACE = 374;\nPHP.Parser.prototype.T_START_HEREDOC = 375;\nPHP.Parser.prototype.T_END_HEREDOC = 376;\nPHP.Parser.prototype.T_DOLLAR_OPEN_CURLY_BRACES = 377;\nPHP.Parser.prototype.T_CURLY_OPEN = 378;\nPHP.Parser.prototype.T_PAAMAYIM_NEKUDOTAYIM = 379;\nPHP.Parser.prototype.T_NAMESPACE = 380;\nPHP.Parser.prototype.T_NS_C = 381;\nPHP.Parser.prototype.T_DIR = 382;\nPHP.Parser.prototype.T_NS_SEPARATOR = 383; // }}}\n\n/* @var array Map of token ids to their respective names */\n\nPHP.Parser.prototype.terminals = [\"$EOF\", \"error\", \"T_INCLUDE\", \"T_INCLUDE_ONCE\", \"T_EVAL\", \"T_REQUIRE\", \"T_REQUIRE_ONCE\", \"','\", \"T_LOGICAL_OR\", \"T_LOGICAL_XOR\", \"T_LOGICAL_AND\", \"T_PRINT\", \"'='\", \"T_PLUS_EQUAL\", \"T_MINUS_EQUAL\", \"T_MUL_EQUAL\", \"T_DIV_EQUAL\", \"T_CONCAT_EQUAL\", \"T_MOD_EQUAL\", \"T_AND_EQUAL\", \"T_OR_EQUAL\", \"T_XOR_EQUAL\", \"T_SL_EQUAL\", \"T_SR_EQUAL\", \"'?'\", \"':'\", \"T_BOOLEAN_OR\", \"T_BOOLEAN_AND\", \"'|'\", \"'^'\", \"'&'\", \"T_IS_EQUAL\", \"T_IS_NOT_EQUAL\", \"T_IS_IDENTICAL\", \"T_IS_NOT_IDENTICAL\", \"'<'\", \"T_IS_SMALLER_OR_EQUAL\", \"'>'\", \"T_IS_GREATER_OR_EQUAL\", \"T_SL\", \"T_SR\", \"'+'\", \"'-'\", \"'.'\", \"'*'\", \"'/'\", \"'%'\", \"'!'\", \"T_INSTANCEOF\", \"'~'\", \"T_INC\", \"T_DEC\", \"T_INT_CAST\", \"T_DOUBLE_CAST\", \"T_STRING_CAST\", \"T_ARRAY_CAST\", \"T_OBJECT_CAST\", \"T_BOOL_CAST\", \"T_UNSET_CAST\", \"'@'\", \"'['\", \"T_NEW\", \"T_CLONE\", \"T_EXIT\", \"T_IF\", \"T_ELSEIF\", \"T_ELSE\", \"T_ENDIF\", \"T_LNUMBER\", \"T_DNUMBER\", \"T_STRING\", \"T_STRING_VARNAME\", \"T_VARIABLE\", \"T_NUM_STRING\", \"T_INLINE_HTML\", \"T_ENCAPSED_AND_WHITESPACE\", \"T_CONSTANT_ENCAPSED_STRING\", \"T_ECHO\", \"T_DO\", \"T_WHILE\", \"T_ENDWHILE\", \"T_FOR\", \"T_ENDFOR\", \"T_FOREACH\", \"T_ENDFOREACH\", \"T_DECLARE\", \"T_ENDDECLARE\", \"T_AS\", \"T_SWITCH\", \"T_ENDSWITCH\", \"T_CASE\", \"T_DEFAULT\", \"T_BREAK\", \"T_CONTINUE\", \"T_GOTO\", \"T_FUNCTION\", \"T_CONST\", \"T_RETURN\", \"T_TRY\", \"T_CATCH\", \"T_THROW\", \"T_USE\", \"T_INSTEADOF\", \"T_GLOBAL\", \"T_STATIC\", \"T_ABSTRACT\", \"T_FINAL\", \"T_PRIVATE\", \"T_PROTECTED\", \"T_PUBLIC\", \"T_VAR\", \"T_UNSET\", \"T_ISSET\", \"T_EMPTY\", \"T_HALT_COMPILER\", \"T_CLASS\", \"T_TRAIT\", \"T_INTERFACE\", \"T_EXTENDS\", \"T_IMPLEMENTS\", \"T_OBJECT_OPERATOR\", \"T_DOUBLE_ARROW\", \"T_LIST\", \"T_ARRAY\", \"T_CALLABLE\", \"T_CLASS_C\", \"T_TRAIT_C\", \"T_METHOD_C\", \"T_FUNC_C\", \"T_LINE\", \"T_FILE\", \"T_START_HEREDOC\", \"T_END_HEREDOC\", \"T_DOLLAR_OPEN_CURLY_BRACES\", \"T_CURLY_OPEN\", \"T_PAAMAYIM_NEKUDOTAYIM\", \"T_NAMESPACE\", \"T_NS_C\", \"T_DIR\", \"T_NS_SEPARATOR\", \"';'\", \"'{'\", \"'}'\", \"'('\", \"')'\", \"'$'\", \"']'\", \"'`'\", \"'\\\"'\", \"???\"];\n/* @var Map which translates lexer tokens to internal tokens */\n\nPHP.Parser.prototype.translate = [0, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 47, 148, 149, 145, 46, 30, 149, 143, 144, 44, 41, 7, 42, 43, 45, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 25, 140, 35, 12, 37, 24, 59, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 60, 149, 146, 29, 149, 147, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 141, 28, 142, 49, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 31, 32, 33, 34, 36, 38, 39, 40, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 149, 149, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 149, 149, 149, 149, 149, 149, 131, 132, 133, 134, 135, 136, 137, 138, 139];\nPHP.Parser.prototype.yyaction = [61, 62, 363, 63, 64, -32766, -32766, -32766, 509, 65, 708, 709, 710, 707, 706, 705, -32766, -32766, -32766, -32766, -32766, -32766, 132, -32766, -32766, -32766, -32766, -32766, -32767, -32767, -32767, -32767, -32766, 335, -32766, -32766, -32766, -32766, -32766, 66, 67, 351, 663, 664, 40, 68, 548, 69, 232, 233, 70, 71, 72, 73, 74, 75, 76, 77, 30, 246, 78, 336, 364, -112, 0, 469, 833, 834, 365, 641, 890, 436, 590, 41, 835, 53, 27, 366, 294, 367, 687, 368, 921, 369, 923, 922, 370, -32766, -32766, -32766, 42, 43, 371, 339, 126, 44, 372, 337, 79, 297, 349, 292, 293, -32766, 918, -32766, -32766, 373, 374, 375, 376, 377, 391, 199, 361, 338, 573, 613, 378, 379, 380, 381, 845, 839, 840, 841, 842, 836, 837, 253, -32766, 87, 88, 89, 391, 843, 838, 338, 597, 519, 128, 80, 129, 273, 332, 257, 261, 47, 673, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 799, 247, 884, 108, 109, 110, 226, 247, 21, -32766, 310, -32766, -32766, -32766, 642, 548, -32766, -32766, -32766, -32766, 56, 353, -32766, -32766, -32766, 55, -32766, -32766, -32766, -32766, -32766, 58, -32766, -32766, -32766, -32766, -32766, -32766, -32766, -32766, -32766, 557, -32766, -32766, 518, -32766, 548, 890, -32766, 390, -32766, 228, 252, -32766, -32766, -32766, -32766, -32766, 275, -32766, 234, -32766, 587, 588, -32766, -32766, -32766, -32766, -32766, -32766, -32766, 46, 236, -32766, -32766, 281, -32766, 682, 348, -32766, 390, -32766, 346, 333, 521, -32766, -32766, -32766, 271, 911, 262, 237, 446, 911, -32766, 894, 59, 700, 358, 135, 548, 123, 538, 35, -32766, 333, 122, -32766, -32766, -32766, 271, -32766, 124, -32766, 692, -32766, -32766, -32766, -32766, 700, 273, 22, -32766, -32766, -32766, -32766, 239, -32766, -32766, 612, -32766, 548, 134, -32766, 390, -32766, 462, 354, -32766, -32766, -32766, -32766, -32766, 227, -32766, 238, -32766, 845, 542, -32766, 856, 611, 200, -32766, -32766, -32766, 259, 280, -32766, -32766, 201, -32766, 855, 129, -32766, 390, 130, 202, 333, 206, -32766, -32766, -32766, 271, -32766, -32766, -32766, 125, 601, -32766, 136, 299, 700, 489, 28, 548, 105, 106, 107, -32766, 498, 499, -32766, -32766, -32766, 207, -32766, 133, -32766, 525, -32766, -32766, -32766, -32766, 663, 664, 527, -32766, -32766, -32766, -32766, 528, -32766, -32766, 610, -32766, 548, 427, -32766, 390, -32766, 532, 539, -32766, -32766, -32766, -32766, -32766, 240, -32766, 247, -32766, 697, 543, -32766, 554, 523, 608, -32766, -32766, -32766, 686, 535, -32766, -32766, 54, -32766, 57, 60, -32766, 390, 246, -155, 278, 345, -32766, -32766, -32766, 506, 347, -152, 471, 402, 403, -32766, 405, 404, 272, 493, 416, 548, 318, 417, 505, -32766, 517, 548, -32766, -32766, -32766, 549, -32766, 562, -32766, 916, -32766, -32766, -32766, -32766, 564, 826, 848, -32766, -32766, -32766, -32766, 694, -32766, -32766, 485, -32766, 548, 487, -32766, 390, -32766, 504, 802, -32766, -32766, -32766, -32766, -32766, 279, -32766, 911, -32766, 502, 492, -32766, 413, 483, 269, -32766, -32766, -32766, 243, 337, -32766, -32766, 418, -32766, 454, 229, -32766, 390, 274, 373, 374, 344, -32766, -32766, -32766, 360, 614, -32766, 573, 613, 378, 379, -274, 548, 615, -332, 844, -32766, 258, 51, -32766, -32766, -32766, 270, -32766, 346, -32766, 52, -32766, 260, 0, -32766, -333, -32766, -32766, -32766, -32766, -32766, -32766, 205, -32766, -32766, 49, -32766, 548, 424, -32766, 390, -32766, -266, 264, -32766, -32766, -32766, -32766, -32766, 409, -32766, 343, -32766, 265, 312, -32766, 470, 513, -275, -32766, -32766, -32766, 920, 337, -32766, -32766, 530, -32766, 531, 600, -32766, 390, 592, 373, 374, 578, 581, -32766, -32766, 644, 629, -32766, 573, 613, 378, 379, 635, 548, 636, 576, 627, -32766, 625, 693, -32766, -32766, -32766, 691, -32766, 591, -32766, 582, -32766, 203, 204, -32766, 584, 583, -32766, -32766, -32766, -32766, 586, 599, -32766, -32766, 589, -32766, 690, 558, -32766, 390, 197, 683, 919, 86, 520, 522, -32766, 524, 833, 834, 529, 533, -32766, 534, 537, 541, 835, 48, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 127, 31, 633, 337, 330, 634, 585, -32766, 32, 291, 337, 330, 478, 373, 374, 917, 291, 891, 889, 875, 373, 374, 553, 613, 378, 379, 737, 739, 887, 553, 613, 378, 379, 824, 451, 675, 839, 840, 841, 842, 836, 837, 320, 895, 277, 885, 23, 33, 843, 838, 556, 277, 337, 330, -32766, 34, -32766, 555, 291, 36, 37, 38, 373, 374, 39, 45, 50, 81, 82, 83, 84, 553, 613, 378, 379, -32767, -32767, -32767, -32767, 103, 104, 105, 106, 107, 337, 85, 131, 137, 337, 138, 198, 224, 225, 277, 373, 374, -332, 230, 373, 374, 24, 337, 231, 573, 613, 378, 379, 573, 613, 378, 379, 373, 374, 235, 248, 249, 250, 337, 251, 0, 573, 613, 378, 379, 276, 329, 331, 373, 374, -32766, 337, 574, 490, 792, 337, 609, 573, 613, 378, 379, 373, 374, 25, 300, 373, 374, 319, 337, 795, 573, 613, 378, 379, 573, 613, 378, 379, 373, 374, 516, 355, 359, 445, 482, 796, 507, 573, 613, 378, 379, 508, 548, 337, 890, 775, 791, 337, 604, 803, 808, 806, 698, 373, 374, 888, 807, 373, 374, -32766, -32766, -32766, 573, 613, 378, 379, 573, 613, 378, 379, 873, 832, 804, 872, 851, -32766, 809, -32766, -32766, -32766, -32766, 805, 20, 26, 29, 298, 480, 515, 770, 778, 827, 457, 0, 900, 455, 774, 0, 0, 0, 874, 870, 886, 823, 915, 852, 869, 488, 0, 391, 793, 0, 338, 0, 0, 0, 340, 0, 273];\nPHP.Parser.prototype.yycheck = [2, 3, 4, 5, 6, 8, 9, 10, 70, 11, 104, 105, 106, 107, 108, 109, 8, 9, 10, 8, 9, 24, 60, 26, 27, 28, 29, 30, 31, 32, 33, 34, 24, 7, 26, 27, 28, 29, 30, 41, 42, 7, 123, 124, 7, 47, 70, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 144, 0, 75, 68, 69, 70, 25, 72, 70, 74, 7, 76, 77, 78, 79, 7, 81, 142, 83, 70, 85, 72, 73, 88, 8, 9, 10, 92, 93, 94, 95, 7, 97, 98, 95, 100, 7, 7, 103, 104, 24, 142, 26, 27, 105, 106, 111, 112, 113, 136, 7, 7, 139, 114, 115, 116, 117, 122, 123, 132, 125, 126, 127, 128, 129, 130, 131, 8, 8, 9, 10, 136, 137, 138, 139, 140, 141, 25, 143, 141, 145, 142, 147, 148, 24, 72, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 144, 48, 72, 44, 45, 46, 30, 48, 144, 64, 72, 8, 9, 10, 140, 70, 8, 9, 10, 74, 60, 25, 77, 78, 79, 60, 81, 24, 83, 26, 85, 60, 24, 88, 26, 27, 28, 92, 93, 94, 64, 140, 97, 98, 70, 100, 70, 72, 103, 104, 74, 145, 7, 77, 78, 79, 111, 81, 7, 83, 30, 85, 140, 140, 88, 8, 9, 10, 92, 93, 94, 133, 134, 97, 98, 145, 100, 140, 7, 103, 104, 24, 139, 96, 141, 140, 141, 111, 101, 75, 75, 30, 70, 75, 64, 70, 60, 110, 121, 12, 70, 141, 25, 143, 74, 96, 141, 77, 78, 79, 101, 81, 141, 83, 140, 85, 140, 141, 88, 110, 145, 144, 92, 93, 94, 64, 7, 97, 98, 142, 100, 70, 141, 103, 104, 74, 145, 141, 77, 78, 79, 111, 81, 7, 83, 30, 85, 132, 25, 88, 132, 142, 12, 92, 93, 94, 120, 60, 97, 98, 12, 100, 148, 141, 103, 104, 141, 12, 96, 12, 140, 141, 111, 101, 8, 9, 10, 141, 25, 64, 90, 91, 110, 65, 66, 70, 41, 42, 43, 74, 65, 66, 77, 78, 79, 12, 81, 25, 83, 25, 85, 140, 141, 88, 123, 124, 25, 92, 93, 94, 64, 25, 97, 98, 142, 100, 70, 120, 103, 104, 74, 25, 25, 77, 78, 79, 111, 81, 30, 83, 48, 85, 140, 141, 88, 140, 141, 30, 92, 93, 94, 140, 141, 97, 98, 60, 100, 60, 60, 103, 104, 61, 72, 75, 70, 140, 141, 111, 67, 70, 87, 99, 70, 70, 64, 70, 72, 102, 89, 70, 70, 71, 70, 70, 74, 70, 70, 77, 78, 79, 70, 81, 70, 83, 70, 85, 140, 141, 88, 70, 144, 70, 92, 93, 94, 64, 70, 97, 98, 72, 100, 70, 72, 103, 104, 74, 72, 72, 77, 78, 79, 111, 81, 75, 83, 75, 85, 89, 86, 88, 79, 101, 118, 92, 93, 94, 87, 95, 97, 98, 87, 100, 87, 87, 103, 104, 118, 105, 106, 95, 140, 141, 111, 95, 115, 64, 114, 115, 116, 117, 135, 70, 115, 120, 132, 74, 120, 140, 77, 78, 79, 119, 81, 139, 83, 140, 85, 120, -1, 88, 120, 140, 141, 92, 93, 94, 64, 121, 97, 98, 121, 100, 70, 122, 103, 104, 74, 135, 135, 77, 78, 79, 111, 81, 139, 83, 139, 85, 135, 135, 88, 135, 135, 135, 92, 93, 94, 142, 95, 97, 98, 140, 100, 140, 140, 103, 104, 140, 105, 106, 140, 140, 141, 111, 140, 140, 64, 114, 115, 116, 117, 140, 70, 140, 140, 140, 74, 140, 140, 77, 78, 79, 140, 81, 140, 83, 140, 85, 41, 42, 88, 140, 140, 141, 92, 93, 94, 140, 140, 97, 98, 140, 100, 140, 140, 103, 104, 60, 140, 142, 141, 141, 141, 111, 141, 68, 69, 141, 141, 72, 141, 141, 141, 76, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 141, 143, 142, 95, 96, 142, 140, 141, 143, 101, 95, 96, 142, 105, 106, 142, 101, 142, 142, 142, 105, 106, 114, 115, 116, 117, 50, 51, 142, 114, 115, 116, 117, 142, 123, 142, 125, 126, 127, 128, 129, 130, 131, 142, 136, 142, 144, 143, 137, 138, 142, 136, 95, 96, 143, 143, 145, 142, 101, 143, 143, 143, 105, 106, 143, 143, 143, 143, 143, 143, 143, 114, 115, 116, 117, 35, 36, 37, 38, 39, 40, 41, 42, 43, 95, 143, 143, 143, 95, 143, 143, 143, 143, 136, 105, 106, 120, 143, 105, 106, 144, 95, 143, 114, 115, 116, 117, 114, 115, 116, 117, 105, 106, 143, 143, 143, 143, 95, 143, -1, 114, 115, 116, 117, 143, 143, 143, 105, 106, 143, 95, 142, 80, 146, 95, 142, 114, 115, 116, 117, 105, 106, 144, 144, 105, 106, 144, 95, 142, 114, 115, 116, 117, 114, 115, 116, 117, 105, 106, 82, 144, 144, 144, 144, 142, 84, 114, 115, 116, 117, 144, 70, 95, 72, 144, 144, 95, 142, 144, 146, 144, 142, 105, 106, 146, 144, 105, 106, 8, 9, 10, 114, 115, 116, 117, 114, 115, 116, 117, 144, 144, 144, 144, 144, 24, 104, 26, 27, 28, 29, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, -1, 144, 144, 144, -1, -1, -1, 146, 146, 146, 146, 146, 146, 146, 146, -1, 136, 147, -1, 139, -1, -1, -1, 143, -1, 145];\nPHP.Parser.prototype.yybase = [0, 574, 581, 623, 655, 2, 718, 402, 747, 659, 672, 688, 743, 701, 705, 483, 483, 483, 483, 483, 351, 356, 366, 366, 367, 366, 344, -2, -2, -2, 200, 200, 231, 231, 231, 231, 231, 231, 231, 231, 200, 231, 451, 482, 532, 316, 370, 115, 146, 285, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 44, 474, 429, 476, 481, 487, 488, 739, 740, 741, 734, 733, 416, 736, 539, 541, 342, 542, 543, 552, 557, 559, 536, 567, 737, 755, 569, 735, 738, 123, 123, 123, 123, 123, 123, 123, 123, 123, 122, 11, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 227, 227, 173, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 79, 178, 846, 8, -3, -3, -3, -3, 642, 706, 706, 706, 706, 157, 179, 242, 431, 431, 360, 431, 525, 368, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 350, 375, 315, 315, 652, 652, -81, -81, -81, -81, 251, 185, 188, 184, -62, 348, 195, 195, 195, 408, 392, 410, 1, 192, 129, 129, 129, -24, -24, -24, -24, 499, -24, -24, -24, 113, 108, 108, 12, 161, 349, 526, 271, 398, 529, 438, 130, 206, 265, 427, 76, 414, 427, 288, 295, 76, 166, 44, 262, 422, 141, 491, 372, 494, 413, 71, 92, 93, 267, 135, 100, 34, 415, 745, 746, 742, -38, 420, -10, 135, 147, 744, 498, 107, 26, 493, 144, 377, 363, 369, 332, 363, 400, 377, 588, 377, 376, 377, 360, 37, 582, 376, 377, 374, 376, 388, 363, 364, 412, 369, 377, 441, 443, 390, 106, 332, 377, 390, 377, 400, 64, 590, 591, 323, 592, 589, 593, 649, 608, 362, 500, 399, 407, 620, 625, 636, 365, 354, 614, 524, 425, 359, 355, 423, 570, 578, 357, 406, 414, 394, 352, 403, 531, 433, 403, 653, 434, 385, 417, 411, 444, 310, 318, 501, 425, 668, 757, 380, 637, 684, 403, 609, 387, 87, 325, 638, 382, 403, 639, 403, 696, 503, 615, 403, 697, 384, 435, 425, 352, 352, 352, 700, 66, 699, 583, 702, 707, 704, 748, 721, 749, 584, 750, 358, 583, 722, 751, 682, 215, 613, 422, 436, 389, 447, 221, 257, 752, 403, 403, 506, 499, 403, 395, 685, 397, 426, 753, 392, 391, 647, 683, 403, 418, 754, 221, 723, 587, 724, 450, 568, 507, 648, 509, 327, 725, 353, 497, 610, 454, 622, 455, 461, 404, 510, 373, 732, 612, 247, 361, 664, 463, 405, 692, 641, 464, 465, 511, 343, 437, 335, 409, 396, 665, 293, 467, 468, 472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 0, 0, 0, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 767, 123, 123, 123, 123, 123, 123, 123, 123, 0, 129, 129, 129, 129, -94, -94, -94, 767, 767, 767, 767, 767, 767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, 129, 129, 767, 767, -24, -24, -24, -24, -24, 108, 108, 108, -24, 108, 145, 145, 145, 108, 108, 108, 100, 100, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 376, 0, 0, 0, 145, 260, 260, 221, 260, 260, 135, 0, 0, 425, 376, 0, 364, 376, 0, 0, 0, 0, 0, 0, 531, 0, 87, 637, 241, 425, 0, 0, 0, 0, 0, 0, 0, 425, 289, 289, 306, 0, 358, 0, 0, 0, 306, 241, 0, 0, 221];\nPHP.Parser.prototype.yydefault = [3, 32767, 32767, 1, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 104, 96, 110, 95, 106, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 358, 358, 122, 122, 122, 122, 122, 122, 122, 122, 316, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 173, 173, 173, 32767, 348, 348, 348, 348, 348, 348, 348, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 363, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 232, 233, 235, 236, 172, 125, 349, 362, 171, 199, 201, 250, 200, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 176, 229, 228, 197, 313, 313, 316, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 198, 202, 204, 203, 219, 220, 217, 218, 175, 221, 222, 223, 224, 157, 157, 157, 357, 357, 32767, 357, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 158, 32767, 211, 212, 276, 276, 117, 117, 117, 117, 117, 32767, 32767, 32767, 32767, 284, 32767, 32767, 32767, 32767, 32767, 286, 32767, 32767, 206, 207, 205, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 285, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 334, 321, 272, 32767, 32767, 32767, 265, 32767, 107, 109, 32767, 32767, 32767, 32767, 302, 339, 32767, 32767, 32767, 17, 32767, 32767, 32767, 370, 334, 32767, 32767, 19, 32767, 32767, 32767, 32767, 227, 32767, 338, 332, 32767, 32767, 32767, 32767, 32767, 32767, 63, 32767, 32767, 32767, 32767, 32767, 63, 281, 63, 32767, 63, 32767, 315, 287, 32767, 63, 74, 32767, 72, 32767, 32767, 76, 32767, 63, 93, 93, 254, 315, 54, 63, 254, 63, 32767, 32767, 32767, 32767, 4, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 267, 32767, 323, 32767, 337, 336, 324, 32767, 265, 32767, 215, 194, 266, 32767, 196, 32767, 32767, 270, 273, 32767, 32767, 32767, 134, 32767, 268, 180, 32767, 32767, 32767, 32767, 365, 32767, 32767, 174, 32767, 32767, 32767, 130, 32767, 61, 332, 32767, 32767, 355, 32767, 32767, 332, 269, 208, 209, 210, 32767, 121, 32767, 310, 32767, 32767, 32767, 32767, 32767, 32767, 327, 32767, 333, 32767, 32767, 32767, 32767, 111, 32767, 302, 32767, 32767, 32767, 75, 32767, 32767, 178, 126, 32767, 32767, 364, 32767, 32767, 32767, 320, 32767, 32767, 32767, 32767, 32767, 62, 32767, 32767, 77, 32767, 32767, 32767, 32767, 332, 32767, 32767, 32767, 115, 32767, 169, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 332, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 4, 32767, 151, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 25, 25, 3, 137, 3, 137, 25, 101, 25, 25, 137, 93, 93, 25, 25, 25, 144, 25, 25, 25, 25, 25, 25, 25, 25];\nPHP.Parser.prototype.yygoto = [141, 141, 173, 173, 173, 173, 173, 173, 173, 173, 141, 173, 142, 143, 144, 148, 153, 155, 181, 175, 172, 172, 172, 172, 174, 174, 174, 174, 174, 174, 174, 168, 169, 170, 171, 179, 757, 758, 392, 760, 781, 782, 783, 784, 785, 786, 787, 789, 725, 145, 146, 147, 149, 150, 151, 152, 154, 177, 178, 180, 196, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 244, 245, 266, 267, 268, 430, 431, 432, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 156, 157, 158, 159, 176, 160, 194, 161, 162, 163, 164, 195, 165, 193, 139, 166, 167, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 551, 551, 551, 464, 491, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 407, 552, 552, 552, 810, 810, 662, 662, 662, 662, 662, 594, 283, 595, 510, 399, 399, 567, 679, 632, 849, 850, 863, 660, 714, 426, 222, 622, 622, 622, 622, 223, 617, 623, 494, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 465, 472, 514, 904, 398, 398, 425, 425, 459, 425, 419, 322, 421, 421, 393, 396, 412, 422, 428, 460, 463, 473, 481, 501, 5, 476, 284, 327, 1, 15, 2, 6, 7, 550, 550, 550, 8, 9, 10, 668, 16, 11, 17, 12, 18, 13, 19, 14, 704, 328, 881, 881, 643, 628, 626, 626, 624, 626, 526, 401, 652, 647, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 437, 438, 441, 447, 477, 479, 497, 290, 910, 910, 400, 400, 486, 880, 880, 263, 913, 910, 303, 255, 723, 306, 822, 821, 306, 896, 896, 896, 861, 304, 323, 410, 913, 913, 897, 316, 420, 769, 658, 559, 879, 671, 536, 324, 466, 565, 311, 311, 311, 801, 241, 676, 496, 439, 440, 442, 444, 448, 475, 631, 858, 311, 285, 286, 603, 495, 712, 0, 406, 321, 0, 0, 0, 314, 0, 0, 429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 411];\nPHP.Parser.prototype.yygcheck = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 6, 6, 6, 21, 21, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 71, 7, 7, 7, 35, 35, 35, 35, 35, 35, 35, 29, 44, 29, 35, 86, 86, 12, 12, 12, 12, 12, 12, 12, 12, 75, 40, 35, 35, 35, 35, 40, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 36, 36, 36, 104, 82, 82, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13, 42, 42, 42, 2, 13, 2, 13, 13, 5, 5, 5, 13, 13, 13, 54, 13, 13, 13, 13, 13, 13, 13, 13, 67, 67, 83, 83, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 52, 52, 52, 52, 52, 52, 52, 4, 105, 105, 89, 89, 94, 84, 84, 92, 105, 105, 26, 92, 71, 4, 91, 91, 4, 84, 84, 84, 97, 30, 70, 30, 105, 105, 102, 27, 30, 72, 50, 10, 84, 55, 46, 9, 30, 11, 90, 90, 90, 80, 30, 56, 30, 85, 85, 85, 85, 85, 85, 43, 96, 90, 44, 44, 34, 77, 69, -1, 4, 90, -1, -1, -1, 4, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71];\nPHP.Parser.prototype.yygbase = [0, 0, -286, 0, 10, 239, 130, 154, 0, -10, 25, -23, -29, -289, 0, -30, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 245, 84, -11, 142, -28, 0, 0, 0, -13, -88, -42, 0, 0, 0, -344, 0, -38, -12, -188, 0, 23, 0, 0, 0, 66, 0, 247, 0, 205, 24, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, -15, 85, 74, 70, 0, 0, 148, 0, -14, 0, 0, -6, 0, -35, 11, 47, 278, -77, 0, 0, 44, 68, 43, 38, 72, 94, 0, -16, 109, 0, 0, 0, 0, 87, 0, 170, 34, 0];\nPHP.Parser.prototype.yygdefault = [-32768, 362, 3, 546, 382, 570, 571, 572, 307, 305, 560, 566, 467, 4, 568, 140, 295, 575, 296, 500, 577, 414, 579, 580, 308, 309, 415, 315, 216, 593, 503, 313, 596, 357, 602, 301, 449, 383, 350, 461, 221, 423, 456, 630, 282, 638, 540, 646, 649, 450, 657, 352, 433, 434, 667, 672, 677, 680, 334, 325, 474, 684, 685, 256, 689, 511, 512, 703, 242, 711, 317, 724, 342, 788, 790, 397, 408, 484, 797, 326, 800, 384, 385, 386, 387, 435, 818, 815, 289, 866, 287, 443, 254, 853, 468, 356, 903, 862, 288, 388, 389, 302, 898, 341, 905, 912, 458];\nPHP.Parser.prototype.yylhs = [0, 1, 2, 2, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 10, 10, 10, 10, 9, 9, 11, 13, 13, 14, 14, 14, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 33, 33, 34, 27, 27, 30, 30, 6, 7, 7, 7, 37, 37, 37, 38, 38, 41, 41, 39, 39, 42, 42, 22, 22, 29, 29, 32, 32, 31, 31, 43, 23, 23, 23, 23, 44, 44, 45, 45, 46, 46, 20, 20, 16, 16, 47, 18, 18, 48, 17, 17, 19, 19, 36, 36, 49, 49, 50, 50, 51, 51, 51, 51, 52, 52, 53, 53, 54, 54, 24, 24, 55, 55, 55, 25, 25, 56, 56, 40, 40, 57, 57, 57, 57, 62, 62, 63, 63, 64, 64, 64, 64, 65, 66, 66, 61, 61, 58, 58, 60, 60, 68, 68, 67, 67, 67, 67, 67, 67, 59, 59, 69, 69, 26, 26, 21, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 71, 77, 77, 79, 79, 80, 81, 81, 81, 81, 81, 81, 86, 86, 35, 35, 35, 72, 72, 87, 87, 82, 82, 88, 88, 88, 88, 88, 73, 73, 73, 76, 76, 76, 78, 78, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 12, 12, 12, 12, 12, 12, 74, 74, 74, 74, 94, 94, 96, 96, 95, 95, 97, 97, 28, 28, 28, 28, 99, 99, 98, 98, 98, 98, 98, 100, 100, 84, 84, 89, 89, 83, 83, 101, 101, 101, 101, 90, 90, 90, 90, 85, 85, 91, 91, 91, 70, 70, 102, 102, 102, 75, 75, 103, 103, 104, 104, 104, 104, 92, 92, 92, 92, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106];\nPHP.Parser.prototype.yylen = [1, 1, 2, 0, 1, 3, 1, 1, 1, 1, 3, 5, 4, 3, 3, 3, 1, 1, 3, 2, 4, 3, 1, 3, 2, 0, 1, 1, 1, 1, 3, 7, 10, 5, 7, 9, 5, 2, 3, 2, 3, 2, 3, 3, 3, 3, 1, 2, 5, 7, 8, 10, 5, 1, 5, 3, 3, 2, 1, 2, 8, 1, 3, 0, 1, 9, 7, 6, 5, 1, 2, 2, 0, 2, 0, 2, 0, 2, 1, 3, 1, 4, 1, 4, 1, 4, 1, 3, 3, 3, 4, 4, 5, 0, 2, 4, 3, 1, 1, 1, 4, 0, 2, 5, 0, 2, 6, 0, 2, 0, 3, 1, 0, 1, 3, 3, 5, 0, 1, 1, 1, 1, 0, 1, 3, 1, 2, 3, 1, 1, 2, 4, 3, 1, 1, 3, 2, 0, 3, 3, 8, 3, 1, 3, 0, 2, 4, 5, 4, 4, 3, 1, 1, 1, 3, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 3, 1, 0, 1, 1, 6, 3, 4, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 4, 4, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 4, 3, 3, 2, 9, 10, 3, 0, 4, 1, 3, 2, 4, 6, 8, 4, 4, 4, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 0, 3, 3, 4, 4, 0, 2, 3, 0, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 3, 2, 2, 4, 3, 1, 3, 3, 3, 0, 2, 0, 1, 3, 1, 3, 1, 1, 1, 1, 1, 6, 4, 3, 6, 4, 4, 4, 1, 3, 1, 2, 1, 1, 4, 1, 3, 6, 4, 4, 4, 4, 1, 4, 0, 1, 1, 3, 1, 3, 1, 1, 4, 0, 0, 2, 3, 1, 3, 1, 4, 2, 2, 2, 1, 2, 1, 4, 3, 3, 3, 6, 3, 1, 1, 1];\n\nPHP.Parser.prototype.yyn0 = function () {\n  this.yyval = this.yyastk[this.stackPos];\n};\n\nPHP.Parser.prototype.yyn1 = function (attributes) {\n  this.yyval = this.Stmt_Namespace_postprocess(this.yyastk[this.stackPos - (1 - 1)]);\n};\n\nPHP.Parser.prototype.yyn2 = function (attributes) {\n  if (Array.isArray(this.yyastk[this.stackPos - (2 - 2)])) {\n    this.yyval = this.yyastk[this.stackPos - (2 - 1)].concat(this.yyastk[this.stackPos - (2 - 2)]);\n  } else {\n    this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n    this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n  }\n\n  ;\n};\n\nPHP.Parser.prototype.yyn3 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn4 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn5 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn6 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn7 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn8 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn9 = function (attributes) {\n  this.yyval = this.Node_Stmt_HaltCompiler(attributes);\n};\n\nPHP.Parser.prototype.yyn10 = function (attributes) {\n  this.yyval = this.Node_Stmt_Namespace(this.Node_Name(this.yyastk[this.stackPos - (3 - 2)], attributes), null, attributes);\n};\n\nPHP.Parser.prototype.yyn11 = function (attributes) {\n  this.yyval = this.Node_Stmt_Namespace(this.Node_Name(this.yyastk[this.stackPos - (5 - 2)], attributes), this.yyastk[this.stackPos - (5 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn12 = function (attributes) {\n  this.yyval = this.Node_Stmt_Namespace(null, this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn13 = function (attributes) {\n  this.yyval = this.Node_Stmt_Use(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn14 = function (attributes) {\n  this.yyval = this.Node_Stmt_Const(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn15 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn16 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn17 = function (attributes) {\n  this.yyval = this.Node_Stmt_UseUse(this.Node_Name(this.yyastk[this.stackPos - (1 - 1)], attributes), null, attributes);\n};\n\nPHP.Parser.prototype.yyn18 = function (attributes) {\n  this.yyval = this.Node_Stmt_UseUse(this.Node_Name(this.yyastk[this.stackPos - (3 - 1)], attributes), this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn19 = function (attributes) {\n  this.yyval = this.Node_Stmt_UseUse(this.Node_Name(this.yyastk[this.stackPos - (2 - 2)], attributes), null, attributes);\n};\n\nPHP.Parser.prototype.yyn20 = function (attributes) {\n  this.yyval = this.Node_Stmt_UseUse(this.Node_Name(this.yyastk[this.stackPos - (4 - 2)], attributes), this.yyastk[this.stackPos - (4 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn21 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn22 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn23 = function (attributes) {\n  this.yyval = this.Node_Const(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn24 = function (attributes) {\n  if (Array.isArray(this.yyastk[this.stackPos - (2 - 2)])) {\n    this.yyval = this.yyastk[this.stackPos - (2 - 1)].concat(this.yyastk[this.stackPos - (2 - 2)]);\n  } else {\n    this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n    this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n  }\n\n  ;\n};\n\nPHP.Parser.prototype.yyn25 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn26 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn27 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn28 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn29 = function (attributes) {\n  throw new Error('__halt_compiler() can only be used from the outermost scope');\n};\n\nPHP.Parser.prototype.yyn30 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn31 = function (attributes) {\n  this.yyval = this.Node_Stmt_If(this.yyastk[this.stackPos - (7 - 3)], {\n    'stmts': Array.isArray(this.yyastk[this.stackPos - (7 - 5)]) ? this.yyastk[this.stackPos - (7 - 5)] : [this.yyastk[this.stackPos - (7 - 5)]],\n    'elseifs': this.yyastk[this.stackPos - (7 - 6)],\n    'Else': this.yyastk[this.stackPos - (7 - 7)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn32 = function (attributes) {\n  this.yyval = this.Node_Stmt_If(this.yyastk[this.stackPos - (10 - 3)], {\n    'stmts': this.yyastk[this.stackPos - (10 - 6)],\n    'elseifs': this.yyastk[this.stackPos - (10 - 7)],\n    'else': this.yyastk[this.stackPos - (10 - 8)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn33 = function (attributes) {\n  this.yyval = this.Node_Stmt_While(this.yyastk[this.stackPos - (5 - 3)], this.yyastk[this.stackPos - (5 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn34 = function (attributes) {\n  this.yyval = this.Node_Stmt_Do(this.yyastk[this.stackPos - (7 - 5)], Array.isArray(this.yyastk[this.stackPos - (7 - 2)]) ? this.yyastk[this.stackPos - (7 - 2)] : [this.yyastk[this.stackPos - (7 - 2)]], attributes);\n};\n\nPHP.Parser.prototype.yyn35 = function (attributes) {\n  this.yyval = this.Node_Stmt_For({\n    'init': this.yyastk[this.stackPos - (9 - 3)],\n    'cond': this.yyastk[this.stackPos - (9 - 5)],\n    'loop': this.yyastk[this.stackPos - (9 - 7)],\n    'stmts': this.yyastk[this.stackPos - (9 - 9)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn36 = function (attributes) {\n  this.yyval = this.Node_Stmt_Switch(this.yyastk[this.stackPos - (5 - 3)], this.yyastk[this.stackPos - (5 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn37 = function (attributes) {\n  this.yyval = this.Node_Stmt_Break(null, attributes);\n};\n\nPHP.Parser.prototype.yyn38 = function (attributes) {\n  this.yyval = this.Node_Stmt_Break(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn39 = function (attributes) {\n  this.yyval = this.Node_Stmt_Continue(null, attributes);\n};\n\nPHP.Parser.prototype.yyn40 = function (attributes) {\n  this.yyval = this.Node_Stmt_Continue(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn41 = function (attributes) {\n  this.yyval = this.Node_Stmt_Return(null, attributes);\n};\n\nPHP.Parser.prototype.yyn42 = function (attributes) {\n  this.yyval = this.Node_Stmt_Return(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn43 = function (attributes) {\n  this.yyval = this.Node_Stmt_Global(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn44 = function (attributes) {\n  this.yyval = this.Node_Stmt_Static(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn45 = function (attributes) {\n  this.yyval = this.Node_Stmt_Echo(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn46 = function (attributes) {\n  this.yyval = this.Node_Stmt_InlineHTML(this.yyastk[this.stackPos - (1 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn47 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn48 = function (attributes) {\n  this.yyval = this.Node_Stmt_Unset(this.yyastk[this.stackPos - (5 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn49 = function (attributes) {\n  this.yyval = this.Node_Stmt_Foreach(this.yyastk[this.stackPos - (7 - 3)], this.yyastk[this.stackPos - (7 - 5)], {\n    'keyVar': null,\n    'byRef': false,\n    'stmts': this.yyastk[this.stackPos - (7 - 7)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn50 = function (attributes) {\n  this.yyval = this.Node_Stmt_Foreach(this.yyastk[this.stackPos - (8 - 3)], this.yyastk[this.stackPos - (8 - 6)], {\n    'keyVar': null,\n    'byRef': true,\n    'stmts': this.yyastk[this.stackPos - (8 - 8)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn51 = function (attributes) {\n  this.yyval = this.Node_Stmt_Foreach(this.yyastk[this.stackPos - (10 - 3)], this.yyastk[this.stackPos - (10 - 8)], {\n    'keyVar': this.yyastk[this.stackPos - (10 - 5)],\n    'byRef': this.yyastk[this.stackPos - (10 - 7)],\n    'stmts': this.yyastk[this.stackPos - (10 - 10)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn52 = function (attributes) {\n  this.yyval = this.Node_Stmt_Declare(this.yyastk[this.stackPos - (5 - 3)], this.yyastk[this.stackPos - (5 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn53 = function (attributes) {\n  this.yyval = [];\n  /* means: no statement */\n};\n\nPHP.Parser.prototype.yyn54 = function (attributes) {\n  this.yyval = this.Node_Stmt_TryCatch(this.yyastk[this.stackPos - (5 - 3)], this.yyastk[this.stackPos - (5 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn55 = function (attributes) {\n  this.yyval = this.Node_Stmt_Throw(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn56 = function (attributes) {\n  this.yyval = this.Node_Stmt_Goto(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn57 = function (attributes) {\n  this.yyval = this.Node_Stmt_Label(this.yyastk[this.stackPos - (2 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn58 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn59 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn60 = function (attributes) {\n  this.yyval = this.Node_Stmt_Catch(this.yyastk[this.stackPos - (8 - 3)], this.yyastk[this.stackPos - (8 - 4)].substring(1), this.yyastk[this.stackPos - (8 - 7)], attributes);\n};\n\nPHP.Parser.prototype.yyn61 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn62 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn63 = function (attributes) {\n  this.yyval = false;\n};\n\nPHP.Parser.prototype.yyn64 = function (attributes) {\n  this.yyval = true;\n};\n\nPHP.Parser.prototype.yyn65 = function (attributes) {\n  this.yyval = this.Node_Stmt_Function(this.yyastk[this.stackPos - (9 - 3)], {\n    'byRef': this.yyastk[this.stackPos - (9 - 2)],\n    'params': this.yyastk[this.stackPos - (9 - 5)],\n    'stmts': this.yyastk[this.stackPos - (9 - 8)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn66 = function (attributes) {\n  this.yyval = this.Node_Stmt_Class(this.yyastk[this.stackPos - (7 - 2)], {\n    'type': this.yyastk[this.stackPos - (7 - 1)],\n    'Extends': this.yyastk[this.stackPos - (7 - 3)],\n    'Implements': this.yyastk[this.stackPos - (7 - 4)],\n    'stmts': this.yyastk[this.stackPos - (7 - 6)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn67 = function (attributes) {\n  this.yyval = this.Node_Stmt_Interface(this.yyastk[this.stackPos - (6 - 2)], {\n    'Extends': this.yyastk[this.stackPos - (6 - 3)],\n    'stmts': this.yyastk[this.stackPos - (6 - 5)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn68 = function (attributes) {\n  this.yyval = this.Node_Stmt_Trait(this.yyastk[this.stackPos - (5 - 2)], this.yyastk[this.stackPos - (5 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn69 = function (attributes) {\n  this.yyval = 0;\n};\n\nPHP.Parser.prototype.yyn70 = function (attributes) {\n  this.yyval = this.MODIFIER_ABSTRACT;\n};\n\nPHP.Parser.prototype.yyn71 = function (attributes) {\n  this.yyval = this.MODIFIER_FINAL;\n};\n\nPHP.Parser.prototype.yyn72 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn73 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (2 - 2)];\n};\n\nPHP.Parser.prototype.yyn74 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn75 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (2 - 2)];\n};\n\nPHP.Parser.prototype.yyn76 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn77 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (2 - 2)];\n};\n\nPHP.Parser.prototype.yyn78 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn79 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn80 = function (attributes) {\n  this.yyval = Array.isArray(this.yyastk[this.stackPos - (1 - 1)]) ? this.yyastk[this.stackPos - (1 - 1)] : [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn81 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 2)];\n};\n\nPHP.Parser.prototype.yyn82 = function (attributes) {\n  this.yyval = Array.isArray(this.yyastk[this.stackPos - (1 - 1)]) ? this.yyastk[this.stackPos - (1 - 1)] : [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn83 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 2)];\n};\n\nPHP.Parser.prototype.yyn84 = function (attributes) {\n  this.yyval = Array.isArray(this.yyastk[this.stackPos - (1 - 1)]) ? this.yyastk[this.stackPos - (1 - 1)] : [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn85 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 2)];\n};\n\nPHP.Parser.prototype.yyn86 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn87 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn88 = function (attributes) {\n  this.yyval = this.Node_Stmt_DeclareDeclare(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn89 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn90 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 3)];\n};\n\nPHP.Parser.prototype.yyn91 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 2)];\n};\n\nPHP.Parser.prototype.yyn92 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (5 - 3)];\n};\n\nPHP.Parser.prototype.yyn93 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn94 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn95 = function (attributes) {\n  this.yyval = this.Node_Stmt_Case(this.yyastk[this.stackPos - (4 - 2)], this.yyastk[this.stackPos - (4 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn96 = function (attributes) {\n  this.yyval = this.Node_Stmt_Case(null, this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn97 = function () {\n  this.yyval = this.yyastk[this.stackPos];\n};\n\nPHP.Parser.prototype.yyn98 = function () {\n  this.yyval = this.yyastk[this.stackPos];\n};\n\nPHP.Parser.prototype.yyn99 = function (attributes) {\n  this.yyval = Array.isArray(this.yyastk[this.stackPos - (1 - 1)]) ? this.yyastk[this.stackPos - (1 - 1)] : [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn100 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 2)];\n};\n\nPHP.Parser.prototype.yyn101 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn102 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn103 = function (attributes) {\n  this.yyval = this.Node_Stmt_ElseIf(this.yyastk[this.stackPos - (5 - 3)], Array.isArray(this.yyastk[this.stackPos - (5 - 5)]) ? this.yyastk[this.stackPos - (5 - 5)] : [this.yyastk[this.stackPos - (5 - 5)]], attributes);\n};\n\nPHP.Parser.prototype.yyn104 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn105 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn106 = function (attributes) {\n  this.yyval = this.Node_Stmt_ElseIf(this.yyastk[this.stackPos - (6 - 3)], this.yyastk[this.stackPos - (6 - 6)], attributes);\n};\n\nPHP.Parser.prototype.yyn107 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn108 = function (attributes) {\n  this.yyval = this.Node_Stmt_Else(Array.isArray(this.yyastk[this.stackPos - (2 - 2)]) ? this.yyastk[this.stackPos - (2 - 2)] : [this.yyastk[this.stackPos - (2 - 2)]], attributes);\n};\n\nPHP.Parser.prototype.yyn109 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn110 = function (attributes) {\n  this.yyval = this.Node_Stmt_Else(this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn111 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn112 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn113 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn114 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn115 = function (attributes) {\n  this.yyval = this.Node_Param(this.yyastk[this.stackPos - (3 - 3)].substring(1), null, this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn116 = function (attributes) {\n  this.yyval = this.Node_Param(this.yyastk[this.stackPos - (5 - 3)].substring(1), this.yyastk[this.stackPos - (5 - 5)], this.yyastk[this.stackPos - (5 - 1)], this.yyastk[this.stackPos - (5 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn117 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn118 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn119 = function (attributes) {\n  this.yyval = 'array';\n};\n\nPHP.Parser.prototype.yyn120 = function (attributes) {\n  this.yyval = 'callable';\n};\n\nPHP.Parser.prototype.yyn121 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn122 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn123 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn124 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn125 = function (attributes) {\n  this.yyval = this.Node_Arg(this.yyastk[this.stackPos - (1 - 1)], false, attributes);\n};\n\nPHP.Parser.prototype.yyn126 = function (attributes) {\n  this.yyval = this.Node_Arg(this.yyastk[this.stackPos - (2 - 2)], true, attributes);\n};\n\nPHP.Parser.prototype.yyn127 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn128 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn129 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (1 - 1)].substring(1), attributes);\n};\n\nPHP.Parser.prototype.yyn130 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn131 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn132 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn133 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn134 = function (attributes) {\n  this.yyval = this.Node_Stmt_StaticVar(this.yyastk[this.stackPos - (1 - 1)].substring(1), null, attributes);\n};\n\nPHP.Parser.prototype.yyn135 = function (attributes) {\n  this.yyval = this.Node_Stmt_StaticVar(this.yyastk[this.stackPos - (3 - 1)].substring(1), this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn136 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn137 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn138 = function (attributes) {\n  this.yyval = this.Node_Stmt_Property(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn139 = function (attributes) {\n  this.yyval = this.Node_Stmt_ClassConst(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn140 = function (attributes) {\n  this.yyval = this.Node_Stmt_ClassMethod(this.yyastk[this.stackPos - (8 - 4)], {\n    'type': this.yyastk[this.stackPos - (8 - 1)],\n    'byRef': this.yyastk[this.stackPos - (8 - 3)],\n    'params': this.yyastk[this.stackPos - (8 - 6)],\n    'stmts': this.yyastk[this.stackPos - (8 - 8)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn141 = function (attributes) {\n  this.yyval = this.Node_Stmt_TraitUse(this.yyastk[this.stackPos - (3 - 2)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn142 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn143 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn144 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn145 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn146 = function (attributes) {\n  this.yyval = this.Node_Stmt_TraitUseAdaptation_Precedence(this.yyastk[this.stackPos - (4 - 1)][0], this.yyastk[this.stackPos - (4 - 1)][1], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn147 = function (attributes) {\n  this.yyval = this.Node_Stmt_TraitUseAdaptation_Alias(this.yyastk[this.stackPos - (5 - 1)][0], this.yyastk[this.stackPos - (5 - 1)][1], this.yyastk[this.stackPos - (5 - 3)], this.yyastk[this.stackPos - (5 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn148 = function (attributes) {\n  this.yyval = this.Node_Stmt_TraitUseAdaptation_Alias(this.yyastk[this.stackPos - (4 - 1)][0], this.yyastk[this.stackPos - (4 - 1)][1], this.yyastk[this.stackPos - (4 - 3)], null, attributes);\n};\n\nPHP.Parser.prototype.yyn149 = function (attributes) {\n  this.yyval = this.Node_Stmt_TraitUseAdaptation_Alias(this.yyastk[this.stackPos - (4 - 1)][0], this.yyastk[this.stackPos - (4 - 1)][1], null, this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn150 = function (attributes) {\n  this.yyval = array(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)]);\n};\n\nPHP.Parser.prototype.yyn151 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn152 = function (attributes) {\n  this.yyval = array(null, this.yyastk[this.stackPos - (1 - 1)]);\n};\n\nPHP.Parser.prototype.yyn153 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn154 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn155 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn156 = function (attributes) {\n  this.yyval = this.MODIFIER_PUBLIC;\n};\n\nPHP.Parser.prototype.yyn157 = function (attributes) {\n  this.yyval = this.MODIFIER_PUBLIC;\n};\n\nPHP.Parser.prototype.yyn158 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn159 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn160 = function (attributes) {\n  this.Stmt_Class_verifyModifier(this.yyastk[this.stackPos - (2 - 1)], this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)] | this.yyastk[this.stackPos - (2 - 2)];\n};\n\nPHP.Parser.prototype.yyn161 = function (attributes) {\n  this.yyval = this.MODIFIER_PUBLIC;\n};\n\nPHP.Parser.prototype.yyn162 = function (attributes) {\n  this.yyval = this.MODIFIER_PROTECTED;\n};\n\nPHP.Parser.prototype.yyn163 = function (attributes) {\n  this.yyval = this.MODIFIER_PRIVATE;\n};\n\nPHP.Parser.prototype.yyn164 = function (attributes) {\n  this.yyval = this.MODIFIER_STATIC;\n};\n\nPHP.Parser.prototype.yyn165 = function (attributes) {\n  this.yyval = this.MODIFIER_ABSTRACT;\n};\n\nPHP.Parser.prototype.yyn166 = function (attributes) {\n  this.yyval = this.MODIFIER_FINAL;\n};\n\nPHP.Parser.prototype.yyn167 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn168 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn169 = function (attributes) {\n  this.yyval = this.Node_Stmt_PropertyProperty(this.yyastk[this.stackPos - (1 - 1)].substring(1), null, attributes);\n};\n\nPHP.Parser.prototype.yyn170 = function (attributes) {\n  this.yyval = this.Node_Stmt_PropertyProperty(this.yyastk[this.stackPos - (3 - 1)].substring(1), this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn171 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn172 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn173 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn174 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn175 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn176 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignList(this.yyastk[this.stackPos - (6 - 3)], this.yyastk[this.stackPos - (6 - 6)], attributes);\n};\n\nPHP.Parser.prototype.yyn177 = function (attributes) {\n  this.yyval = this.Node_Expr_Assign(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn178 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignRef(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn179 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignRef(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn180 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn181 = function (attributes) {\n  this.yyval = this.Node_Expr_Clone(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn182 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignPlus(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn183 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignMinus(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn184 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignMul(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn185 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignDiv(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn186 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignConcat(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn187 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignMod(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn188 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignBitwiseAnd(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn189 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignBitwiseOr(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn190 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignBitwiseXor(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn191 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignShiftLeft(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn192 = function (attributes) {\n  this.yyval = this.Node_Expr_AssignShiftRight(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn193 = function (attributes) {\n  this.yyval = this.Node_Expr_PostInc(this.yyastk[this.stackPos - (2 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn194 = function (attributes) {\n  this.yyval = this.Node_Expr_PreInc(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn195 = function (attributes) {\n  this.yyval = this.Node_Expr_PostDec(this.yyastk[this.stackPos - (2 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn196 = function (attributes) {\n  this.yyval = this.Node_Expr_PreDec(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn197 = function (attributes) {\n  this.yyval = this.Node_Expr_BooleanOr(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn198 = function (attributes) {\n  this.yyval = this.Node_Expr_BooleanAnd(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn199 = function (attributes) {\n  this.yyval = this.Node_Expr_LogicalOr(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn200 = function (attributes) {\n  this.yyval = this.Node_Expr_LogicalAnd(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn201 = function (attributes) {\n  this.yyval = this.Node_Expr_LogicalXor(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn202 = function (attributes) {\n  this.yyval = this.Node_Expr_BitwiseOr(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn203 = function (attributes) {\n  this.yyval = this.Node_Expr_BitwiseAnd(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn204 = function (attributes) {\n  this.yyval = this.Node_Expr_BitwiseXor(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn205 = function (attributes) {\n  this.yyval = this.Node_Expr_Concat(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn206 = function (attributes) {\n  this.yyval = this.Node_Expr_Plus(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn207 = function (attributes) {\n  this.yyval = this.Node_Expr_Minus(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn208 = function (attributes) {\n  this.yyval = this.Node_Expr_Mul(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn209 = function (attributes) {\n  this.yyval = this.Node_Expr_Div(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn210 = function (attributes) {\n  this.yyval = this.Node_Expr_Mod(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn211 = function (attributes) {\n  this.yyval = this.Node_Expr_ShiftLeft(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn212 = function (attributes) {\n  this.yyval = this.Node_Expr_ShiftRight(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn213 = function (attributes) {\n  this.yyval = this.Node_Expr_UnaryPlus(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn214 = function (attributes) {\n  this.yyval = this.Node_Expr_UnaryMinus(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn215 = function (attributes) {\n  this.yyval = this.Node_Expr_BooleanNot(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn216 = function (attributes) {\n  this.yyval = this.Node_Expr_BitwiseNot(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn217 = function (attributes) {\n  this.yyval = this.Node_Expr_Identical(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn218 = function (attributes) {\n  this.yyval = this.Node_Expr_NotIdentical(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn219 = function (attributes) {\n  this.yyval = this.Node_Expr_Equal(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn220 = function (attributes) {\n  this.yyval = this.Node_Expr_NotEqual(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn221 = function (attributes) {\n  this.yyval = this.Node_Expr_Smaller(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn222 = function (attributes) {\n  this.yyval = this.Node_Expr_SmallerOrEqual(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn223 = function (attributes) {\n  this.yyval = this.Node_Expr_Greater(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn224 = function (attributes) {\n  this.yyval = this.Node_Expr_GreaterOrEqual(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn225 = function (attributes) {\n  this.yyval = this.Node_Expr_Instanceof(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn226 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn227 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn228 = function (attributes) {\n  this.yyval = this.Node_Expr_Ternary(this.yyastk[this.stackPos - (5 - 1)], this.yyastk[this.stackPos - (5 - 3)], this.yyastk[this.stackPos - (5 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn229 = function (attributes) {\n  this.yyval = this.Node_Expr_Ternary(this.yyastk[this.stackPos - (4 - 1)], null, this.yyastk[this.stackPos - (4 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn230 = function (attributes) {\n  this.yyval = this.Node_Expr_Isset(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn231 = function (attributes) {\n  this.yyval = this.Node_Expr_Empty(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn232 = function (attributes) {\n  this.yyval = this.Node_Expr_Include(this.yyastk[this.stackPos - (2 - 2)], \"Node_Expr_Include\", attributes);\n};\n\nPHP.Parser.prototype.yyn233 = function (attributes) {\n  this.yyval = this.Node_Expr_Include(this.yyastk[this.stackPos - (2 - 2)], \"Node_Expr_IncludeOnce\", attributes);\n};\n\nPHP.Parser.prototype.yyn234 = function (attributes) {\n  this.yyval = this.Node_Expr_Eval(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn235 = function (attributes) {\n  this.yyval = this.Node_Expr_Include(this.yyastk[this.stackPos - (2 - 2)], \"Node_Expr_Require\", attributes);\n};\n\nPHP.Parser.prototype.yyn236 = function (attributes) {\n  this.yyval = this.Node_Expr_Include(this.yyastk[this.stackPos - (2 - 2)], \"Node_Expr_RequireOnce\", attributes);\n};\n\nPHP.Parser.prototype.yyn237 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_Int(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn238 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_Double(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn239 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_String(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn240 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_Array(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn241 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_Object(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn242 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_Bool(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn243 = function (attributes) {\n  this.yyval = this.Node_Expr_Cast_Unset(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn244 = function (attributes) {\n  this.yyval = this.Node_Expr_Exit(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn245 = function (attributes) {\n  this.yyval = this.Node_Expr_ErrorSuppress(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn246 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn247 = function (attributes) {\n  this.yyval = this.Node_Expr_Array(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn248 = function (attributes) {\n  this.yyval = this.Node_Expr_Array(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn249 = function (attributes) {\n  this.yyval = this.Node_Expr_ShellExec(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn250 = function (attributes) {\n  this.yyval = this.Node_Expr_Print(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn251 = function (attributes) {\n  this.yyval = this.Node_Expr_Closure({\n    'static': false,\n    'byRef': this.yyastk[this.stackPos - (9 - 2)],\n    'params': this.yyastk[this.stackPos - (9 - 4)],\n    'uses': this.yyastk[this.stackPos - (9 - 6)],\n    'stmts': this.yyastk[this.stackPos - (9 - 8)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn252 = function (attributes) {\n  this.yyval = this.Node_Expr_Closure({\n    'static': true,\n    'byRef': this.yyastk[this.stackPos - (10 - 3)],\n    'params': this.yyastk[this.stackPos - (10 - 5)],\n    'uses': this.yyastk[this.stackPos - (10 - 7)],\n    'stmts': this.yyastk[this.stackPos - (10 - 9)]\n  }, attributes);\n};\n\nPHP.Parser.prototype.yyn253 = function (attributes) {\n  this.yyval = this.Node_Expr_New(this.yyastk[this.stackPos - (3 - 2)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn254 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn255 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 3)];\n};\n\nPHP.Parser.prototype.yyn256 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn257 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn258 = function (attributes) {\n  this.yyval = this.Node_Expr_ClosureUse(this.yyastk[this.stackPos - (2 - 2)].substring(1), this.yyastk[this.stackPos - (2 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn259 = function (attributes) {\n  this.yyval = this.Node_Expr_FuncCall(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn260 = function (attributes) {\n  this.yyval = this.Node_Expr_StaticCall(this.yyastk[this.stackPos - (6 - 1)], this.yyastk[this.stackPos - (6 - 3)], this.yyastk[this.stackPos - (6 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn261 = function (attributes) {\n  this.yyval = this.Node_Expr_StaticCall(this.yyastk[this.stackPos - (8 - 1)], this.yyastk[this.stackPos - (8 - 4)], this.yyastk[this.stackPos - (8 - 7)], attributes);\n};\n\nPHP.Parser.prototype.yyn262 = function (attributes) {\n  if (this.yyastk[this.stackPos - (4 - 1)].type === \"Node_Expr_StaticPropertyFetch\") {\n    this.yyval = this.Node_Expr_StaticCall(this.yyastk[this.stackPos - (4 - 1)].Class, this.Node_Expr_Variable(this.yyastk[this.stackPos - (4 - 1)].name, attributes), this.yyastk[this.stackPos - (4 - 3)], attributes);\n  } else if (this.yyastk[this.stackPos - (4 - 1)].type === \"Node_Expr_ArrayDimFetch\") {\n    var tmp = this.yyastk[this.stackPos - (4 - 1)];\n\n    while (tmp.variable.type === \"Node_Expr_ArrayDimFetch\") {\n      tmp = tmp.variable;\n    }\n\n    this.yyval = this.Node_Expr_StaticCall(tmp.variable.Class, this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n    tmp.variable = this.Node_Expr_Variable(tmp.variable.name, attributes);\n  } else {\n    throw new Exception();\n  }\n};\n\nPHP.Parser.prototype.yyn263 = function (attributes) {\n  this.yyval = this.Node_Expr_FuncCall(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn264 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn265 = function (attributes) {\n  this.yyval = this.Node_Name('static', attributes);\n};\n\nPHP.Parser.prototype.yyn266 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn267 = function (attributes) {\n  this.yyval = this.Node_Name(this.yyastk[this.stackPos - (1 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn268 = function (attributes) {\n  this.yyval = this.Node_Name_FullyQualified(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn269 = function (attributes) {\n  this.yyval = this.Node_Name_Relative(this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn270 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn271 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn272 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn273 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn274 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn275 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn276 = function () {\n  this.yyval = this.yyastk[this.stackPos];\n};\n\nPHP.Parser.prototype.yyn277 = function (attributes) {\n  this.yyval = this.Node_Expr_PropertyFetch(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn278 = function (attributes) {\n  this.yyval = this.Node_Expr_PropertyFetch(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn279 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn280 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn281 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn282 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn283 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn284 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn285 = function (attributes) {\n  this.yyval = [this.Scalar_String_parseEscapeSequences(this.yyastk[this.stackPos - (1 - 1)], '`')];\n};\n\nPHP.Parser.prototype.yyn286 = function (attributes) {\n  ;\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn287 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn288 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn289 = function (attributes) {\n  this.yyval = this.Node_Scalar_LNumber(this.Scalar_LNumber_parse(this.yyastk[this.stackPos - (1 - 1)]), attributes);\n};\n\nPHP.Parser.prototype.yyn290 = function (attributes) {\n  this.yyval = this.Node_Scalar_DNumber(this.Scalar_DNumber_parse(this.yyastk[this.stackPos - (1 - 1)]), attributes);\n};\n\nPHP.Parser.prototype.yyn291 = function (attributes) {\n  this.yyval = this.Scalar_String_create(this.yyastk[this.stackPos - (1 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn292 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_LineConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn293 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_FileConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn294 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_DirConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn295 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_ClassConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn296 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_TraitConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn297 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_MethodConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn298 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_FuncConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn299 = function (attributes) {\n  this.yyval = {\n    type: \"Node_Scalar_NSConst\",\n    attributes: attributes\n  };\n};\n\nPHP.Parser.prototype.yyn300 = function (attributes) {\n  this.yyval = this.Node_Scalar_String(this.Scalar_String_parseDocString(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 2)]), attributes);\n};\n\nPHP.Parser.prototype.yyn301 = function (attributes) {\n  this.yyval = this.Node_Scalar_String('', attributes);\n};\n\nPHP.Parser.prototype.yyn302 = function (attributes) {\n  this.yyval = this.Node_Expr_ConstFetch(this.yyastk[this.stackPos - (1 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn303 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn304 = function (attributes) {\n  this.yyval = this.Node_Expr_ClassConstFetch(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn305 = function (attributes) {\n  this.yyval = this.Node_Expr_UnaryPlus(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn306 = function (attributes) {\n  this.yyval = this.Node_Expr_UnaryMinus(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn307 = function (attributes) {\n  this.yyval = this.Node_Expr_Array(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn308 = function (attributes) {\n  this.yyval = this.Node_Expr_Array(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn309 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn310 = function (attributes) {\n  this.yyval = this.Node_Expr_ClassConstFetch(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn311 = function (attributes) {\n  ;\n  this.yyval = this.Node_Scalar_Encapsed(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn312 = function (attributes) {\n  ;\n  this.yyval = this.Node_Scalar_Encapsed(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn313 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn314 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn315 = function () {\n  this.yyval = this.yyastk[this.stackPos];\n};\n\nPHP.Parser.prototype.yyn316 = function () {\n  this.yyval = this.yyastk[this.stackPos];\n};\n\nPHP.Parser.prototype.yyn317 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn318 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn319 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayItem(this.yyastk[this.stackPos - (3 - 3)], this.yyastk[this.stackPos - (3 - 1)], false, attributes);\n};\n\nPHP.Parser.prototype.yyn320 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayItem(this.yyastk[this.stackPos - (1 - 1)], null, false, attributes);\n};\n\nPHP.Parser.prototype.yyn321 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn322 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn323 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn324 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn325 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (6 - 2)], this.yyastk[this.stackPos - (6 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn326 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn327 = function (attributes) {\n  this.yyval = this.Node_Expr_PropertyFetch(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn328 = function (attributes) {\n  this.yyval = this.Node_Expr_MethodCall(this.yyastk[this.stackPos - (6 - 1)], this.yyastk[this.stackPos - (6 - 3)], this.yyastk[this.stackPos - (6 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn329 = function (attributes) {\n  this.yyval = this.Node_Expr_FuncCall(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn330 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn331 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn332 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn333 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn334 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn335 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (2 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn336 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn337 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn338 = function (attributes) {\n  this.yyval = this.Node_Expr_StaticPropertyFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn339 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn340 = function (attributes) {\n  this.yyval = this.Node_Expr_StaticPropertyFetch(this.yyastk[this.stackPos - (3 - 1)], this.yyastk[this.stackPos - (3 - 3)].substring(1), attributes);\n};\n\nPHP.Parser.prototype.yyn341 = function (attributes) {\n  this.yyval = this.Node_Expr_StaticPropertyFetch(this.yyastk[this.stackPos - (6 - 1)], this.yyastk[this.stackPos - (6 - 5)], attributes);\n};\n\nPHP.Parser.prototype.yyn342 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn343 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn344 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn345 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.yyastk[this.stackPos - (4 - 1)], this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn346 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (1 - 1)].substring(1), attributes);\n};\n\nPHP.Parser.prototype.yyn347 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn348 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn349 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn350 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn351 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn352 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn353 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn354 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn355 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (1 - 1)];\n};\n\nPHP.Parser.prototype.yyn356 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (4 - 3)];\n};\n\nPHP.Parser.prototype.yyn357 = function (attributes) {\n  this.yyval = null;\n};\n\nPHP.Parser.prototype.yyn358 = function (attributes) {\n  this.yyval = [];\n};\n\nPHP.Parser.prototype.yyn359 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn360 = function (attributes) {\n  this.yyastk[this.stackPos - (3 - 1)].push(this.yyastk[this.stackPos - (3 - 3)]);\n  this.yyval = this.yyastk[this.stackPos - (3 - 1)];\n};\n\nPHP.Parser.prototype.yyn361 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn362 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayItem(this.yyastk[this.stackPos - (3 - 3)], this.yyastk[this.stackPos - (3 - 1)], false, attributes);\n};\n\nPHP.Parser.prototype.yyn363 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayItem(this.yyastk[this.stackPos - (1 - 1)], null, false, attributes);\n};\n\nPHP.Parser.prototype.yyn364 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayItem(this.yyastk[this.stackPos - (4 - 4)], this.yyastk[this.stackPos - (4 - 1)], true, attributes);\n};\n\nPHP.Parser.prototype.yyn365 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayItem(this.yyastk[this.stackPos - (2 - 2)], null, true, attributes);\n};\n\nPHP.Parser.prototype.yyn366 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn367 = function (attributes) {\n  this.yyastk[this.stackPos - (2 - 1)].push(this.yyastk[this.stackPos - (2 - 2)]);\n  this.yyval = this.yyastk[this.stackPos - (2 - 1)];\n};\n\nPHP.Parser.prototype.yyn368 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (1 - 1)]];\n};\n\nPHP.Parser.prototype.yyn369 = function (attributes) {\n  this.yyval = [this.yyastk[this.stackPos - (2 - 1)], this.yyastk[this.stackPos - (2 - 2)]];\n};\n\nPHP.Parser.prototype.yyn370 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (1 - 1)].substring(1), attributes);\n};\n\nPHP.Parser.prototype.yyn371 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.Node_Expr_Variable(this.yyastk[this.stackPos - (4 - 1)].substring(1), attributes), this.yyastk[this.stackPos - (4 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn372 = function (attributes) {\n  this.yyval = this.Node_Expr_PropertyFetch(this.Node_Expr_Variable(this.yyastk[this.stackPos - (3 - 1)].substring(1), attributes), this.yyastk[this.stackPos - (3 - 3)], attributes);\n};\n\nPHP.Parser.prototype.yyn373 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn374 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (3 - 2)], attributes);\n};\n\nPHP.Parser.prototype.yyn375 = function (attributes) {\n  this.yyval = this.Node_Expr_ArrayDimFetch(this.Node_Expr_Variable(this.yyastk[this.stackPos - (6 - 2)], attributes), this.yyastk[this.stackPos - (6 - 4)], attributes);\n};\n\nPHP.Parser.prototype.yyn376 = function (attributes) {\n  this.yyval = this.yyastk[this.stackPos - (3 - 2)];\n};\n\nPHP.Parser.prototype.yyn377 = function (attributes) {\n  this.yyval = this.Node_Scalar_String(this.yyastk[this.stackPos - (1 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn378 = function (attributes) {\n  this.yyval = this.Node_Scalar_String(this.yyastk[this.stackPos - (1 - 1)], attributes);\n};\n\nPHP.Parser.prototype.yyn379 = function (attributes) {\n  this.yyval = this.Node_Expr_Variable(this.yyastk[this.stackPos - (1 - 1)].substring(1), attributes);\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Parser.prototype.Stmt_Namespace_postprocess = function (a) {\n  return a;\n};\n\nPHP.Parser.prototype.Node_Stmt_Echo = function () {\n  return {\n    type: \"Node_Stmt_Echo\",\n    exprs: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_If = function () {\n  return {\n    type: \"Node_Stmt_If\",\n    cond: arguments[0],\n    stmts: arguments[1].stmts,\n    elseifs: arguments[1].elseifs,\n    Else: arguments[1].Else || null,\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_For = function () {\n  return {\n    type: \"Node_Stmt_For\",\n    init: arguments[0].init,\n    cond: arguments[0].cond,\n    loop: arguments[0].loop,\n    stmts: arguments[0].stmts,\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Function = function () {\n  return {\n    type: \"Node_Stmt_Function\",\n    name: arguments[0],\n    byRef: arguments[1].byRef,\n    params: arguments[1].params,\n    stmts: arguments[1].stmts,\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Stmt_Class_verifyModifier = function () {};\n\nPHP.Parser.prototype.Node_Stmt_Namespace = function () {\n  return {\n    type: \"Node_Stmt_Namespace\",\n    name: arguments[0],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Use = function () {\n  return {\n    type: \"Node_Stmt_Use\",\n    name: arguments[0],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_UseUse = function () {\n  return {\n    type: \"Node_Stmt_UseUse\",\n    name: arguments[0],\n    as: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_TraitUseAdaptation_Precedence = function () {\n  return {\n    type: \"Node_Stmt_TraitUseAdaptation_Precedence\",\n    name: arguments[0],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_TraitUseAdaptation_Alias = function () {\n  return {\n    type: \"Node_Stmt_TraitUseAdaptation_Alias\",\n    name: arguments[0],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Trait = function () {\n  return {\n    type: \"Node_Stmt_Trait\",\n    name: arguments[0],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_TraitUse = function () {\n  return {\n    type: \"Node_Stmt_TraitUse\",\n    name: arguments[0],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Class = function () {\n  return {\n    type: \"Node_Stmt_Class\",\n    name: arguments[0],\n    Type: arguments[1].type,\n    Extends: arguments[1].Extends,\n    Implements: arguments[1].Implements,\n    stmts: arguments[1].stmts,\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_ClassMethod = function () {\n  return {\n    type: \"Node_Stmt_ClassMethod\",\n    name: arguments[0],\n    Type: arguments[1].type,\n    byRef: arguments[1].byRef,\n    params: arguments[1].params,\n    stmts: arguments[1].stmts,\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_ClassConst = function () {\n  return {\n    type: \"Node_Stmt_ClassConst\",\n    consts: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Interface = function () {\n  return {\n    type: \"Node_Stmt_Interface\",\n    name: arguments[0],\n    Extends: arguments[1].Extends,\n    stmts: arguments[1].stmts,\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Throw = function () {\n  return {\n    type: \"Node_Stmt_Throw\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Catch = function () {\n  return {\n    type: \"Node_Stmt_Catch\",\n    Type: arguments[0],\n    variable: arguments[1],\n    stmts: arguments[2],\n    attributes: arguments[3]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_TryCatch = function () {\n  return {\n    type: \"Node_Stmt_TryCatch\",\n    stmts: arguments[0],\n    catches: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Foreach = function () {\n  return {\n    type: \"Node_Stmt_Foreach\",\n    expr: arguments[0],\n    valueVar: arguments[1],\n    keyVar: arguments[2].keyVar,\n    byRef: arguments[2].byRef,\n    stmts: arguments[2].stmts,\n    attributes: arguments[3]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_While = function () {\n  return {\n    type: \"Node_Stmt_While\",\n    cond: arguments[0],\n    stmts: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Do = function () {\n  return {\n    type: \"Node_Stmt_Do\",\n    cond: arguments[0],\n    stmts: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Break = function () {\n  return {\n    type: \"Node_Stmt_Break\",\n    num: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Continue = function () {\n  return {\n    type: \"Node_Stmt_Continue\",\n    num: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Return = function () {\n  return {\n    type: \"Node_Stmt_Return\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Case = function () {\n  return {\n    type: \"Node_Stmt_Case\",\n    cond: arguments[0],\n    stmts: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Switch = function () {\n  return {\n    type: \"Node_Stmt_Switch\",\n    cond: arguments[0],\n    cases: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Else = function () {\n  return {\n    type: \"Node_Stmt_Else\",\n    stmts: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_ElseIf = function () {\n  return {\n    type: \"Node_Stmt_ElseIf\",\n    cond: arguments[0],\n    stmts: arguments[1],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_InlineHTML = function () {\n  return {\n    type: \"Node_Stmt_InlineHTML\",\n    value: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_StaticVar = function () {\n  return {\n    type: \"Node_Stmt_StaticVar\",\n    name: arguments[0],\n    def: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Static = function () {\n  return {\n    type: \"Node_Stmt_Static\",\n    vars: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Global = function () {\n  return {\n    type: \"Node_Stmt_Global\",\n    vars: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_PropertyProperty = function () {\n  return {\n    type: \"Node_Stmt_PropertyProperty\",\n    name: arguments[0],\n    def: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Property = function () {\n  return {\n    type: \"Node_Stmt_Property\",\n    Type: arguments[0],\n    props: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Stmt_Unset = function () {\n  return {\n    type: \"Node_Stmt_Unset\",\n    variables: arguments[0],\n    attributes: arguments[1]\n  };\n};\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012\n * @website http://hertzen.com\n */\n\n\nPHP.Parser.prototype.Node_Expr_Variable = function (a) {\n  return {\n    type: \"Node_Expr_Variable\",\n    name: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_FuncCall = function () {\n  return {\n    type: \"Node_Expr_FuncCall\",\n    func: arguments[0],\n    args: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_MethodCall = function () {\n  return {\n    type: \"Node_Expr_MethodCall\",\n    variable: arguments[0],\n    name: arguments[1],\n    args: arguments[2],\n    attributes: arguments[3]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_StaticCall = function () {\n  return {\n    type: \"Node_Expr_StaticCall\",\n    Class: arguments[0],\n    func: arguments[1],\n    args: arguments[2],\n    attributes: arguments[3]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Ternary = function () {\n  return {\n    type: \"Node_Expr_Ternary\",\n    cond: arguments[0],\n    If: arguments[1],\n    Else: arguments[2],\n    attributes: arguments[3]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignList = function () {\n  return {\n    type: \"Node_Expr_AssignList\",\n    assignList: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Assign = function () {\n  return {\n    type: \"Node_Expr_Assign\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignConcat = function () {\n  return {\n    type: \"Node_Expr_AssignConcat\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignMinus = function () {\n  return {\n    type: \"Node_Expr_AssignMinus\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignPlus = function () {\n  return {\n    type: \"Node_Expr_AssignPlus\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignDiv = function () {\n  return {\n    type: \"Node_Expr_AssignDiv\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignRef = function () {\n  return {\n    type: \"Node_Expr_AssignRef\",\n    variable: arguments[0],\n    refVar: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignMul = function () {\n  return {\n    type: \"Node_Expr_AssignMul\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_AssignMod = function () {\n  return {\n    type: \"Node_Expr_AssignMod\",\n    variable: arguments[0],\n    expr: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Plus = function () {\n  return {\n    type: \"Node_Expr_Plus\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Minus = function () {\n  return {\n    type: \"Node_Expr_Minus\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Mul = function () {\n  return {\n    type: \"Node_Expr_Mul\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Div = function () {\n  return {\n    type: \"Node_Expr_Div\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Mod = function () {\n  return {\n    type: \"Node_Expr_Mod\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Greater = function () {\n  return {\n    type: \"Node_Expr_Greater\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Equal = function () {\n  return {\n    type: \"Node_Expr_Equal\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_NotEqual = function () {\n  return {\n    type: \"Node_Expr_NotEqual\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Identical = function () {\n  return {\n    type: \"Node_Expr_Identical\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_NotIdentical = function () {\n  return {\n    type: \"Node_Expr_NotIdentical\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_GreaterOrEqual = function () {\n  return {\n    type: \"Node_Expr_GreaterOrEqual\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_SmallerOrEqual = function () {\n  return {\n    type: \"Node_Expr_SmallerOrEqual\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Concat = function () {\n  return {\n    type: \"Node_Expr_Concat\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Smaller = function () {\n  return {\n    type: \"Node_Expr_Smaller\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_PostInc = function () {\n  return {\n    type: \"Node_Expr_PostInc\",\n    variable: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_PostDec = function () {\n  return {\n    type: \"Node_Expr_PostDec\",\n    variable: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_PreInc = function () {\n  return {\n    type: \"Node_Expr_PreInc\",\n    variable: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_PreDec = function () {\n  return {\n    type: \"Node_Expr_PreDec\",\n    variable: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Include = function () {\n  return {\n    expr: arguments[0],\n    type: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_ArrayDimFetch = function () {\n  return {\n    type: \"Node_Expr_ArrayDimFetch\",\n    variable: arguments[0],\n    dim: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_StaticPropertyFetch = function () {\n  return {\n    type: \"Node_Expr_StaticPropertyFetch\",\n    Class: arguments[0],\n    name: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_ClassConstFetch = function () {\n  return {\n    type: \"Node_Expr_ClassConstFetch\",\n    Class: arguments[0],\n    name: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_StaticPropertyFetch = function () {\n  return {\n    type: \"Node_Expr_StaticPropertyFetch\",\n    Class: arguments[0],\n    name: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_ConstFetch = function () {\n  return {\n    type: \"Node_Expr_ConstFetch\",\n    name: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_ArrayItem = function () {\n  return {\n    type: \"Node_Expr_ArrayItem\",\n    value: arguments[0],\n    key: arguments[1],\n    byRef: arguments[2],\n    attributes: arguments[3]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Array = function () {\n  return {\n    type: \"Node_Expr_Array\",\n    items: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_PropertyFetch = function () {\n  return {\n    type: \"Node_Expr_PropertyFetch\",\n    variable: arguments[0],\n    name: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_New = function () {\n  return {\n    type: \"Node_Expr_New\",\n    Class: arguments[0],\n    args: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Print = function () {\n  return {\n    type: \"Node_Expr_Print\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Exit = function () {\n  return {\n    type: \"Node_Expr_Exit\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Cast_Bool = function () {\n  return {\n    type: \"Node_Expr_Cast_Bool\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Cast_Int = function () {\n  return {\n    type: \"Node_Expr_Cast_Int\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Cast_String = function () {\n  return {\n    type: \"Node_Expr_Cast_String\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Cast_Double = function () {\n  return {\n    type: \"Node_Expr_Cast_Double\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Cast_Array = function () {\n  return {\n    type: \"Node_Expr_Cast_Array\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Cast_Object = function () {\n  return {\n    type: \"Node_Expr_Cast_Object\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_ErrorSuppress = function () {\n  return {\n    type: \"Node_Expr_ErrorSuppress\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Isset = function () {\n  return {\n    type: \"Node_Expr_Isset\",\n    variables: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_UnaryMinus = function () {\n  return {\n    type: \"Node_Expr_UnaryMinus\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_UnaryPlus = function () {\n  return {\n    type: \"Node_Expr_UnaryPlus\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Empty = function () {\n  return {\n    type: \"Node_Expr_Empty\",\n    variable: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BooleanOr = function () {\n  return {\n    type: \"Node_Expr_BooleanOr\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_LogicalOr = function () {\n  return {\n    type: \"Node_Expr_LogicalOr\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_LogicalAnd = function () {\n  return {\n    type: \"Node_Expr_LogicalAnd\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_LogicalXor = function () {\n  return {\n    type: \"Node_Expr_LogicalXor\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BitwiseAnd = function () {\n  return {\n    type: \"Node_Expr_BitwiseAnd\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BitwiseOr = function () {\n  return {\n    type: \"Node_Expr_BitwiseOr\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BitwiseXor = function () {\n  return {\n    type: \"Node_Expr_BitwiseXor\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BitwiseNot = function () {\n  return {\n    type: \"Node_Expr_BitwiseNot\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BooleanNot = function () {\n  return {\n    type: \"Node_Expr_BooleanNot\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_BooleanAnd = function () {\n  return {\n    type: \"Node_Expr_BooleanAnd\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Instanceof = function () {\n  return {\n    type: \"Node_Expr_Instanceof\",\n    left: arguments[0],\n    right: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Expr_Clone = function () {\n  return {\n    type: \"Node_Expr_Clone\",\n    expr: arguments[0],\n    attributes: arguments[1]\n  };\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 20.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Parser.prototype.Scalar_LNumber_parse = function (a) {\n  return a;\n};\n\nPHP.Parser.prototype.Scalar_DNumber_parse = function (a) {\n  return a;\n};\n\nPHP.Parser.prototype.Scalar_String_parseDocString = function () {\n  return '\"' + arguments[1].replace(/([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"/g, '$1\\\\\"') + '\"';\n};\n\nPHP.Parser.prototype.Node_Scalar_String = function () {\n  return {\n    type: \"Node_Scalar_String\",\n    value: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Scalar_String_create = function () {\n  return {\n    type: \"Node_Scalar_String\",\n    value: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Scalar_LNumber = function () {\n  return {\n    type: \"Node_Scalar_LNumber\",\n    value: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Scalar_DNumber = function () {\n  return {\n    type: \"Node_Scalar_DNumber\",\n    value: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Scalar_Encapsed = function () {\n  return {\n    type: \"Node_Scalar_Encapsed\",\n    parts: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Name = function () {\n  return {\n    type: \"Node_Name\",\n    parts: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Name_FullyQualified = function () {\n  return {\n    type: \"Node_Name_FullyQualified\",\n    parts: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Name_Relative = function () {\n  return {\n    type: \"Node_Name_Relative\",\n    parts: arguments[0],\n    attributes: arguments[1]\n  };\n};\n\nPHP.Parser.prototype.Node_Param = function () {\n  return {\n    type: \"Node_Param\",\n    name: arguments[0],\n    def: arguments[1],\n    Type: arguments[2],\n    byRef: arguments[3],\n    attributes: arguments[4]\n  };\n};\n\nPHP.Parser.prototype.Node_Arg = function () {\n  return {\n    type: \"Node_Name\",\n    value: arguments[0],\n    byRef: arguments[1],\n    attributes: arguments[2]\n  };\n};\n\nPHP.Parser.prototype.Node_Const = function () {\n  return {\n    type: \"Node_Const\",\n    name: arguments[0],\n    value: arguments[1],\n    attributes: arguments[2]\n  };\n};\n/* \n * based on node-iniparser Copyright (c) 2009-2010 Jordy van Gelder <jordyvangelder@gmail.com>\n * The MIT License\n */\n\n\nPHP.ini = function (contents) {\n  var regex = {\n    section: /^\\s*\\[\\s*([^\\]]*)\\s*\\]\\s*$/,\n    param: /^\\s*([\\w\\.\\-\\_]+)\\s*=\\s*\"?(.*?)\"?\\s*$/,\n    comment: /^\\s*;.*$/\n  },\n      section = null,\n      value = {};\n  contents.toString().split(/\\r\\n|\\r|\\n/).forEach(function (line) {\n    var match;\n\n    if (regex.comment.test(line)) {\n      return;\n    } else if (regex.param.test(line)) {\n      match = line.match(regex.param);\n\n      if (section) {\n        value[section][match[1]] = match[2];\n      } else {\n        value[match[1]] = match[2];\n      }\n    } else if (regex.section.test(line)) {\n      match = line.match(regex.section);\n      value[match[1]] = {};\n      section = match[1];\n    } else if (line.length === 0 && section) {\n      section = null;\n    }\n  });\n  return value;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.RAWPost = function (content) {\n  var lines = content.split(/\\r\\n|\\r|\\n/),\n      CONTENT_TYPE = \"Content-Type:\",\n      CONTENT_DISPOSITION = \"Content-Disposition:\",\n      BOUNDARY = \"boundary=\",\n      item,\n      items = [],\n      startCapture,\n      itemValue,\n      boundary,\n      storedFiles = [],\n      emptyFiles = [],\n      totalFiles = 0,\n      errors = [],\n      post;\n\n  function is(part, item) {\n    return part !== undefined && part.substring(0, item.length) === item;\n  }\n\n  lines.forEach(function (line) {\n    var parts = line.split(\";\");\n\n    if (boundary === line.replace(/-/g, \"\").trim()) {\n      if (item !== undefined) {\n        item.value = itemValue;\n        items.push(item);\n      }\n\n      startCapture = false;\n      itemValue = \"\";\n      item = {};\n    } else if (is(parts[0], CONTENT_TYPE)) {\n      if (item !== undefined) {\n        item.contentType = parts[0].substring(CONTENT_TYPE.length).trim();\n      }\n\n      parts[1] = parts[1] !== undefined ? parts[1].trim() : undefined;\n\n      if (parts[0].substring(CONTENT_TYPE.length).trim() === \"multipart/form-data\") {\n        if (is(parts[1], BOUNDARY)) {\n          var part = parts[1].split(\",\");\n          part = part[0];\n          boundary = part.substring(BOUNDARY.length).replace(/[-]/g, \"\").trim(); // starts OR finishes with quotes\n\n          if (boundary.substring(0, 1) === '\"' || boundary.substr(-1, 1) === '\"') {\n            // starts AND finishes with quotes\n            if (boundary.substring(0, 1) === '\"' && boundary.substr(-1, 1) === '\"') {\n              boundary = boundary.substring(1, boundary.length - 1);\n            } else {\n              errors.push([\"Invalid boundary in multipart/form-data POST data\", PHP.Constants.E_WARNING, true]);\n            }\n          }\n        } else {\n          errors.push([\"Missing boundary in multipart/form-data POST data\", PHP.Constants.E_WARNING, true]);\n        }\n      }\n    } else if (is(parts[0], CONTENT_DISPOSITION)) {\n      if (item !== undefined) {\n        item.contentDisposition = parts[0].substring(CONTENT_DISPOSITION.length).trim();\n        parts.shift();\n        parts.forEach(function (part) {\n          var vals = part.split(\"=\");\n\n          if (vals.length === 2) {\n            var val = vals[1].trim();\n            val = val.replace(/\\\\\\\\/g, \"\\\\\");\n\n            if (/^('|\").*('|\")$/.test(val)) {\n              var quote = val.substring(0, 1);\n              val = val.substring(1, val.length - 1);\n              val = val.replace(new RegExp(\"\\\\\\\\\" + quote, \"g\"), quote);\n            }\n\n            item[vals[0].trim()] = val;\n          }\n        });\n      }\n\n      if (parts.length === 0 && item !== undefined) {\n        item.garbled = true;\n      }\n    } else if (startCapture) {\n      if (line.length === 0 && itemValue !== undefined && itemValue.length > 0) {\n        line = \"\\n\";\n      }\n\n      itemValue += line;\n    } else {\n      startCapture = true;\n    }\n  });\n\n  if (item !== undefined && Object.keys(item).length > 0) {\n    item.value = itemValue;\n    item.contentType = \"\";\n    items.push(item);\n  }\n\n  return {\n    Post: function Post() {\n      var arr = {};\n      items.forEach(function (item) {\n        if (item.filename === undefined) {\n          if (item.garbled === true) {\n            errors.push([\"File Upload Mime headers garbled\", PHP.Constants.E_WARNING, true]);\n            return;\n          }\n\n          arr[item.name] = item.value;\n        }\n      });\n      post = arr;\n      return arr;\n    },\n    Files: function Files(max_filesize, max_files, path) {\n      var arr = {};\n      items.forEach(function (item, index) {\n        if (item.filename !== undefined) {\n          if (!/^[a-z0-9]+\\[.*[a-z]+.*\\]/i.test(item.name)) {\n            var error = 0;\n\n            if (item.filename.length === 0) {\n              error = PHP.Constants.UPLOAD_ERR_NO_FILE;\n            } else if (post.MAX_FILE_SIZE !== undefined && post.MAX_FILE_SIZE < item.value.length) {\n              error = PHP.Constants.UPLOAD_ERR_FORM_SIZE;\n            } else if (item.value.length > max_filesize) {\n              error = PHP.Constants.UPLOAD_ERR_INI_SIZE;\n            } else if (item.contentType.length === 0) {\n              error = PHP.Constants.UPLOAD_ERR_PARTIAL;\n            }\n\n            item.filename = item.filename.substring(item.filename.lastIndexOf(\"/\") + 1);\n            item.filename = item.filename.substring(item.filename.lastIndexOf(\"\\\\\") + 1);\n\n            if (/^[a-z0-9]+\\[\\d*\\]/i.test(item.name)) {\n              if (!/^[a-z0-9]+\\[\\d*\\]$/i.test(item.name)) {\n                // malicious input\n                return;\n              }\n\n              var name = item.name.substring(0, item.name.indexOf(\"[\")); //replace(/\\[\\]/g,\"\");\n\n              if (arr[name] === undefined) {\n                arr[name] = {\n                  name: [],\n                  type: [],\n                  tmp_name: [],\n                  error: [],\n                  size: []\n                };\n              }\n\n              arr[name].name.push(item.filename);\n              arr[name].type.push(error ? \"\" : item.contentType);\n              arr[name].tmp_name.push(error ? \"\" : path + item.filename);\n              arr[name].error.push(error);\n              arr[name].size.push(error ? 0 : item.value.length);\n            } else {\n              arr[item.name === undefined ? index : item.name] = {\n                name: item.filename,\n                type: error ? \"\" : item.contentType,\n                tmp_name: error ? \"\" : path + item.filename,\n                error: error,\n                size: error ? 0 : item.value.length\n              };\n            } // store file\n\n\n            if (!error) {\n              if (item.value.length === 0) {\n                emptyFiles.push({\n                  real: item.name === undefined ? index : item.name,\n                  name: path + item.filename,\n                  content: item.value\n                });\n              } else {\n                storedFiles.push({\n                  name: path + item.filename,\n                  content: item.value\n                });\n                totalFiles++;\n              }\n            }\n          }\n        }\n      });\n\n      while (totalFiles < max_files && emptyFiles.length > 0) {\n        var item = emptyFiles.shift();\n        storedFiles.push(item);\n        totalFiles++;\n      } // no room\n\n\n      emptyFiles.forEach(function (file) {\n        var item = arr[file.real];\n        item.error = 5;\n        item.tmp_name = \"\";\n        item.type = \"\";\n        errors.push([\"No file uploaded in Unknown on line 0\", PHP.Constants.E_NOTICE]);\n        errors.push([\"No file uploaded in Unknown on line 0\", PHP.Constants.E_NOTICE]);\n        errors.push([\"Uploaded file size 0 - file [\" + file.real + \"=\" + item.name + \"] not saved in Unknown on line 0\", PHP.Constants.E_WARNING]);\n      });\n      return arr;\n    },\n    WriteFiles: function WriteFiles(func) {\n      storedFiles.forEach(function (item) {\n        func(item.name, item.content);\n      });\n    },\n    Error: function Error(func, file) {\n      errors.forEach(function (err) {\n        func(err[0] + (err[2] === true ? \" in \" + file : \"\"), err[1]);\n      });\n    },\n    Raw: function Raw() {\n      lines = content.split(/\\r\\n|\\r|\\n/);\n      lines.shift();\n      lines.pop();\n      return lines.join(\"\\n\");\n    }\n  };\n};\n\nPHP.VM = function (src, opts) {\n  var $ = PHP.VM.VariableHandler(this);\n\n  var $$ = function $$(arg) {\n    var item = new PHP.VM.Variable(arg);\n    item[PHP.Compiler.prototype.NAV] = true;\n    return item;\n  },\n      COMPILER = PHP.Compiler.prototype,\n      ENV = this;\n\n  this.ENV = ENV;\n  PHP.VM.Variable.prototype.ENV = ENV;\n  ENV[PHP.Compiler.prototype.FILESYSTEM] = opts.filesystem === undefined ? {} : opts.filesystem; // bind global variablehandler to ENV\n\n  ENV[PHP.Compiler.prototype.GLOBAL] = $;\n  ENV[PHP.Compiler.prototype.CONSTANTS] = PHP.VM.Constants(PHP.Constants, ENV);\n  ENV.$ini = Object.create(opts.ini);\n  ENV.$locale = {\n    decimal_point: \".\",\n    thousands_sep: \",\"\n  };\n\n  ENV.$Included = function () {\n    var files = [];\n    return {\n      Include: function Include(file) {\n        files.push(file.toLowerCase());\n      },\n      Included: function Included(file) {\n        return files.indexOf(file.toLowerCase()) !== -1;\n      }\n    };\n  }();\n\n  ENV.$Class = function (declaredClasses) {\n    var classRegistry = {},\n        COMPILER = PHP.Compiler.prototype,\n        VARIABLE = PHP.VM.Variable.prototype,\n        magicConstants = {},\n        initiatedClasses = [],\n        undefinedConstants = {},\n        declaredClasses = [],\n        autoloadedClasses = [],\n        classHandler = new PHP.VM.Class(ENV, classRegistry, magicConstants, initiatedClasses, undefinedConstants, declaredClasses);\n\n    ENV[COMPILER.MAGIC_CONSTANTS] = function (constantName) {\n      return new PHP.VM.Variable(magicConstants[constantName]);\n    };\n\n    var methods = {\n      Shutdown: function Shutdown() {\n        initiatedClasses.forEach(function (classObj) {\n          classObj[COMPILER.CLASS_DESTRUCT](ENV, true);\n        });\n      },\n      __autoload: function __autoload(name) {\n        if (typeof ENV.__autoload === \"function\" && autoloadedClasses.indexOf(name.toLowerCase()) === -1) {\n          autoloadedClasses.push(name.toLowerCase());\n\n          ENV.__autoload(new PHP.VM.Variable(name));\n        }\n\n        return methods.Exists(name);\n      },\n      Inherits: function Inherits(obj, name) {\n        do {\n          if (obj[COMPILER.CLASS_NAME] === name) {\n            return true;\n          }\n\n          obj = Object.getPrototypeOf(obj);\n        } while (obj !== undefined && obj instanceof PHP.VM.ClassPrototype);\n\n        return false;\n      },\n      INew: function INew(name, exts, func) {\n        return classHandler(name, PHP.VM.Class.INTERFACE, exts, func);\n      },\n      DeclaredClasses: function DeclaredClasses() {\n        return declaredClasses;\n      },\n      New: function New() {\n        return classHandler.apply(null, arguments);\n      },\n      Exists: function Exists(name) {\n        return classRegistry[name.toLowerCase()] !== undefined;\n      },\n      ConstantGet: function ConstantGet(className, state, constantName) {\n        if (!/^(self|parent)$/i.test(className) && classRegistry[className.toLowerCase()] === undefined) {\n          if (undefinedConstants[className + \"::\" + constantName] === undefined) {\n            var variable = new PHP.VM.Variable();\n            variable[VARIABLE.CLASS_CONSTANT] = true;\n\n            variable[VARIABLE.REGISTER_GETTER] = function () {\n              if (classRegistry[className.toLowerCase()] === undefined) {\n                ENV[COMPILER.ERROR](\"Class '\" + className + \"' not found\", PHP.Constants.E_ERROR, true);\n              }\n            };\n\n            variable[VARIABLE.DEFINED] = className + \"::$\" + constantName;\n            undefinedConstants[className + \"::\" + constantName] = variable;\n          }\n\n          return undefinedConstants[className + \"::\" + constantName];\n        } else if (/^(self|parent)$/i.test(className)) {\n          if (/^(self)$/i.test(className)) {\n            return (typeof state === \"function\" ? state.prototype : state)[COMPILER.CLASS_CONSTANT_FETCH](state, constantName);\n          } else {\n            return Object.getPrototypeOf(typeof state === \"function\" ? state.prototype : state)[COMPILER.CLASS_CONSTANT_FETCH](state, constantName);\n          }\n        } else {\n          return methods.Get(className, state)[COMPILER.CLASS_CONSTANT_FETCH](state, constantName);\n        }\n      },\n      Get: function Get(className, state, isInterface) {\n        if (!/^(self|parent)$/i.test(className)) {\n          if (classRegistry[className.toLowerCase()] === undefined && methods.__autoload(className) === false) {\n            ENV[COMPILER.ERROR]((isInterface === true ? \"Interface\" : \"Class\") + \" '\" + className + \"' not found\", PHP.Constants.E_ERROR, true);\n          }\n\n          if (state !== undefined) {\n            return classRegistry[className.toLowerCase()].prototype;\n          } else {\n            return classRegistry[className.toLowerCase()];\n          }\n        } else if (/^self$/i.test(className)) {\n          return state.prototype; //      return Object.getPrototypeOf( state );\n        } else if (/parent/i.test(className)) {\n          return Object.getPrototypeOf(state.prototype); //   return Object.getPrototypeOf( Object.getPrototypeOf( state ) );\n        } else {}\n      }\n    };\n    return methods;\n  }();\n\n  ENV[PHP.Compiler.prototype.RESOURCES] = PHP.VM.ResourceManager(ENV);\n  ENV.$Array = new PHP.VM.Array(ENV);\n  var variables_order = this.$ini.variables_order;\n  this.FUNCTION_REFS = {};\n  $('php_errormsg').$ = new PHP.VM.Variable();\n  ENV[PHP.Compiler.prototype.FILE_PATH] = PHP.Utils.Path(opts.SERVER.SCRIPT_FILENAME);\n  this.OUTPUT_BUFFERS = [\"\"];\n  this.$obreset();\n  this.$ErrorReset();\n  this.$strict = \"\";\n  this.INPUT_BUFFER = opts.RAW_POST; // todo add error reporting level parser\n\n  if (isNaN(this.$ini.error_reporting - 0)) {\n    var lvl = this.$ini.error_reporting;\n    [\"E_ERROR\", \"E_RECOVERABLE_ERROR\", \"E_WARNING\", \"E_PARSE\", \"E_NOTICE\", \"E_STRICT\", \"E_DEPRECATED\", \"E_CORE_ERROR\", \"E_CORE_WARNING\", \"E_COMPILE_ERROR\", \"E_COMPILE_WARNING\", \"E_USER_ERROR\", \"E_USER_WARNING\", \"E_USER_NOTICE\", \"E_USER_DEPRECATED\", \"E_ALL\"].forEach(function (err) {\n      lvl = lvl.replace(err, PHP.Constants[err]);\n    });\n    this.$ini.error_reporting = eval(lvl);\n  }\n\n  this.error_reporting(new PHP.VM.Variable(this.$ini.error_reporting));\n  $('$__FILE__').$ = opts.SERVER.SCRIPT_FILENAME;\n  $('$__DIR__').$ = ENV[PHP.Compiler.prototype.FILE_PATH];\n  var post_max_size;\n\n  if ((post_max_size = PHP.Utils.Filesize(this.$ini.post_max_size)) > opts.RAW_POST.length || post_max_size == 0) {\n    if (this.$ini.enable_post_data_reading != 0) {\n      $('_POST').$ = PHP.VM.Array.fromObject.call(this, variables_order.indexOf(\"P\") !== -1 ? opts.POST : {}).$;\n      $('HTTP_RAW_POST_DATA').$ = opts.RAW_POST;\n    } else {\n      $('_POST').$ = PHP.VM.Array.fromObject.call(this, {}).$;\n    }\n  } else {\n    $('_POST').$ = PHP.VM.Array.fromObject.call(this, {}).$;\n\n    if (this.$ini.always_populate_raw_post_data == 1) {\n      ENV[PHP.Compiler.prototype.ERROR](\"Unknown: POST Content-Length of \" + opts.RAW_POST.length + \" bytes exceeds the limit of \" + post_max_size + \" bytes in Unknown on line 0\", PHP.Constants.E_WARNING);\n      ENV[PHP.Compiler.prototype.ERROR](\"Cannot modify header information - headers already sent in Unknown on line 0\", PHP.Constants.E_WARNING);\n    } else {\n      ENV[PHP.Compiler.prototype.ERROR](\"POST Content-Length of \" + opts.RAW_POST.length + \" bytes exceeds the limit of \" + post_max_size + \" bytes in Unknown on line 0\", PHP.Constants.E_WARNING);\n    }\n  }\n\n  $('_GET').$ = PHP.VM.Array.fromObject.call(this, variables_order.indexOf(\"G\") !== -1 ? opts.GET : {}).$;\n  $('_SERVER').$ = PHP.VM.Array.fromObject.call(this, variables_order.indexOf(\"S\") !== -1 ? opts.SERVER : {}).$;\n  $('_FILES').$ = PHP.VM.Array.fromObject.call(this, variables_order.indexOf(\"P\") !== -1 && this.$ini.enable_post_data_reading != 0 && this.$ini.file_uploads == 1 ? opts.FILES : {}).$;\n  $('_ENV').$ = PHP.VM.Array.fromObject.call(this, variables_order.indexOf(\"E\") !== -1 ? {} : {}).$;\n  var staticHandler = {},\n      staticVars = {};\n  PHP.Utils.StaticHandler(staticHandler, staticVars, $, $);\n  this.$Static = staticHandler;\n  Object.keys(PHP.VM.Class.Predefined).forEach(function (className) {\n    PHP.VM.Class.Predefined[className](ENV, $$);\n  }); //$('GLOBALS').$ = new (ENV.$Class.Get(\"__Globals\"))( this );\n\n  var obj = {};\n\n  obj[COMPILER.DIM_FETCH] = function (ctx, variable) {\n    return $(variable[COMPILER.VARIABLE_VALUE]);\n  };\n\n  $('GLOBALS', obj);\n  var shutdown = false;\n\n  ENV[COMPILER.TIMER] = function () {\n    if (Date.now() > this.start + (this.$ini.max_execution_time - 0) * 1000) {\n      if (this.$ini.display_errors != 0) {\n        this.$ob(\"\\nFatal error: Maximum execution time of \" + this.$ini.max_execution_time + \" second exceeded in \" + $('$__FILE__').$ + \" on line 1\\n\");\n      }\n\n      if (shutdown === false) {\n        shutdown = true;\n        this.$obflush.call(ENV);\n        this.$shutdown.call(ENV);\n      } // we aint killing it always with a single throw?? todo examine why\n\n\n      throw Error;\n      throw Error;\n      throw Error;\n      throw Error;\n    }\n  }.bind(this);\n\n  this.Run = function () {\n    this.start = Date.now();\n\n    if (false) { var exec; } else {\n      try {\n        var exec = new Function(\"$$\", \"$\", \"ENV\", \"$Static\", src);\n        exec.call(this, $$, $, ENV, staticHandler);\n\n        if (shutdown === false) {\n          shutdown = true;\n          this.$obflush.call(ENV);\n          this.$shutdown.call(ENV);\n        }\n      } catch (e) {\n        var C = PHP.Constants;\n\n        if (e instanceof PHP.Halt) {\n          switch (e.level) {\n            case C.E_ERROR:\n              this.$ob(\"\\nFatal error: \" + e.msg + e.lineAppend + \"\\n\");\n              break;\n\n            case C.E_RECOVERABLE_ERROR:\n              this.$ob(\"\\nCatchable fatal error: \" + e.msg + e.lineAppend + \"\\n\");\n              break;\n          }\n        }\n      }\n    }\n\n    this.OUTPUT_BUFFER = this.$strict + this.OUTPUT_BUFFERS.join(\"\");\n  }.bind(this);\n};\n\nPHP.VM.prototype = new PHP.Modules();\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 26.6.2012\n * @website http://hertzen.com\n */\n\nPHP.VM.Class = function (ENV, classRegistry, magicConstants, initiatedClasses, undefinedConstants, declaredClasses) {\n  var methodPrefix = PHP.VM.Class.METHOD,\n      methodArgumentPrefix = \"_$_\",\n      propertyPrefix = PHP.VM.Class.PROPERTY,\n      methodTypePrefix = \"$£\",\n      methodByRef = \"__byRef\",\n      propertyTypePrefix = PHP.VM.Class.PROPERTY_TYPE,\n      COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      __call = \"__call\",\n      __set = \"__set\",\n      __get = \"__get\",\n      PRIVATE = \"PRIVATE\",\n      PUBLIC = \"PUBLIC\",\n      STATIC = \"STATIC\",\n      ABSTRACT = \"ABSTRACT\",\n      FINAL = \"FINAL\",\n      INTERFACE = \"INTERFACE\",\n      PROTECTED = \"PROTECTED\",\n      __destruct = \"__destruct\",\n      __construct = \"__construct\"; // helper function for checking whether variable/method is of type\n\n  function checkType(value, type) {\n    if (type === PUBLIC) {\n      return (value & PHP.VM.Class[type]) === PHP.VM.Class[type] || value === PHP.VM.Class[STATIC];\n    } else {\n      return (value & PHP.VM.Class[type]) === PHP.VM.Class[type];\n    }\n  } // check if obj inherits className\n\n\n  function inherits(obj, name) {\n    return ENV.$Class.Inherits(obj, name);\n  }\n\n  var buildVariableContext = function buildVariableContext(methodName, args, className, realName, ctx) {\n    var $ = PHP.VM.VariableHandler(ENV),\n        argumentObj = this[methodArgumentPrefix + methodName];\n\n    if (Array.isArray(argumentObj)) {\n      argumentObj.forEach(function (argObject, index) {\n        var arg = $(argObject.name);\n        PHP.Utils.ArgumentHandler(ENV, arg, argObject, args[index], index, className + \"::\" + realName);\n        /*\n             // assign arguments to correct variable names\n            if ( args[ index ] !== undefined ) {\n                  if ( args[ index ] instanceof PHP.VM.VariableProto) {\n                    $( arg.name )[ COMPILER.VARIABLE_VALUE ] = args[ index ][ COMPILER.VARIABLE_VALUE ];\n                } else {\n                    $( arg.name )[ COMPILER.VARIABLE_VALUE ] = args[ index ];\n                }\n            } else {\n                // no argument passed for the specified index\n                 if ( arg[ COMPILER.PROPERTY_DEFAULT ] !== undefined ) {\n                    $( arg.name )[ COMPILER.VARIABLE_VALUE ] = arg[ COMPILER.PROPERTY_DEFAULT ][ COMPILER.VARIABLE_VALUE ];\n                } else {\n                    $( arg.name )[ COMPILER.VARIABLE_VALUE ] = (new PHP.VM.Variable())[ COMPILER.VARIABLE_VALUE ];\n                }\n            }\n              // perform type hint check\n             if ( arg[ COMPILER.PROPERTY_TYPE ] !== undefined ) {\n                ENV[ COMPILER.TYPE_CHECK ]( $( arg.name ), arg[ COMPILER.PROPERTY_TYPE ], arg[ COMPILER.PROPERTY_DEFAULT ], index, className + \"::\" + realName );\n            }\n              */\n      });\n    }\n\n    $(\"GLOBALS\", ENV[COMPILER.GLOBAL](\"GLOBALS\"));\n    $(\"$__CLASS__\")[COMPILER.VARIABLE_VALUE] = className;\n    $(\"$__FUNCTION__\")[COMPILER.VARIABLE_VALUE] = realName;\n    $(\"$__METHOD__\")[COMPILER.VARIABLE_VALUE] = className + \"::\" + realName;\n\n    if (ctx !== false) {\n      $(\"this\")[COMPILER.VARIABLE_VALUE] = ctx !== undefined ? ctx : this;\n    }\n\n    return $;\n  };\n\n  return function () {\n    var className = arguments[0],\n        classType = arguments[1],\n        opts = arguments[2],\n        classDefinition = arguments[3],\n        DECLARED = false,\n        staticVars = {},\n        props = {},\n        callMethod = function callMethod(methodName, args, variablesCallback) {\n      var $ = buildVariableContext.call(this, methodName, args, this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME], this[PHP.VM.Class.METHOD_REALNAME + methodName], checkType(this[methodTypePrefix + methodName], STATIC) ? false : this);\n\n      if (staticVars[methodName] === undefined) {\n        staticVars[methodName] = {};\n      }\n\n      Object.keys(staticVars[methodName]).forEach(function (key) {\n        $(key, staticVars[methodName][key]);\n      });\n      var staticHandler = {};\n      PHP.Utils.StaticHandler.call(this, staticHandler, staticVars, $, ENV[COMPILER.GLOBAL]);\n\n      if (variablesCallback !== undefined) {\n        variablesCallback();\n      }\n\n      return this[methodPrefix + methodName].call(this, $, this[PHP.VM.Class.METHOD_PROTOTYPE + methodName], staticHandler);\n    };\n\n    var Class = function Class(ctx) {\n      Object.keys(props).forEach(function (propertyName) {\n        if (checkType(this[propertyTypePrefix + propertyName], STATIC)) {// static, so refer to the one and only same value defined in actual prototype\n        } else {\n          if (Array.isArray(props[propertyName])) {\n            this[propertyPrefix + propertyName] = new PHP.VM.Variable([]);\n          } else {\n            this[propertyPrefix + propertyName] = new PHP.VM.Variable(props[propertyName]);\n          }\n        }\n\n        this[PHP.VM.Class.CLASS_PROPERTY + className + \"_\" + propertyPrefix + propertyName] = this[propertyPrefix + propertyName];\n      }, this);\n\n      var callConstruct = function ($this, name, args, ctx) {\n        if (checkType($this[methodTypePrefix + name], PRIVATE) && this[PHP.VM.Class.METHOD_PROTOTYPE + name][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Call to private \" + $this[PHP.VM.Class.METHOD_PROTOTYPE + name][COMPILER.CLASS_NAME] + \"::\" + name + \"() from invalid context\", PHP.Constants.E_ERROR, true);\n        }\n\n        if (checkType(this[methodTypePrefix + name], PROTECTED) && (!(ctx instanceof PHP.VM.ClassPrototype) || !inherits(ctx, this[COMPILER.CLASS_NAME]))) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Call to protected \" + className + \"::\" + name + \"() from invalid context\", PHP.Constants.E_ERROR, true);\n        }\n\n        this[PHP.VM.Class.KILLED] = true;\n        var ret = callMethod.call($this, name, Array.prototype.slice.call(args, 1));\n        this[PHP.VM.Class.KILLED] = undefined;\n        return ret;\n      }.bind(this); // call constructor\n\n\n      if (ctx !== true) {\n        // check if we are extending class, i.e. don't call constructors\n        if (!/^(ArrayObject|__Globals)$/i.test(className)) {\n          Object.keys(undefinedConstants).forEach(function (itm) {\n            var parts = itm.split(\"::\");\n\n            if (!this.$Class.Exists(parts[0])) {\n              ENV[PHP.Compiler.prototype.ERROR](\"Class '\" + parts[0] + \"' not found\", PHP.Constants.E_ERROR, true);\n            }\n          }, ENV);\n          undefinedConstants = [];\n        }\n\n        this[COMPILER.CLASS_STORED] = []; // variables that store an instance of this class, needed for destructors\n        // make sure we aren't initiating an abstract class\n\n        if (checkType(this[COMPILER.CLASS_TYPE], ABSTRACT)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Cannot instantiate abstract class \" + className, PHP.Constants.E_ERROR, true);\n        } // make sure we aren't initiating an interface\n\n\n        if (checkType(this[COMPILER.CLASS_TYPE], INTERFACE)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Cannot instantiate interface \" + className, PHP.Constants.E_ERROR, true);\n        } // register new class initiated into registry (for destructors at shutdown)\n\n\n        if (className !== \"ArrayObject\") {\n          initiatedClasses.push(this);\n          this[PHP.VM.Class.CLASS_INDEX] = initiatedClasses.length;\n        } // PHP 5 style constructor in current class\n\n\n        if (Object.getPrototypeOf(this).hasOwnProperty(methodPrefix + __construct)) {\n          return callConstruct(this, __construct, arguments, ctx);\n        } // PHP 4 style constructor in current class\n        else if (Object.getPrototypeOf(this).hasOwnProperty(methodPrefix + className.toLowerCase())) {\n            return callConstruct(this, className.toLowerCase(), arguments, ctx);\n          } // PHP 5 style constructor in any inherited class\n          else if (typeof this[methodPrefix + __construct] === \"function\") {\n              return callConstruct(this, __construct, arguments, ctx);\n            } // PHP 4 style constructor in any inherited class\n            else {\n                var proto = this;\n\n                while ((proto = Object.getPrototypeOf(proto)) instanceof PHP.VM.ClassPrototype) {\n                  if (proto.hasOwnProperty(methodPrefix + proto[COMPILER.CLASS_NAME].toLowerCase())) {\n                    return callConstruct(proto, proto[COMPILER.CLASS_NAME].toLowerCase(), arguments, ctx);\n                  }\n                }\n              }\n      }\n    },\n        methods = {};\n    /*\n     * Declare class constant\n     */\n\n\n    methods[COMPILER.CLASS_CONSTANT] = function (constantName, constantValue) {\n      if (classType === PHP.VM.Class.INTERFACE) {\n        Class.prototype[PHP.VM.Class.INTERFACES].forEach(function (interfaceName) {\n          if (ENV.$Class.Get(interfaceName).prototype[PHP.VM.Class.CONSTANT + constantName] !== undefined) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Cannot inherit previously-inherited or override constant \" + constantName + \" from interface \" + interfaceName, PHP.Constants.E_ERROR, true);\n          }\n        }, this);\n      }\n\n      if (Class.prototype[PHP.VM.Class.CONSTANT + className + \"$\" + constantName] !== undefined) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot redefine class constant \" + className + \"::\" + constantName, PHP.Constants.E_ERROR, true);\n      }\n\n      if (undefinedConstants[className + \"::\" + constantName] !== undefined) {\n        Class.prototype[PHP.VM.Class.CONSTANT + constantName] = undefinedConstants[className + \"::\" + constantName];\n\n        if (constantValue[VARIABLE.CLASS_CONSTANT]) {\n          // class constant referring another class constant, use reference\n          undefinedConstants[className + \"::\" + constantName][VARIABLE.REFERRING] = constantValue;\n          undefinedConstants[className + \"::\" + constantName][VARIABLE.DEFINED] = true;\n        } else {\n          Class.prototype[PHP.VM.Class.CONSTANT + constantName][COMPILER.VARIABLE_VALUE] = constantValue[COMPILER.VARIABLE_VALUE];\n        }\n      } else {\n        constantValue[VARIABLE.CLASS_CONSTANT] = true;\n        Class.prototype[PHP.VM.Class.CONSTANT + constantName] = constantValue;\n      }\n\n      Class.prototype[PHP.VM.Class.CONSTANT + className + \"$\" + constantName] = Class.prototype[PHP.VM.Class.CONSTANT + constantName];\n\n      if (Class.prototype[PHP.VM.Class.CONSTANT + constantName][VARIABLE.TYPE] === VARIABLE.ARRAY) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Arrays are not allowed in class constants\", PHP.Constants.E_ERROR, true);\n      }\n\n      return methods;\n    };\n    /*\n     * Declare class property\n     */\n\n\n    methods[COMPILER.CLASS_PROPERTY] = function (propertyName, propertyType, propertyDefault) {\n      props[propertyName] = propertyDefault; // can't define members for interface\n\n      if (classType === PHP.VM.Class.INTERFACE) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Interfaces may not include member variables\", PHP.Constants.E_ERROR, true);\n      }\n\n      if (Class.prototype[propertyTypePrefix + propertyName] !== undefined && Class.prototype[propertyTypePrefix + propertyName] !== propertyType) {\n        // property has been defined in an inherited class and isn't of same type as newly defined one,\n        // so let's make sure it is weaker or throw an error\n        var type = Class.prototype[propertyTypePrefix + propertyName],\n            inheritClass = Object.getPrototypeOf(Class.prototype)[COMPILER.CLASS_NAME]; // redeclaring a (non-private) static as non-static\n\n        if (!checkType(propertyType, STATIC) && checkType(type, STATIC) && !checkType(type, PRIVATE)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Cannot redeclare static \" + inheritClass + \"::$\" + propertyName + \" as non static \" + className + \"::$\" + propertyName, PHP.Constants.E_ERROR, true);\n        } // redeclaring a (non-private) non-static as static\n\n\n        if (checkType(propertyType, STATIC) && !checkType(type, STATIC) && !checkType(type, PRIVATE)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Cannot redeclare non static \" + inheritClass + \"::$\" + propertyName + \" as static \" + className + \"::$\" + propertyName, PHP.Constants.E_ERROR, true);\n        }\n\n        if (!checkType(propertyType, PUBLIC)) {\n          if ((checkType(propertyType, PRIVATE) || checkType(propertyType, PROTECTED)) && checkType(type, PUBLIC)) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Access level to \" + className + \"::$\" + propertyName + \" must be public (as in class \" + inheritClass + \")\", PHP.Constants.E_ERROR, true);\n          }\n\n          if (checkType(propertyType, PRIVATE) && checkType(type, PROTECTED)) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Access level to \" + className + \"::$\" + propertyName + \" must be protected (as in class \" + inheritClass + \") or weaker\", PHP.Constants.E_ERROR, true);\n          }\n        }\n      }\n\n      if (checkType(propertyType, STATIC)) {\n        /*\n        Object.defineProperty( Class.prototype,  propertyPrefix + propertyName, {\n            value: propertyDefault\n        });\n         */\n        Object.defineProperty(Class.prototype, PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName, {\n          value: propertyDefault || new PHP.VM.Variable(null)\n        });\n      }\n\n      Object.defineProperty(Class.prototype, propertyTypePrefix + propertyName, {\n        value: propertyType\n      });\n      return methods;\n    };\n    /*\n     * Declare method\n     */\n\n\n    methods[COMPILER.CLASS_METHOD] = function (realName, methodType, methodProps, byRef, methodFunc) {\n      /*\n       * signature checks\n       */\n      var methodName = realName.toLowerCase(); // can't override final\n\n      if (Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined && checkType(Class.prototype[methodTypePrefix + methodName], FINAL)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot override final method \" + Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"()\", PHP.Constants.E_ERROR, true);\n      } // can't override final php4 ctor extending php5 ctor\n\n\n      if (methodName === className.toLowerCase() && Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + __construct] !== undefined && checkType(Class.prototype[methodTypePrefix + __construct], FINAL)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot override final \" + Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + __construct][COMPILER.CLASS_NAME] + \"::\" + __construct + \"() with \" + className + \"::\" + realName + \"()\", PHP.Constants.E_ERROR, true);\n      }\n\n      var ctorProto = function (proto) {\n        while ((proto = Object.getPrototypeOf(proto)) instanceof PHP.VM.ClassPrototype) {\n          if (proto.hasOwnProperty(methodPrefix + proto[COMPILER.CLASS_NAME].toLowerCase())) {\n            return proto;\n          }\n        }\n      }(Class.prototype); // can't override final php5 ctor extending php4 ctor\n\n\n      if (methodName === __construct && ctorProto !== undefined && checkType(ctorProto[methodTypePrefix + ctorProto[COMPILER.CLASS_NAME].toLowerCase()], FINAL)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot override final \" + ctorProto[COMPILER.CLASS_NAME] + \"::\" + ctorProto[COMPILER.CLASS_NAME] + \"() with \" + className + \"::\" + realName + \"()\", PHP.Constants.E_ERROR, true);\n      } // can't make static non-static\n\n\n      if (Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined && checkType(Class.prototype[methodTypePrefix + methodName], STATIC) && !checkType(methodType, STATIC)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot make static method \" + Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"() non static in class \" + className, PHP.Constants.E_ERROR, true);\n      } // can't make non-static  static\n\n\n      if (Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined && !checkType(Class.prototype[methodTypePrefix + methodName], STATIC) && checkType(methodType, STATIC)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot make non static method \" + Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"() static in class \" + className, PHP.Constants.E_ERROR, true);\n      } // A final method cannot be abstract\n\n\n      if (checkType(methodType, ABSTRACT) && checkType(methodType, FINAL)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Cannot use the final modifier on an abstract class member\", PHP.Constants.E_ERROR, true);\n      } // abstract static warning\n\n\n      if (!checkType(classType, INTERFACE) && checkType(methodType, STATIC) && checkType(methodType, ABSTRACT)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Static function \" + className + \"::\" + methodName + \"() should not be abstract\", PHP.Constants.E_STRICT, true);\n      } // visibility from public\n\n\n      if (Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined && checkType(Class.prototype[methodTypePrefix + methodName], PUBLIC) && (checkType(methodType, PROTECTED) || checkType(methodType, PRIVATE))) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Access level to \" + className + \"::\" + realName + \"() must be public (as in class same)\", PHP.Constants.E_ERROR, true);\n      } // visibility from protected\n\n\n      if (Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined && checkType(Class.prototype[methodTypePrefix + methodName], PROTECTED) && checkType(methodType, PRIVATE)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Access level to \" + className + \"::\" + realName + \"() must be protected (as in class same) or weaker\", PHP.Constants.E_ERROR, true);\n      } // interface methods can't be private\n\n\n      if (classType === PHP.VM.Class.INTERFACE && checkType(methodType, PRIVATE)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Access type for interface method \" + className + \"::\" + realName + \"() must be omitted\", PHP.Constants.E_ERROR, true);\n      } // Default value for parameters with a class type hint can only be NULL\n\n\n      methodProps.forEach(function (prop) {\n        if (prop[COMPILER.PROPERTY_TYPE] !== undefined && prop[COMPILER.PROPERTY_DEFAULT] instanceof PHP.VM.Variable && !/^(string|array)$/i.test(prop[COMPILER.PROPERTY_TYPE]) && prop[COMPILER.PROPERTY_DEFAULT][VARIABLE.TYPE] !== VARIABLE.NULL) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Default value for parameters with a class type hint can only be NULL\", PHP.Constants.E_ERROR, true);\n        }\n      }, this); // __call\n\n      if (methodName === __call) {\n        if (methodProps.length !== 2) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Method \" + className + \"::\" + realName + \"() must take exactly 2 arguments\", PHP.Constants.E_ERROR, true);\n        }\n\n        if (!checkType(methodType, PUBLIC) || checkType(methodType, STATIC)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"The magic method \" + realName + \"() must have public visibility and cannot be static\", PHP.Constants.E_CORE_WARNING, true);\n        }\n      } // __get\n      else if (methodName === __get) {\n          if (methodProps.length !== 1) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Method \" + className + \"::\" + realName + \"() must take exactly 1 argument\", PHP.Constants.E_ERROR, true);\n          }\n        } // __set\n        else if (methodName === __set) {\n            if (methodProps.length !== 2) {\n              ENV[PHP.Compiler.prototype.ERROR](\"Method \" + className + \"::\" + realName + \"() must take exactly 2 arguments\", PHP.Constants.E_ERROR, true);\n            }\n          } // strict standards checks\n\n\n      if (Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined) {\n        // method has been defined in an inherited class\n        var propName,\n            propDef,\n            lastIndex = -1;\n\n        if (methodName !== __construct && (!Class.prototype[methodArgumentPrefix + methodName].every(function (item, index) {\n          propName = item;\n          lastIndex = index;\n\n          if (methodProps[index] !== undefined || item[COMPILER.PROPERTY_DEFAULT] !== undefined) {\n            if (methodProps[index] !== undefined) {\n              if (item[COMPILER.PROPERTY_TYPE] === methodProps[index][COMPILER.PROPERTY_TYPE]) {\n                return true;\n              }\n            }\n          } // or\n\n\n          if (item[COMPILER.PROPERTY_DEFAULT] !== undefined) {\n            propDef = item[COMPILER.PROPERTY_DEFAULT][COMPILER.VARIABLE_VALUE];\n          }\n\n          return false; // return (( (methodProps[ index ] !== undefined || item[ COMPILER.PROPERTY_DEFAULT ] !== undefined) && methodProps[ index ] !== undefined && item[ COMPILER.PROPERTY_TYPE ] === methodProps[ index ][ COMPILER.PROPERTY_TYPE ]) || item[ COMPILER.PROPERTY_DEFAULT ] !== undefined);\n          //                                                                                                ^^ ^^^^^^ rechecking it on purpose\n        }) || methodProps[++lastIndex] !== undefined && methodProps[lastIndex][COMPILER.PROPERTY_DEFAULT] === undefined)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Declaration of \" + className + \"::\" + realName + \"() should be compatible with \" + Class.prototype[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"(\" + (propName !== undefined ? (propName[COMPILER.PROPERTY_TYPE] === undefined ? \"\" : propName[COMPILER.PROPERTY_TYPE] + \" \") + \"$\" + propName.name : \"\") + (propDef !== undefined ? \" = \" + propDef : \"\") + \")\", PHP.Constants.E_STRICT, true, true);\n        }\n      } // end signature checks\n\n\n      Object.defineProperty(Class.prototype, PHP.VM.Class.METHOD_PROTOTYPE + methodName, {\n        value: Class.prototype\n      });\n      Object.defineProperty(Class.prototype, PHP.VM.Class.METHOD_REALNAME + methodName, {\n        value: realName\n      });\n      Object.defineProperty(Class.prototype, methodTypePrefix + methodName, {\n        value: methodType\n      });\n      Object.defineProperty(Class.prototype, methodByRef + methodName, {\n        value: byRef\n      });\n      Object.defineProperty(Class.prototype, methodPrefix + methodName, {\n        value: methodFunc,\n        enumerable: true\n      });\n      Object.defineProperty(Class.prototype, methodArgumentPrefix + methodName, {\n        value: methodProps\n      });\n      return methods;\n    };\n\n    methods[COMPILER.CLASS_DECLARE] = function () {\n      if (!checkType(classType, ABSTRACT)) {\n        // make sure there are no abstract methods left undeclared\n        if (classType !== PHP.VM.Class.INTERFACE) {\n          Object.keys(Class.prototype).forEach(function (item) {\n            if (item.substring(0, methodPrefix.length) === methodPrefix) {\n              var methodName = item.substring(methodPrefix.length);\n\n              if (checkType(Class.prototype[methodTypePrefix + methodName], ABSTRACT)) {\n                ENV[PHP.Compiler.prototype.ERROR](\"Class \" + className + \" contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (\" + className + \"::\" + methodName + \")\", PHP.Constants.E_ERROR, true);\n              }\n            }\n          }); // interfaces\n\n          Class.prototype[PHP.VM.Class.INTERFACES].forEach(function (interfaceName) {\n            var interfaceProto = classRegistry[interfaceName.toLowerCase()].prototype;\n            Object.keys(interfaceProto).forEach(function (item) {\n              if (item.substring(0, PHP.VM.Class.CONSTANT.length) === PHP.VM.Class.CONSTANT) {\n                if (Class.prototype[item] !== undefined) {\n                  Class.prototype[PHP.VM.Class.INTERFACES].forEach(function (interfaceName2) {\n                    if (interfaceName2 === interfaceName) {\n                      if (ENV.$Class.Get(interfaceName2).prototype[item] !== undefined) {\n                        ENV[PHP.Compiler.prototype.ERROR](\"Cannot inherit previously-inherited or override constant \" + item.substring(PHP.VM.Class.CONSTANT.length) + \" from interface \" + interfaceName2, PHP.Constants.E_ERROR, true);\n                      }\n                    }\n                  }, this);\n                }\n\n                methods[COMPILER.CLASS_CONSTANT](item.substring(PHP.VM.Class.CONSTANT.length), interfaceProto[item]);\n              } // method checks\n\n\n              if (item.substring(0, methodPrefix.length) === methodPrefix) {\n                var methodName = item.substring(methodPrefix.length),\n                    propName,\n                    propDef,\n                    lastIndex = -1;\n\n                if (Class.prototype[methodTypePrefix + methodName] === undefined) {\n                  ENV[PHP.Compiler.prototype.ERROR](\"Class \" + className + \" contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (\" + interfaceName + \"::\" + methodName + \")\", PHP.Constants.E_ERROR, true);\n                }\n\n                if (methodName === __construct && interfaceProto[methodTypePrefix + methodName] !== undefined || interfaceProto[methodTypePrefix + interfaceName.toLowerCase()] !== undefined) {\n                  var methodProps = Class.prototype[methodArgumentPrefix + __construct];\n\n                  if (!interfaceProto[methodArgumentPrefix + __construct].every(function (item, index) {\n                    propName = item;\n                    lastIndex = index;\n\n                    if (methodProps[index] !== undefined || item[COMPILER.PROPERTY_DEFAULT] !== undefined) {\n                      if (methodProps[index] !== undefined) {\n                        if (item[COMPILER.PROPERTY_TYPE] === methodProps[index][COMPILER.PROPERTY_TYPE]) {\n                          return true;\n                        }\n                      }\n                    }\n\n                    if (item[COMPILER.PROPERTY_DEFAULT] !== undefined) {\n                      propDef = item[COMPILER.PROPERTY_DEFAULT][COMPILER.VARIABLE_VALUE];\n                    }\n\n                    return false;\n                  }) || methodProps[++lastIndex] !== undefined && methodProps[lastIndex][COMPILER.PROPERTY_DEFAULT] === undefined) {\n                    ENV[PHP.Compiler.prototype.ERROR](\"Declaration of \" + className + \"::\" + __construct + \"() must be compatible with \" + interfaceName + \"::\" + __construct + \"(\" + (propName !== undefined ? (propName[COMPILER.PROPERTY_TYPE] === undefined ? \"\" : propName[COMPILER.PROPERTY_TYPE] + \" \") + \"$\" + propName.name : \"\") + (propDef !== undefined ? \" = \" + propDef : \"\") + \")\", PHP.Constants.E_ERROR, true);\n                  }\n                }\n              }\n            });\n          });\n        }\n      }\n\n      DECLARED = true;\n\n      if (classType !== PHP.VM.Class.INTERFACE) {\n        declaredClasses.push(className);\n      }\n\n      return Class;\n    };\n    /*\n     * Extends and implements\n     */\n\n\n    if (opts.Extends !== undefined) {\n      var Extends = ENV.$Class.Get(opts.Extends);\n\n      if (Extends.prototype[COMPILER.CLASS_TYPE] === PHP.VM.Class.INTERFACE) {\n        // can't extend interface\n        ENV[PHP.Compiler.prototype.ERROR](\"Class \" + className + \" cannot extend from interface \" + opts.Extends, PHP.Constants.E_ERROR, true);\n      } else if (checkType(Extends.prototype[COMPILER.CLASS_TYPE], FINAL)) {\n        // can't extend final class\n        ENV[PHP.Compiler.prototype.ERROR](\"Class \" + className + \" may not inherit from final class (\" + opts.Extends + \")\", PHP.Constants.E_ERROR, true);\n      }\n\n      Class.prototype = new Extends(true);\n    } else {\n      Class.prototype = new PHP.VM.ClassPrototype();\n    }\n\n    Class.prototype[PHP.VM.Class.INTERFACES] = Class.prototype[PHP.VM.Class.INTERFACES] === undefined ? [] : Array.prototype.slice.call(Class.prototype[PHP.VM.Class.INTERFACES], 0);\n\n    var pushInterface = function pushInterface(interfaceName, interfaces, ignore) {\n      if (interfaceName.toLowerCase() === \"traversable\" && ignore !== true && !/^iterato(r|raggregate)$/i.test(className)) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Class \" + className + \" must implement interface Traversable as part of either Iterator or IteratorAggregate\", PHP.Constants.E_ERROR, true);\n      }\n\n      if (interfaces.indexOf(interfaceName) === -1) {\n        // only add interface if it isn't present already\n        interfaces.push(interfaceName);\n      }\n    };\n\n    if (opts.Implements !== undefined || classType === PHP.VM.Class.INTERFACE) {\n      (classType === PHP.VM.Class.INTERFACE ? opts : opts.Implements).forEach(function (interfaceName) {\n        var Implements = ENV.$Class.Get(interfaceName, undefined, true);\n\n        if (Implements.prototype[COMPILER.CLASS_TYPE] !== PHP.VM.Class.INTERFACE) {\n          // can't implement non-interface\n          ENV[PHP.Compiler.prototype.ERROR](className + \" cannot implement \" + interfaceName + \" - it is not an interface\", PHP.Constants.E_ERROR, true);\n        }\n\n        pushInterface(interfaceName, Class.prototype[PHP.VM.Class.INTERFACES]); // add interfaces from interface\n\n        Implements.prototype[PHP.VM.Class.INTERFACES].forEach(function (interfaceName) {\n          pushInterface(interfaceName, Class.prototype[PHP.VM.Class.INTERFACES], true);\n        });\n      });\n    }\n\n    Class.prototype[COMPILER.CLASS_TYPE] = classType;\n    Class.prototype[COMPILER.CLASS_NAME] = className;\n\n    Class.prototype[COMPILER.METHOD_CALL] = function (ctx, methodName) {\n      methodName = methodName.toLowerCase();\n      var args = Array.prototype.slice.call(arguments, 2),\n          value;\n\n      if (typeof this[methodPrefix + methodName] !== \"function\") {\n        // no method with that name found\n        if (typeof this[methodPrefix + __call] === \"function\") {\n          // __call method defined, let's call that instead then\n          // determine which __call to use in case there are several defined\n          if (ctx instanceof PHP.VM) {\n            // normal call, use current context\n            value = callMethod.call(this, __call, [new PHP.VM.Variable(methodName), new PHP.VM.Variable(PHP.VM.Array.fromObject.call(ENV, args))]);\n          } else {\n            // static call, ensure current scope's __call() is favoured over the specified class's  __call()\n            value = ctx.callMethod.call(ctx, __call, [new PHP.VM.Variable(methodName), new PHP.VM.Variable(PHP.VM.Array.fromObject.call(ENV, args))]);\n          }\n\n          return value === undefined ? new PHP.VM.Variable() : value;\n        }\n      } else {\n        if (checkType(this[methodTypePrefix + methodName], PRIVATE) && this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n          // targeted function is private and inaccessible from current context,\n          // but let's make sure current context doesn't have it's own private method that has been overwritten\n          if (!ctx instanceof PHP.VM.ClassPrototype || ctx[PHP.VM.Class.METHOD_PROTOTYPE + methodName] === undefined || ctx[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to private method \" + this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + methodName + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n          }\n        } else if (checkType(this[methodTypePrefix + methodName], PROTECTED)) {\n          // we are calling a protected method, let's see if we are inside it\n          if (!(ctx instanceof PHP.VM.ClassPrototype)) {\n            // todo check actually parents as well\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to protected method \" + this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + methodName + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n          }\n        }\n      } // favor current context's private method\n\n\n      if (ctx instanceof PHP.VM.ClassPrototype && ctx[PHP.VM.Class.METHOD_PROTOTYPE + methodName] !== undefined && checkType(ctx[methodTypePrefix + methodName], PRIVATE) && ctx[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] === ctx[COMPILER.CLASS_NAME]) {\n        value = this.callMethod.call(ctx, methodName, args);\n      } else {\n        value = this.callMethod.call(this, methodName, args);\n      }\n\n      value = value === undefined ? new PHP.VM.Variable() : value;\n\n      if (className !== \"ArrayObject\") {\n        PHP.Utils.CheckRef.call(ENV, value, this[methodByRef + methodName]);\n      }\n\n      return value;\n    };\n\n    Class.prototype.callMethod = callMethod;\n\n    Class.prototype[COMPILER.STATIC_CALL] = function (ctx, methodClass, realName) {\n      var methodName = realName.toLowerCase();\n      var ret;\n      var args = Array.prototype.slice.call(arguments, 3);\n\n      if (typeof this[methodPrefix + methodName] !== \"function\") {\n        // no method with that name found\n        if (typeof this[methodPrefix + __call] === \"function\") {\n          // __call method defined, let's call that instead then\n          // determine which __call to use in case there are several defined\n          if (ctx instanceof PHP.VM) {\n            // normal call, use current context\n            return callMethod.call(this, __call, [new PHP.VM.Variable(methodName), new PHP.VM.Variable(PHP.VM.Array.fromObject.call(ENV, args))]);\n          } else {\n            // static call, ensure current scope's __call() is favoured over the specified class's  __call()\n            return ctx.callMethod.call(ctx, __call, [new PHP.VM.Variable(methodName), new PHP.VM.Variable(PHP.VM.Array.fromObject.call(ENV, args))]);\n          }\n        }\n      } else {\n        if (checkType(this[methodTypePrefix + methodName], PRIVATE) && this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Call to private method \" + this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n        } else if (checkType(this[methodTypePrefix + methodName], PROTECTED)) {\n          // we are calling a protected method, let's see if we are inside it\n          if (!(ctx instanceof PHP.VM.ClassPrototype) || !inherits(ctx, this[COMPILER.CLASS_NAME])) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to protected method \" + this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n          }\n        }\n      }\n\n      var methodToCall, methodCTX, $;\n      var proto;\n\n      if (/^parent$/i.test(methodClass)) {\n        proto = Object.getPrototypeOf(Object.getPrototypeOf(this));\n      } else if (/^self$/i.test(methodClass)) {\n        proto = Object.getPrototypeOf(this);\n      } else if (methodClass !== className) {\n        proto = Object.getPrototypeOf(this);\n\n        while (proto !== null && proto[COMPILER.CLASS_NAME] !== methodClass) {\n          proto = Object.getPrototypeOf(proto);\n        }\n      }\n\n      if (proto !== undefined) {\n        methodToCall = proto[methodPrefix + methodName];\n        methodCTX = proto[PHP.VM.Class.METHOD_PROTOTYPE + methodName];\n        $ = buildVariableContext.call(proto, methodName, args, methodCTX[COMPILER.CLASS_NAME], realName, checkType(proto[methodTypePrefix + methodName], STATIC) ? false : this);\n\n        if (checkType(proto[methodTypePrefix + methodName], PRIVATE) && methodCTX[COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n          if (methodName === __construct) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Cannot call private \" + methodCTX[COMPILER.CLASS_NAME] + \"::\" + realName + \"()\", PHP.Constants.E_ERROR, true);\n          }\n\n          ENV[PHP.Compiler.prototype.ERROR](\"Call to private method \" + methodCTX[COMPILER.CLASS_NAME] + \"::\" + realName + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n        }\n\n        if (checkType(proto[methodTypePrefix + methodName], ABSTRACT)) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Cannot call abstract method \" + methodCTX[COMPILER.CLASS_NAME] + \"::\" + realName + \"()\", PHP.Constants.E_ERROR, true);\n        }\n\n        if (!checkType(proto[methodTypePrefix + methodName], STATIC) && !/^(parent|self)$/i.test(methodClass) && !inherits(ctx, proto[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME])) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Non-static method \" + proto[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"() should not be called statically\", PHP.Constants.E_STRICT, true);\n        }\n\n        ret = methodToCall.call(this, $, methodCTX);\n        PHP.Utils.CheckRef.call(ENV, ret, methodCTX[methodByRef + methodName]);\n        return ret;\n      }\n\n      ret = this.callMethod.call(this, methodName, args, function () {\n        if (!checkType(this[methodTypePrefix + methodName], STATIC) && !/^(parent|self)$/i.test(methodClass) && !inherits(ctx, this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME])) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Non-static method \" + this[PHP.VM.Class.METHOD_PROTOTYPE + methodName][COMPILER.CLASS_NAME] + \"::\" + realName + \"() should not be called statically\", PHP.Constants.E_STRICT, true);\n        }\n      }.bind(this));\n      PHP.Utils.CheckRef.call(ENV, ret, this[methodByRef + methodName]);\n      return ret;\n    };\n\n    Class.prototype[COMPILER.STATIC_PROPERTY_GET] = function (ctx, propertyClass, propertyName, ref) {\n      var methodCTX;\n\n      if (/^self$/i.test(propertyClass)) {\n        methodCTX = ctx;\n      } else if (/^parent$/i.test(propertyClass)) {\n        methodCTX = Object.getPrototypeOf(ctx);\n      } else {\n        methodCTX = this;\n      }\n\n      if (methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName] === undefined) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Access to undeclared static property: \" + methodCTX[COMPILER.CLASS_NAME] + \"::$\" + propertyName, PHP.Constants.E_ERROR, true);\n      }\n\n      if (ref === true && !methodCTX.hasOwnProperty(PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName)) {\n        methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY_REF + propertyClass + \"$\" + propertyName] = new PHP.VM.Variable();\n        return methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY_REF + propertyClass + \"$\" + propertyName];\n      }\n\n      if (methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY_REF + propertyClass + \"$\" + propertyName] !== undefined) {\n        return methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY_REF + propertyClass + \"$\" + propertyName];\n      }\n\n      if (methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName] !== undefined) {\n        return methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName];\n      } else {//      return methodCTX[ propertyPrefix + propertyName ];\n      }\n    };\n\n    Class.prototype[COMPILER.CLASS_STATIC_PROPERTY_ISSET] = function (ctx, propertyClass, propertyName) {\n      var methodCTX;\n\n      if (/^self$/i.test(propertyClass)) {\n        methodCTX = ctx;\n      } else if (/^parent$/i.test(propertyClass)) {\n        methodCTX = Object.getPrototypeOf(ctx);\n      } else {\n        methodCTX = this;\n      }\n\n      if (methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName] === undefined) {\n        return false;\n      }\n\n      if (methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY_REF + propertyClass + \"$\" + propertyName] !== undefined) {\n        return true;\n      }\n\n      if (methodCTX[PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName] !== undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    Class.prototype[COMPILER.CLASS_CONSTANT_FETCH] = function (ctx, constantName) {\n      if (this[PHP.VM.Class.CONSTANT + constantName] === undefined && DECLARED === true) {\n        ENV[PHP.Compiler.prototype.ERROR](\"Undefined class constant '\" + constantName + \"'\", PHP.Constants.E_ERROR, true);\n      } else if (this[PHP.VM.Class.CONSTANT + constantName] === undefined) {\n        //  undefinedConstants\n        if (undefinedConstants[className + \"::\" + constantName] === undefined) {\n          var variable = new PHP.VM.Variable();\n          variable[VARIABLE.CLASS_CONSTANT] = true;\n          variable[VARIABLE.DEFINED] = className + \"::$\" + constantName;\n          undefinedConstants[className + \"::\" + constantName] = variable;\n        }\n\n        return undefinedConstants[className + \"::\" + constantName];\n      }\n\n      return this[PHP.VM.Class.CONSTANT + constantName];\n    };\n\n    Class.prototype[COMPILER.CLASS_PROPERTY_ISSET] = function (ctx, propertyName) {\n      if (this[propertyPrefix + propertyName] === undefined || checkType(this[propertyTypePrefix + propertyName], STATIC)) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    Class.prototype[COMPILER.CLASS_PROPERTY_GET] = function (ctx, propertyName) {\n      if (this[propertyPrefix + propertyName] === undefined && this[PHP.VM.Class.CLASS_STATIC_PROPERTY + propertyName] === undefined) {\n        var obj = {},\n            props = {}; // property set\n\n        if (this[methodPrefix + __set] !== undefined) {\n          obj[COMPILER.ASSIGN] = function (value) {\n            callMethod.call(this, __set, [new PHP.VM.Variable(propertyName), value]);\n            return value;\n          }.bind(this);\n        } // Post inc ++\n        // getting value\n\n\n        obj[VARIABLE.DEFINED] = true;\n\n        obj[COMPILER.POST_INC] = function () {\n          if (this[methodPrefix + __get] !== undefined) {\n            var value = callMethod.call(this, __get, [new PHP.VM.Variable(propertyName)]); // setting ++\n\n            if (this[methodPrefix + __set] !== undefined) {\n              callMethod.call(this, __set, [new PHP.VM.Variable(propertyName), value instanceof PHP.VM.Variable ? ++value[COMPILER.VARIABLE_VALUE] : new PHP.VM.Variable(1)]);\n            }\n\n            if (value === undefined) {\n              return new PHP.VM.Variable();\n            }\n\n            return value;\n          }\n        }.bind(this);\n\n        obj[COMPILER.PRE_INC] = function () {\n          if (this[methodPrefix + __get] !== undefined) {\n            var value = callMethod.call(this, __get, [new PHP.VM.Variable(propertyName)]); // setting ++\n\n            if (this[methodPrefix + __set] !== undefined) {\n              callMethod.call(this, __set, [new PHP.VM.Variable(propertyName), value instanceof PHP.VM.Variable ? ++value[COMPILER.VARIABLE_VALUE] : new PHP.VM.Variable(1)]);\n            }\n\n            return value;\n          }\n        }.bind(this);\n\n        obj[COMPILER.ASSIGN_PLUS] = function (combined) {\n          if (this[methodPrefix + __get] !== undefined) {\n            var value = callMethod.call(this, __get, [new PHP.VM.Variable(propertyName)]); // setting ++\n\n            if (this[methodPrefix + __set] !== undefined) {\n              callMethod.call(this, __set, [new PHP.VM.Variable(propertyName), value instanceof PHP.VM.Variable ? value[COMPILER.VARIABLE_VALUE] + combined[COMPILER.VARIABLE_VALUE] : new PHP.VM.Variable(1)]);\n            }\n\n            return value;\n          }\n        }.bind(this);\n\n        obj[COMPILER.CLASS_PROPERTY_GET] = function () {\n          if (this[methodPrefix + __get] !== undefined) {\n            var value = callMethod.call(this, __get, [new PHP.VM.Variable(propertyName)]);\n            return value[COMPILER.CLASS_PROPERTY_GET].apply(value, arguments);\n          }\n        }.bind(this);\n\n        obj[COMPILER.ASSIGN_MINUS] = function (combined) {\n          if (this[methodPrefix + __get] !== undefined) {\n            var value = callMethod.call(this, __get, [new PHP.VM.Variable(propertyName)]); // setting ++\n\n            if (this[methodPrefix + __set] !== undefined) {\n              callMethod.call(this, __set, [new PHP.VM.Variable(propertyName), value instanceof PHP.VM.Variable ? value[COMPILER.VARIABLE_VALUE] - combined[COMPILER.VARIABLE_VALUE] : new PHP.VM.Variable(1)]);\n            }\n\n            return value;\n          }\n        }.bind(this);\n\n        var $this = this; // property get\n\n        if (this[methodPrefix + __get] !== undefined) {\n          props[COMPILER.VARIABLE_VALUE] = {\n            get: function get() {\n              if (obj.__get === undefined) {\n                obj.__get = callMethod.call($this, __get, [new PHP.VM.Variable(propertyName)]);\n              }\n\n              return obj.__get[COMPILER.VARIABLE_VALUE];\n            }\n          };\n          props[VARIABLE.TYPE] = {\n            get: function get() {\n              if (obj.__get === undefined) {\n                obj.__get = callMethod.call($this, __get, [new PHP.VM.Variable(propertyName)]);\n              }\n\n              return obj.__get[VARIABLE.TYPE];\n            }\n          };\n          Object.defineProperties(obj, props);\n        } else {\n          if (this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName] === undefined) {\n            var variable = new PHP.VM.Variable();\n            variable[VARIABLE.PROPERTY] = true;\n            variable[VARIABLE.DEFINED] = className + \"::$\" + propertyName;\n            this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName] = variable;\n\n            variable[VARIABLE.REGISTER_SETTER] = function () {\n              this[propertyPrefix + propertyName] = variable;\n            }.bind(this);\n\n            return variable;\n          } else {\n            return this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName];\n          }\n        }\n\n        return obj;\n      } else {\n        var checkPermissions = function (propertyPrefix) {\n          if (checkType(this[propertyTypePrefix + propertyName], PROTECTED) && !(ctx instanceof PHP.VM.ClassPrototype)) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Cannot access protected property \" + className + \"::$\" + propertyName, PHP.Constants.E_ERROR, true);\n          }\n\n          if (checkType(this[propertyTypePrefix + propertyName], PRIVATE) && !(ctx instanceof PHP.VM.ClassPrototype)) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Cannot access private property \" + className + \"::$\" + propertyName, PHP.Constants.E_ERROR, true);\n          }\n\n          if (this[propertyPrefix + propertyName][VARIABLE.DEFINED] !== true && (!(ctx instanceof PHP.VM.ClassPrototype) || this[PHP.VM.Class.CLASS_PROPERTY + ctx[COMPILER.CLASS_NAME] + \"_\" + propertyPrefix + propertyName] === undefined)) {\n            if (!(ctx instanceof PHP.VM.ClassPrototype) && checkType(this[propertyTypePrefix + propertyName], PRIVATE)) {\n              ENV[PHP.Compiler.prototype.ERROR](\"Cannot access private property \" + className + \"::$\" + propertyName, PHP.Constants.E_ERROR, true);\n            }\n\n            if (checkType(this[propertyTypePrefix + propertyName], PROTECTED) && ctx instanceof PHP.VM.ClassPrototype) {// no change?\n            } else {\n              Object.getPrototypeOf(this)[propertyTypePrefix + propertyName] = 1;\n            }\n          }\n\n          if (ctx instanceof PHP.VM.ClassPrototype && this[PHP.VM.Class.CLASS_PROPERTY + ctx[COMPILER.CLASS_NAME] + \"_\" + propertyPrefix + propertyName] !== undefined) {\n            // favor current context over object only if current context property is private\n            if (checkType(ctx[propertyTypePrefix + propertyName], PRIVATE)) {\n              return this[PHP.VM.Class.CLASS_PROPERTY + ctx[COMPILER.CLASS_NAME] + \"_\" + propertyPrefix + propertyName];\n            }\n          }\n        }.bind(this),\n            ret;\n\n        if (this[propertyPrefix + propertyName] !== undefined) {\n          ret = checkPermissions(propertyPrefix);\n\n          if (ret !== undefined) {\n            return ret;\n          }\n        }\n\n        if (checkType(this[propertyTypePrefix + propertyName], STATIC)) {\n          ret = checkPermissions(PHP.VM.Class.CLASS_STATIC_PROPERTY);\n\n          if (ret !== undefined) {\n            return ret;\n          }\n\n          ENV[PHP.Compiler.prototype.ERROR](\"Accessing static property \" + className + \"::$\" + propertyName + \" as non static\", PHP.Constants.E_STRICT, true);\n\n          if (this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName] === undefined) {\n            var variable = new PHP.VM.Variable();\n            variable[VARIABLE.PROPERTY] = true;\n            variable[VARIABLE.DEFINED] = className + \"::$\" + propertyName;\n            this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName] = variable;\n\n            variable[VARIABLE.REGISTER_SETTER] = function () {\n              this[propertyPrefix + propertyName] = variable;\n            }.bind(this);\n\n            return variable;\n          } else {\n            if (this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName][VARIABLE.DEFINED] !== true) {\n              this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName][VARIABLE.DEFINED] = className + \"::$\" + propertyName;\n            }\n\n            return this[PHP.VM.Class.CLASS_UNDEFINED_PROPERTY + propertyName];\n          }\n        }\n\n        return this[propertyPrefix + propertyName];\n      }\n    };\n\n    Class.prototype[COMPILER.CLASS_CLONE] = function (ctx) {\n      var cloned = new (ENV.$Class.Get(this[COMPILER.CLASS_NAME]))(true),\n          __clone = \"__clone\";\n      cloned[COMPILER.CLASS_STORED] = []; // variables that store an instance of this class, needed for destructors\n      // for...in, since we wanna go through the whole proto chain\n\n      for (var prop in this) {\n        if (prop.substring(0, propertyPrefix.length) === propertyPrefix) {\n          if (cloned[prop] === undefined) {\n            cloned[prop] = new PHP.VM.Variable(this[prop][COMPILER.VARIABLE_VALUE]);\n          } else {\n            cloned[prop][COMPILER.VARIABLE_VALUE] = this[prop][COMPILER.VARIABLE_VALUE];\n          }\n        }\n      }\n\n      if (this[methodPrefix + __clone] !== undefined) {\n        if (checkType(this[methodTypePrefix + __clone], PRIVATE) && this[PHP.VM.Class.METHOD_PROTOTYPE + __clone][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n          // targeted function is private and inaccessible from current context,\n          // but let's make sure current context doesn't have it's own private method that has been overwritten\n          if (!ctx instanceof PHP.VM.ClassPrototype || ctx[PHP.VM.Class.METHOD_PROTOTYPE + __clone] === undefined || ctx[PHP.VM.Class.METHOD_PROTOTYPE + __clone][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to private \" + this[PHP.VM.Class.METHOD_PROTOTYPE + __clone][COMPILER.CLASS_NAME] + \"::\" + __clone + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n          }\n        } else if (checkType(this[methodTypePrefix + __clone], PROTECTED)) {\n          // we are calling a protected method, let's see if we are inside it\n          if (!(ctx instanceof PHP.VM.ClassPrototype)) {\n            // todo check actually parents as well\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to protected \" + this[PHP.VM.Class.METHOD_PROTOTYPE + __clone][COMPILER.CLASS_NAME] + \"::\" + __clone + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n          }\n        }\n\n        var $ = buildVariableContext.call(this, __clone, [], className, __clone, cloned);\n\n        this[methodPrefix + __clone].call(this, $, Object.getPrototypeOf(this)); // cloned.callMethod.call( cloned, __clone );\n\n      }\n\n      return new PHP.VM.Variable(cloned);\n    };\n\n    Class.prototype[COMPILER.CLASS_DESTRUCT] = function (ctx, shutdown) {\n      // check if this class has been destructed already\n      if (this[PHP.VM.Class.KILLED] === true) {\n        return;\n      } // go through all assigned class props to see if we have closure classes to be killed\n      // for...in, since we wanna go through the whole proto chain\n\n\n      for (var prop in this) {\n        if (prop.substring(0, propertyPrefix.length) === propertyPrefix) {\n          this[prop][PHP.VM.Class.KILLED] = true;\n        }\n      }\n\n      if (checkType(this[methodTypePrefix + __destruct], PRIVATE) && (!(ctx instanceof PHP.VM.ClassPrototype) || this[PHP.VM.Class.METHOD_PROTOTYPE + __destruct][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME])) {\n        // targeted function is private and inaccessible from current context,\n        // but let's make sure current context doesn't have it's own private method that has been overwritten\n        if (!(ctx instanceof PHP.VM.ClassPrototype) || ctx[PHP.VM.Class.METHOD_PROTOTYPE + __destruct] === undefined || ctx[PHP.VM.Class.METHOD_PROTOTYPE + __destruct][COMPILER.CLASS_NAME] !== ctx[COMPILER.CLASS_NAME]) {\n          if (shutdown === true) {\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to private \" + className + \"::\" + __destruct + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"' during shutdown ignored in Unknown on line 0\", PHP.Constants.E_WARNING);\n            return;\n          } else {\n            ENV[PHP.Compiler.prototype.ERROR](\"Call to private \" + className + \"::\" + __destruct + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n          }\n        }\n      }\n\n      if (checkType(this[methodTypePrefix + __destruct], PROTECTED) && (!(ctx instanceof PHP.VM.ClassPrototype) || !inherits(ctx, this[COMPILER.CLASS_NAME]))) {\n        if (shutdown === true) {\n          ENV[PHP.Compiler.prototype.ERROR](\"Call to protected \" + className + \"::\" + __destruct + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"' during shutdown ignored in Unknown on line 0\", PHP.Constants.E_WARNING);\n          return;\n        } else {\n          ENV[PHP.Compiler.prototype.ERROR](\"Call to protected \" + className + \"::\" + __destruct + \"() from context '\" + (ctx instanceof PHP.VM.ClassPrototype ? ctx[COMPILER.CLASS_NAME] : '') + \"'\", PHP.Constants.E_ERROR, true);\n        }\n      }\n\n      this[PHP.VM.Class.KILLED] = true;\n\n      if (this[methodPrefix + __destruct] !== undefined) {\n        return callMethod.call(this, __destruct, []);\n      }\n    }; // register class\n\n\n    classRegistry[className.toLowerCase()] = Class;\n    var constant$ = PHP.VM.VariableHandler();\n    constant$(\"$__FILE__\")[COMPILER.VARIABLE_VALUE] = \"__FILE__\"; //   constant$(\"$__FILE__\")[ COMPILER.VARIABLE_VALUE ] = ENV[ COMPILER.GLOBAL ]('_SERVER')[ COMPILER.VARIABLE_VALUE ][ COMPILER.METHOD_CALL ]( ENV, COMPILER.ARRAY_GET, 'SCRIPT_FILENAME' )[ COMPILER.VARIABLE_VALUE ];\n\n    constant$(\"$__METHOD__\")[COMPILER.VARIABLE_VALUE] = className;\n    constant$(\"$__CLASS__\")[COMPILER.VARIABLE_VALUE] = className;\n    constant$(\"$__FUNCTION__\")[COMPILER.VARIABLE_VALUE] = \"\";\n    constant$(\"$__LINE__\")[COMPILER.VARIABLE_VALUE] = 1;\n    classDefinition.call(Class, methods, constant$, function (arg) {\n      var item = new PHP.VM.Variable(arg);\n      item[PHP.Compiler.prototype.NAV] = true;\n      item[VARIABLE.INSTANCE] = Class.prototype;\n      return item;\n    });\n    return methods;\n  };\n};\n\nPHP.VM.Class.KILLED = \"$Killed\";\n\nPHP.VM.ClassPrototype = function () {};\n\nPHP.VM.Class.METHOD = \"_\";\nPHP.VM.Class.METHOD_REALNAME = \"€€\";\nPHP.VM.Class.CLASS_UNDEFINED_PROPERTY = \"_£$\";\nPHP.VM.Class.CLASS_PROPERTY = \"_£\";\nPHP.VM.Class.CLASS_STATIC_PROPERTY = \"$_\";\nPHP.VM.Class.CLASS_STATIC_PROPERTY_REF = \"Ö\";\nPHP.VM.Class.INTERFACES = \"$Interfaces\";\nPHP.VM.Class.METHOD_PROTOTYPE = \"$MP\";\nPHP.VM.Class.CONSTANT = \"€\";\nPHP.VM.Class.PROPERTY = \"$$\";\nPHP.VM.Class.PROPERTY_TYPE = \"$£$\";\nPHP.VM.Class.CLASS_INDEX = \"$CIndex\";\nPHP.VM.Class.Predefined = {};\nPHP.VM.Class.PUBLIC = 1;\nPHP.VM.Class.PROTECTED = 2;\nPHP.VM.Class.PRIVATE = 4;\nPHP.VM.Class.STATIC = 8;\nPHP.VM.Class.ABSTRACT = 16;\nPHP.VM.Class.FINAL = 32;\nPHP.VM.Class.INTERFACE = 64;\n/*\n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 24.6.2012\n * @website http://hertzen.com\n */\n\nPHP.VM.VariableHandler = function (ENV) {\n  var variables = {},\n      methods = function methods(variableName, setTo) {\n    if (setTo !== undefined) {\n      variables[variableName] = setTo;\n      return methods;\n    }\n\n    if (variables[variableName] === undefined) {\n      variables[variableName] = new PHP.VM.Variable();\n      variables[variableName][PHP.VM.Variable.prototype.DEFINED] = variableName;\n      variables[variableName].ENV = ENV;\n      variables[variableName][PHP.VM.Variable.prototype.NAME] = variableName;\n    }\n\n    return variables[variableName];\n  };\n\n  return methods;\n};\n\nPHP.VM.VariableProto = function () {};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.ASSIGN] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  this[VARIABLE.VARIABLE_TYPE] = undefined;\n\n  if (arguments.length > 1) {\n    // chaining, todo make it work for unlimited vars\n    this[COMPILER.VARIABLE_VALUE] = arguments[0][COMPILER.VARIABLE_VALUE] = arguments[1][COMPILER.VARIABLE_VALUE];\n  } else {\n    var val = combinedVariable[COMPILER.VARIABLE_VALUE]; // trigger get\n\n    if (combinedVariable[VARIABLE.TYPE] === VARIABLE.ARRAY) {\n      // Array assignment always involves value copying. Use the reference operator to copy an array by reference.\n      this[COMPILER.VARIABLE_VALUE] = val[COMPILER.METHOD_CALL]({}, COMPILER.ARRAY_CLONE);\n    } else {\n      if (combinedVariable[VARIABLE.TYPE] === VARIABLE.NULL && this[VARIABLE.TYPE] === VARIABLE.OBJECT) {\n        this.TMPCTX = combinedVariable[VARIABLE.INSTANCE];\n      }\n\n      this[COMPILER.VARIABLE_VALUE] = val;\n    }\n\n    if (combinedVariable[VARIABLE.TYPE] === VARIABLE.ARRAY || combinedVariable[VARIABLE.TYPE] === VARIABLE.OBJECT) {\n      this[COMPILER.VARIABLE_VALUE][COMPILER.CLASS_STORED].push(this);\n    }\n  }\n\n  return this;\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.INSTANCEOF] = function (instanceName) {\n  var COMPILER = PHP.Compiler.prototype;\n  var className,\n      classObj = this[COMPILER.VARIABLE_VALUE]; // search interfaces\n\n  if (classObj[PHP.VM.Class.INTERFACES].indexOf(instanceName) !== -1) {\n    return new PHP.VM.Variable(true);\n  } // search parents\n\n\n  do {\n    className = classObj[COMPILER.CLASS_NAME];\n\n    if (className === instanceName) {\n      return new PHP.VM.Variable(true);\n    }\n\n    classObj = Object.getPrototypeOf(classObj);\n  } while (className !== undefined);\n\n  return new PHP.VM.Variable(false);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.CONCAT] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  return new PHP.VM.Variable(this[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE] + \"\" + combinedVariable[VARIABLE.CAST_STRING][COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.ASSIGN_CONCAT] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  this.NO_ERROR = true;\n  var val = this[COMPILER.VARIABLE_VALUE]; // trigger get\n\n  if (this[this.TYPE] === this.NULL) {\n    this[COMPILER.VARIABLE_VALUE] = \"\" + combinedVariable[COMPILER.VARIABLE_VALUE];\n  } else {\n    this[COMPILER.VARIABLE_VALUE] = val + \"\" + combinedVariable[COMPILER.VARIABLE_VALUE];\n  }\n\n  this.NO_ERROR = false;\n  return this;\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.ASSIGN_PLUS] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  this[COMPILER.VARIABLE_VALUE] = this[COMPILER.VARIABLE_VALUE] - 0 + (combinedVariable[COMPILER.VARIABLE_VALUE] - 0);\n  return this;\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.ASSIGN_MINUS] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype;\n  this[COMPILER.VARIABLE_VALUE] = this[COMPILER.VARIABLE_VALUE] - combinedVariable[COMPILER.VARIABLE_VALUE];\n  return this;\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.ADD] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype,\n      val1 = this[COMPILER.VARIABLE_VALUE],\n      val2 = combinedVariable[COMPILER.VARIABLE_VALUE];\n\n  if (isNaN(val1 - 0)) {\n    val1 = 0;\n  }\n\n  if (isNaN(val2 - 0)) {\n    val2 = 0;\n  }\n\n  return new PHP.VM.Variable(val1 - 0 + (val2 - 0));\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.MUL] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable((this[COMPILER.VARIABLE_VALUE] - 0) * (combinedVariable[COMPILER.VARIABLE_VALUE] - 0));\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.DIV] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype;\n  var val = (this[COMPILER.VARIABLE_VALUE] - 0) / (combinedVariable[COMPILER.VARIABLE_VALUE] - 0);\n\n  if (val === Number.POSITIVE_INFINITY) {\n    this.ENV[COMPILER.ERROR](\"Division by zero\", PHP.Constants.E_WARNING, true);\n    return new PHP.VM.Variable();\n  }\n\n  return new PHP.VM.Variable(val);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.MOD] = function (combinedVariable) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] % combinedVariable[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.MINUS] = function (combinedVariable, post) {\n  var COMPILER = PHP.Compiler.prototype;\n\n  if (post === true) {\n    var after = combinedVariable[COMPILER.VARIABLE_VALUE] - 0,\n        before = this[COMPILER.VARIABLE_VALUE] - 0;\n    return new PHP.VM.Variable(before - after);\n  } else {\n    return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] - 0 - (combinedVariable[COMPILER.VARIABLE_VALUE] - 0));\n  }\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.METHOD_CALL] = function () {\n  var COMPILER = PHP.Compiler.prototype;\n  return this[COMPILER.VARIABLE_VALUE][PHP.Compiler.prototype.METHOD_CALL].apply(this[COMPILER.VARIABLE_VALUE], arguments);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.BOOLEAN_NOT] = function () {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(!this[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.IDENTICAL] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] === compareTo[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.NOT_IDENTICAL] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] !== compareTo[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.EQUAL] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      first = this,\n      second = compareTo,\n      cast;\n\n  if (first[this.TYPE] === this.OBJECT && second[this.TYPE] === this.OBJECT) {\n    cast = first[COMPILER.VARIABLE_VALUE].Native === true || second[COMPILER.VARIABLE_VALUE].Native === true;\n\n    if (cast) {\n      first = first[this.CAST_INT];\n      second = second[this.CAST_INT];\n    }\n  } else if (first[this.TYPE] === this.ARRAY && second[this.TYPE] === this.ARRAY) {\n    var firstVals = first[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE],\n        secondVals = second[COMPILER.VARIABLE_VALUE][PHP.VM.Class.PROPERTY + ARRAY.VALUES][COMPILER.VARIABLE_VALUE];\n\n    if (firstVals.length !== secondVals.length) {\n      return new PHP.VM.Variable(false);\n    }\n\n    var result = firstVals.every(function (val, index) {\n      return val[COMPILER.VARIABLE_VALUE] == secondVals[index][COMPILER.VARIABLE_VALUE];\n    });\n    return new PHP.VM.Variable(result);\n  }\n\n  return new PHP.VM.Variable(first[COMPILER.VARIABLE_VALUE] == second[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.SMALLER_OR_EQUAL] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] <= compareTo[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.GREATER_OR_EQUAL] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] >= compareTo[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.SMALLER] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE] < compareTo[COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.GREATER] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[this.CAST_DOUBLE][COMPILER.VARIABLE_VALUE] > compareTo[this.CAST_DOUBLE][COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.VariableProto.prototype[PHP.Compiler.prototype.BOOLEAN_OR] = function (compareTo) {\n  var COMPILER = PHP.Compiler.prototype;\n  return new PHP.VM.Variable(this[this.CAST_STRING][COMPILER.VARIABLE_VALUE] | compareTo[this.CAST_STRING][COMPILER.VARIABLE_VALUE]);\n};\n\nPHP.VM.Variable = function (arg) {\n  var value,\n      POST_MOD = 0,\n      __toString = \"__toString\",\n      COMPILER = PHP.Compiler.prototype,\n      setValue = function (newValue) {\n    var prev = value;\n\n    var setType = function (newValue) {\n      if (this[this.OVERLOADED] === undefined) {\n        if (newValue === undefined) {\n          newValue = null;\n        }\n\n        if (newValue instanceof PHP.VM.Variable) {\n          newValue = newValue[COMPILER.VARIABLE_VALUE];\n        }\n\n        if (typeof newValue === \"string\") {\n          this[this.TYPE] = this.STRING;\n        } else if (typeof newValue === \"function\") {\n          this[this.TYPE] = this.LAMBDA;\n        } else if (typeof newValue === \"number\") {\n          if (newValue % 1 === 0) {\n            this[this.TYPE] = this.INT;\n          } else {\n            this[this.TYPE] = this.FLOAT;\n          }\n        } else if (newValue === null) {\n          if (this[this.TYPE] === this.OBJECT && value instanceof PHP.VM.ClassPrototype) {\n            this[PHP.VM.Class.KILLED] = true;\n\n            if (value[COMPILER.CLASS_STORED].every(function (variable) {\n              return variable[PHP.VM.Class.KILLED] === true;\n            })) {\n              // all variable instances have been killed, can safely destruct\n              value[COMPILER.CLASS_DESTRUCT](this.TMPCTX);\n            }\n          }\n\n          this[this.TYPE] = this.NULL;\n        } else if (typeof newValue === \"boolean\") {\n          this[this.TYPE] = this.BOOL;\n        } else if (newValue instanceof PHP.VM.ClassPrototype) {\n          if (newValue[COMPILER.CLASS_NAME] === PHP.VM.Array.prototype.CLASS_NAME) {\n            this[this.TYPE] = this.ARRAY;\n          } else {\n            this[this.TYPE] = this.OBJECT;\n          }\n        } else if (newValue instanceof PHP.VM.Resource) {\n          this[this.TYPE] = this.RESOURCE;\n        } else {}\n\n        this[this.DEFINED] = true; // is variable a reference\n\n        if (this[this.REFERRING] !== undefined) {\n          this[this.REFERRING][COMPILER.VARIABLE_VALUE] = newValue;\n        } else {\n          value = newValue; // remove this later, debugging only\n\n          this.val = newValue;\n        }\n      }\n    }.bind(this);\n\n    setType(newValue);\n\n    if (typeof this[this.REGISTER_SETTER] === \"function\") {\n      var ret = this[this.REGISTER_SETTER](value);\n\n      if (ret === false) {\n        setType(prev);\n        value = prev;\n      }\n    }\n  }.bind(this); // something strange going on with context in node.js?? iterators_2.phpt\n\n\n  this.rand = Math.random();\n  this.NO_ERROR = false;\n  setValue.call(this, arg);\n\n  if (this[this.TYPE] === this.INT) {\n    this[this.VARIABLE_TYPE] = this.NEW_VARIABLE;\n  }\n\n  this[COMPILER.VARIABLE_CLONE] = function () {\n    var variable;\n\n    if (this[this.IS_REF]) {\n      return this;\n    }\n\n    switch (this[this.TYPE]) {\n      case this.NULL:\n      case this.BOOL:\n      case this.INT:\n      case this.FLOAT:\n      case this.STRING:\n        variable = new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE]);\n        break;\n\n      case this.OBJECT:\n      case this.RESOURCE:\n        return this;\n\n      case this.ARRAY:\n        variable = new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL]({}, COMPILER.ARRAY_CLONE));\n        break;\n\n      default:\n        return this;\n    }\n\n    variable[this.REFERRING] = this[this.REFERRING];\n    return variable;\n  };\n\n  this[this.REF] = function (variable) {\n    if (this === variable) {\n      /// hehehehehe referring yourself... results in thread lock\n      return this;\n    }\n\n    if (variable[this.VARIABLE_TYPE] === this.FUNCTION) {\n      this.ENV[COMPILER.ERROR](\"Only variables should be assigned by reference\", PHP.Constants.E_STRICT, true);\n      this[COMPILER.ASSIGN](variable);\n      return this;\n    }\n\n    var tmp = variable[COMPILER.VARIABLE_VALUE]; // trigger get\n    // call setter incase we need to complete array push transaction\n\n    if (typeof this[this.REGISTER_SETTER] === \"function\") {\n      this[this.REGISTER_SETTER]();\n    }\n\n    this[this.REFERRING] = variable;\n    this[this.DEFINED] = true;\n    variable[this.IS_REF] = true;\n    return this;\n  };\n\n  this[COMPILER.NEG] = function () {\n    return new PHP.VM.Variable(-this[COMPILER.VARIABLE_VALUE]);\n  };\n\n  this[COMPILER.PRE_INC] = function () {\n    this[COMPILER.VARIABLE_VALUE]++;\n    return this;\n  };\n\n  this[COMPILER.PRE_DEC] = function () {\n    this[COMPILER.VARIABLE_VALUE]--;\n    return this;\n  };\n\n  this[COMPILER.POST_INC] = function () {\n    this.NO_ERROR = true;\n    var tmp = this[COMPILER.VARIABLE_VALUE]; // trigger get, incase there is POST_MOD\n\n    if (this[this.DEFINED] !== true) {\n      this[COMPILER.VARIABLE_VALUE] = 0;\n    }\n\n    this.NO_ERROR = false;\n    POST_MOD++;\n    this.POST_MOD = POST_MOD;\n    return this;\n  };\n\n  this[COMPILER.POST_DEC] = function () {\n    var tmp = this[COMPILER.VARIABLE_VALUE]; // trigger get, incase there is POST_MOD\n\n    POST_MOD--;\n    this.POST_MOD = POST_MOD;\n    return this;\n  };\n\n  this[PHP.Compiler.prototype.UNSET] = function () {\n    setValue(null);\n    this[this.DEFINED] = this[this.NAME];\n\n    if (this[this.REFERRING] !== undefined) {\n      this[this.REFERRING][PHP.Compiler.prototype.UNSET]();\n    }\n  }; // property get proxy\n\n\n  this[COMPILER.CLASS_PROPERTY_GET] = function (ctx, propertyName, funcCall) {\n    var val,\n        $this = this;\n\n    if (this[this.REFERRING] !== undefined) {\n      $this = this[this.REFERRING];\n    }\n\n    if ($this[this.TYPE] !== this.OBJECT) {\n      val = new (this.ENV.$Class.Get(\"stdClass\"))(this);\n\n      if ($this[this.TYPE] === this.NULL || $this[this.TYPE] === this.BOOL && $this[COMPILER.VARIABLE_VALUE] === false || $this[this.TYPE] === this.STRING && $this[COMPILER.VARIABLE_VALUE].length === 0) {\n        if (funcCall !== true) {\n          if ($this[this.PROPERTY] !== true) {\n            this.ENV[COMPILER.ERROR](\"Creating default object from empty value\", PHP.Constants.E_WARNING, true);\n          }\n        }\n\n        $this[COMPILER.VARIABLE_VALUE] = val;\n      } else {\n        this.ENV[COMPILER.ERROR](\"Attempt to assign property of non-object\", PHP.Constants.E_WARNING, true);\n      }\n    } else {\n      val = $this[COMPILER.VARIABLE_VALUE];\n    }\n\n    return val[COMPILER.CLASS_PROPERTY_GET].apply(val, arguments);\n  };\n\n  Object.defineProperty(this, COMPILER.VARIABLE_VALUE, {\n    get: function get() {\n      var $this = this,\n          returning;\n\n      if (this[this.REFERRING] !== undefined) {\n        $this = this[this.REFERRING];\n      }\n\n      if (typeof this[this.REGISTER_GETTER] === \"function\") {\n        var returned = this[this.REGISTER_GETTER]();\n\n        if (returned instanceof PHP.VM.Variable) {\n          this[this.TYPE] = returned[this.TYPE];\n          this[this.DEFINED] = returned[this.DEFINED];\n          return returned[COMPILER.VARIABLE_VALUE];\n        }\n      }\n\n      if ($this[this.DEFINED] !== true && $this[COMPILER.SUPPRESS] !== true) {\n        if ($this[this.CONSTANT] === true) {\n          this.ENV[COMPILER.ERROR](\"Use of undefined constant \" + $this[this.DEFINED] + \" - assumed '\" + $this[this.DEFINED] + \"'\", PHP.Constants.E_CORE_NOTICE, true);\n          $this[this.TYPE] = this.STRING;\n          returning = $this[this.DEFINED];\n          $this[COMPILER.VARIABLE_VALUE] = $this[this.DEFINED];\n          $this[this.DEFINED] = true;\n          return returning;\n        } else {\n          if (this.NO_ERROR !== true) {\n            this.ENV[COMPILER.ERROR](\"Undefined \" + ($this[this.PROPERTY] === true ? \"property\" : \"variable\") + \": \" + $this[this.DEFINED], PHP.Constants.E_NOTICE, true);\n          }\n        }\n      }\n\n      if (this[this.REFERRING] === undefined) {\n        returning = value;\n      } else {\n        var referLoop = $this;\n\n        while (referLoop[this.REFERRING] !== undefined) {\n          referLoop = referLoop[this.REFERRING];\n        }\n\n        this[this.TYPE] = referLoop[this.TYPE];\n        returning = $this[COMPILER.VARIABLE_VALUE];\n      } // perform POST_MOD change\n\n\n      if (POST_MOD !== 0) {\n        var setPOST_MOD = POST_MOD;\n        POST_MOD = 0; // reset counter\n\n        $this[COMPILER.VARIABLE_VALUE] += setPOST_MOD - 0; //     value = POST_MOD + (value - 0);\n      }\n\n      return returning;\n    },\n    set: setValue\n  });\n  Object.defineProperty(this, this.CAST_BOOL, {\n    get: function get() {\n      // http://www.php.net/manual/en/language.types.boolean.php#language.types.boolean.casting\n      var value = this[COMPILER.VARIABLE_VALUE]; // trigger get, incase there is POST_MOD\n\n      switch (this[this.TYPE]) {\n        case this.INT:\n        case this.FLOAT:\n          if (value === 0) {\n            return new PHP.VM.Variable(false);\n          } else {\n            return new PHP.VM.Variable(true);\n          }\n\n          break;\n\n        case this.STRING:\n          if (value.length === 0 || value === \"0\") {\n            return new PHP.VM.Variable(false);\n          } else {\n            return new PHP.VM.Variable(true);\n          }\n\n          break;\n\n        case this.ARRAY:\n          if (value[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE].length === 0) {\n            return new PHP.VM.Variable(false);\n          } else {\n            return new PHP.VM.Variable(true);\n          }\n\n          break;\n\n        case this.OBJECT:\n          // TODO\n          return new PHP.VM.Variable(true);\n\n        case this.NULL:\n          return new PHP.VM.Variable(false);\n          break;\n      }\n\n      return this;\n    }\n  });\n  Object.defineProperty(this, this.CAST_INT, {\n    get: function get() {\n      // http://www.php.net/manual/en/language.types.integer.php\n      var value = this[COMPILER.VARIABLE_VALUE]; // trigger get, incase there is POST_MOD\n\n      switch (this[this.TYPE]) {\n        case this.BOOL:\n          return new PHP.VM.Variable(value === true ? 1 : 0);\n          break;\n\n        case this.FLOAT:\n          return new PHP.VM.Variable(Math.floor(value));\n          break;\n\n        case this.STRING:\n          if (isNaN(parseInt(value, 10))) {\n            return new PHP.VM.Variable(0);\n          } else {\n            return new PHP.VM.Variable(parseInt(value, 10));\n          }\n\n          break;\n\n        case this.OBJECT:\n          this.ENV[COMPILER.ERROR](\"Object of class \" + value[COMPILER.CLASS_NAME] + \" could not be converted to int\", PHP.Constants.E_NOTICE, true);\n          return new PHP.VM.Variable();\n          break;\n\n        default:\n          return this;\n      }\n    }\n  });\n  Object.defineProperty(this, this.CAST_DOUBLE, {\n    get: function get() {\n      // http://www.php.net/manual/en/language.types.integer.php\n      var value = this[COMPILER.VARIABLE_VALUE],\n          // trigger get, incase there is POST_MOD\n      ret;\n\n      switch (this[this.TYPE]) {\n        case this.BOOL:\n          return new PHP.VM.Variable(value === true ? 1.0 : 0.0);\n          break;\n\n        case this.INT:\n          ret = new PHP.VM.Variable(parseFloat(value));\n          ret[this.TYPE] = this.FLOAT;\n          return ret;\n          break;\n\n        case this.STRING:\n          if (isNaN(parseFloat(value))) {\n            ret = new PHP.VM.Variable(0.0);\n          } else {\n            ret = new PHP.VM.Variable(parseFloat(value));\n          }\n\n          ret[this.TYPE] = this.FLOAT;\n          return ret;\n          break;\n\n        default:\n          return this;\n      }\n    }\n  });\n  Object.defineProperty(this, this.CAST_STRING, {\n    get: function get() {\n      //   http://www.php.net/manual/en/language.types.string.php#language.types.string.casting\n      var value = this[COMPILER.VARIABLE_VALUE]; // trigger get, incase there is POST_MOD\n\n      if (value instanceof PHP.VM.ClassPrototype && value[COMPILER.CLASS_NAME] !== PHP.VM.Array.prototype.CLASS_NAME) {\n        // class\n        // check for __toString();\n        if (typeof value[PHP.VM.Class.METHOD + __toString.toLowerCase()] === \"function\") {\n          try {\n            var val = value[COMPILER.METHOD_CALL](this, __toString);\n          } catch (e) {\n            this.ENV[COMPILER.ERROR](\"Method \" + value[COMPILER.CLASS_NAME] + \"::\" + __toString + \"() must not throw an exception\", PHP.Constants.E_ERROR, true, false, true);\n            return new PHP.VM.Variable(\"\");\n          }\n\n          if (val[this.TYPE] !== this.STRING) {\n            this.ENV[COMPILER.ERROR](\"Method \" + value[COMPILER.CLASS_NAME] + \"::\" + __toString + \"() must return a string value\", PHP.Constants.E_RECOVERABLE_ERROR, true);\n            return new PHP.VM.Variable(\"\");\n          }\n\n          val[this.VARIABLE_TYPE] = this.FUNCTION;\n          return val; //  return new PHP.VM.Variable( value[PHP.VM.Class.METHOD + __toString ]() );\n        } else {\n          this.ENV[COMPILER.ERROR](\"Object of class \" + value[COMPILER.CLASS_NAME] + \" could not be converted to string\", PHP.Constants.E_RECOVERABLE_ERROR, true);\n          return new PHP.VM.Variable(\"\");\n        }\n      } else if (this[this.TYPE] === this.BOOL) {\n        return new PHP.VM.Variable(value ? \"1\" : \"\");\n      } else if (this[this.TYPE] === this.INT) {\n        return new PHP.VM.Variable(value + \"\");\n      } else if (this[this.TYPE] === this.NULL) {\n        return new PHP.VM.Variable(\"\");\n      }\n\n      return this;\n    }\n  });\n\n  this[COMPILER.DIM_UNSET] = function (ctx, variable) {\n    var value = this[COMPILER.VARIABLE_VALUE]; // trigger get\n\n    if (this[this.TYPE] !== this.ARRAY) {\n      if (this[this.TYPE] === this.OBJECT && value[PHP.VM.Class.INTERFACES].indexOf(\"ArrayAccess\") !== -1) {\n        value[COMPILER.METHOD_CALL](ctx, \"offsetUnset\", variable)[COMPILER.VARIABLE_VALUE]; // trigger offsetUnset\n      }\n    } else {\n      value[COMPILER.METHOD_CALL](ctx, \"offsetUnset\", variable);\n    }\n  };\n\n  this[COMPILER.DIM_ISSET] = function (ctx, variable) {\n    var $this = this;\n\n    if (this[this.REFERRING] !== undefined) {\n      var referLoop = $this;\n\n      while (referLoop[this.REFERRING] !== undefined) {\n        referLoop = referLoop[this.REFERRING];\n      }\n\n      $this = referLoop;\n    }\n\n    if ($this[this.TYPE] !== this.ARRAY) {\n      if ($this[this.TYPE] === this.OBJECT && $this.val[PHP.VM.Class.INTERFACES].indexOf(\"ArrayAccess\") !== -1) {\n        var exists = $this.val[COMPILER.METHOD_CALL](ctx, \"offsetExists\", variable)[COMPILER.VARIABLE_VALUE]; // trigger offsetExists\n\n        return exists;\n      } else {\n        return false;\n      }\n    }\n\n    var returning = $this.val[COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_GET, variable);\n    return returning[this.DEFINED] === true;\n  };\n\n  this[COMPILER.DIM_EMPTY] = function (ctx, variable) {\n    if (this[this.TYPE] !== this.ARRAY) {\n      if (this[this.TYPE] === this.OBJECT && value[PHP.VM.Class.INTERFACES].indexOf(\"ArrayAccess\") !== -1) {\n        var exists = value[COMPILER.METHOD_CALL](ctx, \"offsetExists\", variable)[COMPILER.VARIABLE_VALUE]; // trigger offsetExists\n\n        if (exists === true) {\n          var val = value[COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_GET, variable); // trigger offsetGet\n\n          return val;\n        } else {\n          return true;\n        }\n      } else {\n        // looking in a non-existant array, so obviously its empty\n        return true;\n      }\n    } else {\n      return this[COMPILER.DIM_FETCH](ctx, variable);\n    }\n  };\n\n  Object.defineProperty(this, COMPILER.DIM_FETCH, {\n    get: function get() {\n      return function (ctx, variable) {\n        var $this = this;\n\n        if (variable instanceof PHP.VM.Variable && variable[this.TYPE] === this.OBJECT) {\n          this.ENV[COMPILER.ERROR](\"Illegal offset type\", PHP.Constants.E_WARNING, true);\n          return new PHP.VM.Variable();\n        }\n\n        if (typeof this[this.REGISTER_GETTER] === \"function\") {\n          var returned = this[this.REGISTER_GETTER]();\n\n          if (returned instanceof PHP.VM.Variable) {\n            this[this.TYPE] = returned[this.TYPE];\n            this[this.DEFINED] = returned[this.DEFINED];\n            var item = returned[COMPILER.DIM_FETCH](ctx, variable);\n            /*\n            if (returned[ this.OVERLOADING ] !== undefined) {\n                item[ this.OVERLOADED ] = returned[ this.OVERLOADING ];\n             }\n             item[ this.REGISTER_SETTER ] = function() {\n                 if (item[ this.OVERLOADING ] !== undefined) {\n                    this.ENV[ COMPILER.ERROR ](\"Indirect modification of overloaded element of \" + item[ this.OVERLOADING ] + \" has no effect\", PHP.Constants.E_CORE_NOTICE, true );\n                    item[ this.OVERLOADED ] = item[ this.OVERLOADING ];\n                //   item[ this.OVERLOADED ] = returned[ this.OVERLOADING ];\n                }\n            }\n            */\n\n            return item;\n          }\n        }\n\n        if (this[this.TYPE] === this.INT) {\n          this.ENV[COMPILER.ERROR](\"Cannot use a scalar value as an array\", PHP.Constants.E_WARNING, true);\n          return new PHP.VM.Variable();\n        } else if (this[this.TYPE] === this.STRING) {\n          if (variable[this.TYPE] !== this.INT) {\n            this.ENV[COMPILER.ERROR](\"Illegal string offset '\" + variable[COMPILER.VARIABLE_VALUE] + \"'\", PHP.Constants.E_WARNING, true);\n            return new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE]);\n          } else {\n            var ret = new PHP.VM.Variable(this[COMPILER.VARIABLE_VALUE].substr(variable[COMPILER.VARIABLE_VALUE], 1));\n\n            ret[this.REGISTER_SETTER] = function (value) {\n              this[COMPILER.VARIABLE_VALUE] = this[COMPILER.VARIABLE_VALUE].substr(0, variable[COMPILER.VARIABLE_VALUE]) + value + this[COMPILER.VARIABLE_VALUE].substr(1 + variable[COMPILER.VARIABLE_VALUE]);\n            }.bind(this);\n\n            return ret;\n          }\n        }\n\n        if (this[this.REFERRING] !== undefined) {\n          $this = this[this.REFERRING];\n        }\n\n        if ($this[this.TYPE] !== this.ARRAY) {\n          if ($this[this.TYPE] === this.OBJECT && value[PHP.VM.Class.INTERFACES].indexOf(\"ArrayAccess\") !== -1) {\n            var dimHandler = new PHP.VM.Variable();\n\n            dimHandler[this.REGISTER_GETTER] = function () {\n              var val = value[COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_GET, variable);\n              val[$this.OVERLOADING] = value[COMPILER.CLASS_NAME];\n\n              if (val[this.DEFINED] !== true) {\n                this.ENV[COMPILER.ERROR](\"Undefined \" + (variable[this.TYPE] === this.INT ? \"offset\" : \"index\") + \": \" + variable[COMPILER.VARIABLE_VALUE], PHP.Constants.E_CORE_NOTICE, true);\n                return new PHP.VM.Variable();\n              }\n\n              if (val[this.TYPE] === this.ARRAY) {\n                val[COMPILER.VARIABLE_VALUE][this.REGISTER_ARRAY_SETTER] = function () {\n                  this.ENV[COMPILER.ERROR](\"Indirect modification of overloaded element of \" + value[COMPILER.CLASS_NAME] + \" has no effect\", PHP.Constants.E_CORE_NOTICE, true);\n                  return false;\n                }.bind(val);\n              }\n\n              return val;\n            };\n\n            dimHandler[this.REGISTER_SETTER] = function (val) {\n              if (val === null) {\n                this.ENV[COMPILER.ERROR](\"Indirect modification of overloaded element of \" + value[COMPILER.CLASS_NAME] + \" has no effect\", PHP.Constants.E_CORE_NOTICE, true);\n              }\n\n              var val = value[COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_SET, variable, val);\n\n              if (val[this.DEFINED] !== true) {\n                this.ENV[COMPILER.ERROR](\"Undefined \" + (variable[this.TYPE] === this.INT ? \"offset\" : \"index\") + \": \" + variable[COMPILER.VARIABLE_VALUE], PHP.Constants.E_CORE_NOTICE, true);\n                return new PHP.VM.Variable();\n              }\n\n              return val;\n            };\n\n            dimHandler[COMPILER.POST_INC] = function () {\n              var val = value[COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_GET, variable); // trigger get\n\n              this.ENV[COMPILER.ERROR](\"Indirect modification of overloaded element of \" + value[COMPILER.CLASS_NAME] + \" has no effect\", PHP.Constants.E_CORE_NOTICE, true);\n              return val;\n            };\n\n            dimHandler[this.REF] = function () {\n              this.ENV[PHP.Compiler.prototype.ERROR](\"Cannot assign by reference to overloaded object\", PHP.Constants.E_ERROR, true);\n            };\n\n            return dimHandler;\n          } else {\n            var notdefined = false; // cache DEFINED value\n\n            if ($this[this.DEFINED] !== true && $this[COMPILER.SUPPRESS] !== true) {\n              notdefined = $this[this.DEFINED];\n            }\n\n            $this[COMPILER.VARIABLE_VALUE] = this.ENV.array([]);\n\n            if (notdefined !== false) {\n              $this[this.DEFINED] = notdefined;\n            }\n          }\n        }\n\n        var returning;\n\n        if (value === null) {\n          returning = this[COMPILER.VARIABLE_VALUE][COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_GET, variable);\n        } else {\n          returning = value[COMPILER.METHOD_CALL](ctx, COMPILER.ARRAY_GET, variable);\n        }\n\n        if (returning[this.DEFINED] !== true) {\n          var saveFunc = returning[this.REGISTER_SETTER],\n              arrThis = this;\n\n          returning[this.REGISTER_SETTER] = function (val) {\n            arrThis[this.DEFINED] = true;\n\n            if (saveFunc !== undefined) {\n              saveFunc(val);\n            }\n          };\n\n          if (this[this.DEFINED] !== true) {\n            returning[this.DEFINED] = this[this.DEFINED];\n          } //\n\n        }\n\n        return returning;\n      };\n    },\n    set: setValue\n  });\n  return this;\n};\n\nPHP.VM.Variable.prototype = new PHP.VM.VariableProto();\nPHP.VM.Variable.prototype.NAME = \"$Name\";\nPHP.VM.Variable.prototype.DEFINED = \"$Defined\";\nPHP.VM.Variable.prototype.CAST_INT = \"$Int\";\nPHP.VM.Variable.prototype.CAST_DOUBLE = \"$Double\";\nPHP.VM.Variable.prototype.CAST_BOOL = \"$Bool\";\nPHP.VM.Variable.prototype.CAST_STRING = \"$String\";\nPHP.VM.Variable.prototype.NULL = 0;\nPHP.VM.Variable.prototype.BOOL = 1;\nPHP.VM.Variable.prototype.INT = 2;\nPHP.VM.Variable.prototype.FLOAT = 3;\nPHP.VM.Variable.prototype.STRING = 4;\nPHP.VM.Variable.prototype.ARRAY = 5;\nPHP.VM.Variable.prototype.OBJECT = 6;\nPHP.VM.Variable.prototype.RESOURCE = 7;\nPHP.VM.Variable.prototype.LAMBDA = 8; // variable types\n\nPHP.VM.Variable.prototype.FUNCTION = 0;\nPHP.VM.Variable.prototype.NEW_VARIABLE = 1;\nPHP.VM.Variable.prototype.OVERLOADING = \"$Overloading\";\nPHP.VM.Variable.prototype.OVERLOADED = \"$Overloaded\";\nPHP.VM.Variable.prototype.TYPE = \"type\";\nPHP.VM.Variable.prototype.VARIABLE_TYPE = \"vtype\";\nPHP.VM.Variable.prototype.PROPERTY = \"$Property\";\nPHP.VM.Variable.prototype.CONSTANT = \"$Constant\";\nPHP.VM.Variable.prototype.CLASS_CONSTANT = \"$ClassConstant\";\nPHP.VM.Variable.prototype.REF = \"$Ref\";\nPHP.VM.Variable.prototype.IS_REF = \"$IsRef\";\nPHP.VM.Variable.prototype.REFERRING = \"$Referring\";\nPHP.VM.Variable.prototype.REGISTER_SETTER = \"$Setter\";\nPHP.VM.Variable.prototype.REGISTER_ARRAY_SETTER = \"$ASetter\";\nPHP.VM.Variable.prototype.REGISTER_GETTER = \"$Getter\";\nPHP.VM.Variable.prototype.INSTANCE = \"$Instance\";\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 27.6.2012 \n * @website http://hertzen.com\n */\n\nPHP.VM.Array = function (ENV) {\n  var COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      ARRAY = PHP.VM.Array.prototype,\n      CLASS = PHP.VM.Class,\n      $this = this;\n  ENV.$Class.New(\"ArrayObject\", 0, {}, function (M) {\n    // internal storage for keys/values\n    M[COMPILER.CLASS_PROPERTY]($this.KEYS, PHP.VM.Class.PRIVATE, [])[COMPILER.CLASS_PROPERTY]($this.VALUES, PHP.VM.Class.PRIVATE, []) // internal key of largest previously used (int) key\n    [COMPILER.CLASS_PROPERTY]($this.INTKEY, PHP.VM.Class.PRIVATE, -1) // internal pointer\n    [COMPILER.CLASS_PROPERTY]($this.POINTER, PHP.VM.Class.PRIVATE, 0)\n    /*\n     * __construct method\n     */\n    [COMPILER.CLASS_METHOD](\"__construct\", PHP.VM.Class.PUBLIC, [{\n      \"name\": \"input\"\n    }], false, function ($) {\n      this[COMPILER.CLASS_NAME] = $this.CLASS_NAME;\n      var items = $('input')[COMPILER.VARIABLE_VALUE];\n\n      if (Array.isArray(items)) {\n        items.forEach(function (item) {\n          // this.$Prop( this, $this.VALUES ).$.push( item[ COMPILER.ARRAY_VALUE ] );\n          if (item[COMPILER.ARRAY_VALUE][VARIABLE.CLASS_CONSTANT] !== true && item[COMPILER.ARRAY_VALUE][VARIABLE.CONSTANT] !== true) {\n            this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE].push(new PHP.VM.Variable(item[COMPILER.ARRAY_VALUE][COMPILER.VARIABLE_VALUE]));\n          } else {\n            this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE].push(item[COMPILER.ARRAY_VALUE]);\n          }\n\n          if (item[COMPILER.ARRAY_KEY] !== undefined) {\n            if (!item[COMPILER.ARRAY_KEY] instanceof PHP.VM.Variable || item[COMPILER.ARRAY_KEY][VARIABLE.CLASS_CONSTANT] !== true && item[COMPILER.ARRAY_KEY][VARIABLE.CONSTANT] !== true) {\n              var key = item[COMPILER.ARRAY_KEY] instanceof PHP.VM.Variable ? item[COMPILER.ARRAY_KEY][COMPILER.VARIABLE_VALUE] : item[COMPILER.ARRAY_KEY];\n\n              if (key === true || key === false) {\n                key = key === true ? 1 : 0;\n              }\n\n              if (/^\\d+$/.test(key)) {\n                // integer key\n                this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].push(key); // todo complete\n\n                this.$Prop(this, $this.INTKEY)[COMPILER.VARIABLE_VALUE] = Math.max(this.$Prop(this, $this.INTKEY)[COMPILER.VARIABLE_VALUE], key);\n              } else {\n                // custom text key\n                this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].push(key);\n              }\n            } else {\n              // class constant as key\n              this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].push(item[COMPILER.ARRAY_KEY]);\n            }\n          } else {\n            this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].push(++this.$Prop(this, $this.INTKEY)[COMPILER.VARIABLE_VALUE]);\n          }\n        }, this);\n      }\n    })\n    /*\n     * append\n     */\n    [COMPILER.CLASS_METHOD](\"append\", PHP.VM.Class.PUBLIC, [{\n      \"name\": \"value\"\n    }], false, function ($) {\n      var append = function (item) {\n        if (item[VARIABLE.CLASS_CONSTANT] !== true && item[VARIABLE.CONSTANT] !== true) {\n          this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE].push(new PHP.VM.Variable(item[COMPILER.VARIABLE_VALUE]));\n        } else {\n          this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE].push(item[COMPILER.ARRAY_VALUE]);\n        }\n\n        this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].push(++this.$Prop(this, $this.INTKEY)[COMPILER.VARIABLE_VALUE]);\n      }.bind(this);\n\n      var value = $(\"value\");\n\n      if (value[VARIABLE.TYPE] === VARIABLE.STRING) {\n        append($(\"value\"));\n      }\n    })\n    /*\n     * Custom $clone method, shouldn't be triggerable by php manually\n     */\n    [COMPILER.CLASS_METHOD](COMPILER.ARRAY_CLONE, PHP.VM.Class.PUBLIC, [{\n      \"name\": \"index\"\n    }], false, function ($) {\n      var newArr = new (ENV.$Class.Get(\"ArrayObject\"))(ENV); // copy keys, can do direct copy ( probably? ) \n\n      var keys = newArr[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.KEYS][COMPILER.VARIABLE_VALUE];\n      this[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.KEYS][COMPILER.VARIABLE_VALUE].forEach(function (key) {\n        keys.push(key);\n      }); // copy values, need to do deep clone\n\n      var values = newArr[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE];\n      this[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.VALUES][COMPILER.VARIABLE_VALUE].forEach(function (valueObj) {\n        values.push(valueObj[COMPILER.VARIABLE_CLONE]());\n      }); // reset pointers\n\n      this[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.POINTER][COMPILER.VARIABLE_VALUE] = 0; // copy key index\n\n      newArr[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.INTKEY][COMPILER.VARIABLE_VALUE] = this[PHP.VM.Class.PROPERTY + PHP.VM.Array.prototype.INTKEY][COMPILER.VARIABLE_VALUE];\n      return newArr;\n    })\n    /*\n     * offsetUnset method\n     */\n    [COMPILER.CLASS_METHOD](\"offsetUnset\", PHP.VM.Class.PUBLIC, [{\n      \"name\": \"index\"\n    }], false, function ($) {\n      var value = $('index')[COMPILER.VARIABLE_VALUE];\n      var keys = this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE],\n          removeIndex = keys.indexOf(value);\n\n      if (removeIndex !== -1) {\n        keys.splice(removeIndex, 1);\n        this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE].splice(removeIndex, 1);\n      }\n\n      if (removeIndex <= this[CLASS.PROPERTY + ARRAY.POINTER][COMPILER.VARIABLE_VALUE]) {\n        this[CLASS.PROPERTY + ARRAY.POINTER][COMPILER.VARIABLE_VALUE]--;\n      }\n    }) // remap keys\n    [COMPILER.CLASS_METHOD](\"remap\", PHP.VM.Class.PRIVATE, [], false, function ($) {\n      this[CLASS.PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE].forEach(function (key, index) {\n        // todo take into account other type of keys\n        if (typeof key === \"number\" && key % 1 === 0) {\n          this[CLASS.PROPERTY + ARRAY.KEYS][COMPILER.VARIABLE_VALUE][index]--;\n        }\n      }, this);\n    })\n    /*\n     * offsetGet method\n     */\n    [COMPILER.CLASS_METHOD](COMPILER.ARRAY_GET, PHP.VM.Class.PUBLIC, [{\n      \"name\": \"index\"\n    }], false, function ($) {\n      var index = -1,\n          value = $('index')[COMPILER.VARIABLE_VALUE];\n      this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].some(function (item, i) {\n        if (item instanceof PHP.VM.Variable) {\n          item = item[COMPILER.VARIABLE_VALUE];\n        }\n\n        if (item === value) {\n          index = i;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (index !== -1) {\n        var item = this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE][index];\n\n        if (this[VARIABLE.REGISTER_ARRAY_SETTER] !== undefined) {\n          var func = this[VARIABLE.REGISTER_ARRAY_SETTER];\n\n          item[VARIABLE.REGISTER_SETTER] = function (val) {\n            return func(val);\n          };\n        }\n\n        return item;\n      } else {\n        // no such key found in array, let's create one\n        //    \n        var variable = new PHP.VM.Variable();\n\n        variable[VARIABLE.REGISTER_SETTER] = function () {\n          // the value was actually defined, let's register item into array\n          var key = ++this.$Prop(this, $this.INTKEY)[COMPILER.VARIABLE_VALUE];\n          this.$Prop(this, $this.KEYS)[COMPILER.VARIABLE_VALUE].push($('index')[COMPILER.VARIABLE_VALUE] !== null ? $('index')[COMPILER.VARIABLE_VALUE] : key);\n          this.$Prop(this, $this.VALUES)[COMPILER.VARIABLE_VALUE].push(variable);\n          delete variable[VARIABLE.REGISTER_SETTER];\n        }.bind(this);\n\n        variable[VARIABLE.DEFINED] = false;\n        return variable;\n      }\n    }).Create();\n  });\n  /*\n  Convert JavaScript array/object into a PHP array \n   */\n\n  PHP.VM.Array.arrayItem = function (key, value) {\n    var obj = {};\n    obj[COMPILER.ARRAY_KEY] = key instanceof PHP.VM.Variable ? key : new PHP.VM.Variable(key);\n    obj[COMPILER.ARRAY_VALUE] = value instanceof PHP.VM.Variable ? value : new PHP.VM.Variable(value);\n    return obj;\n  };\n\n  PHP.VM.Array.fromObject = function (items, depth) {\n    var COMPILER = PHP.Compiler.prototype,\n        arr = [],\n        obj,\n        depth = depth === undefined ? 0 : depth,\n        addItem = function (value, key) {\n      obj = {};\n      obj[PHP.Compiler.prototype.ARRAY_KEY] = /^\\d+$/.test(key) ? key - 0 : key; // use int for int\n\n      if (value instanceof PHP.VM.Variable) {\n        obj[PHP.Compiler.prototype.ARRAY_VALUE] = value;\n      } else if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(value) === \"object\" && value !== null) {\n        if (depth >= this.$ini.max_input_nesting_level) {\n          throw Error;\n        } else {\n          obj[PHP.Compiler.prototype.ARRAY_VALUE] = PHP.VM.Array.fromObject.call(this, value, depth + 1);\n        }\n      } else {\n        obj[PHP.Compiler.prototype.ARRAY_VALUE] = new PHP.VM.Variable(value);\n      }\n\n      arr.push(obj);\n    }.bind(this);\n\n    var $this = this;\n\n    if (Array.isArray(items)) {\n      items.forEach(addItem);\n    } else {\n      Object.keys(items).forEach(function (key) {\n        try {\n          addItem(items[key], key);\n        } catch (e) {\n          // error all the way down the array\n          if (depth !== 0) {\n            throw Error;\n          } else if ($this.$ini.track_errors == 1) {\n            $this[COMPILER.GLOBAL](\"php_errormsg\")[COMPILER.VARIABLE_VALUE] = \"Unknown: Input variable nesting level exceeded \" + $this.$ini.max_input_nesting_level + \". To increase the limit change max_input_nesting_level in php.ini.\";\n          }\n        }\n      }), this;\n    }\n\n    var arr = this.array(arr);\n    return arr;\n  };\n};\n\nPHP.VM.Array.prototype.KEYS = \"keys\";\nPHP.VM.Array.prototype.VALUES = \"values\";\nPHP.VM.Array.prototype.INTKEY = \"intkey\";\nPHP.VM.Array.prototype.POINTER = \"pointer\";\nPHP.VM.Array.prototype.CLASS_NAME = \"array\";\n\nPHP.VM.ResourceManager = function () {\n  var resources = [],\n      RESOURCE = PHP.VM.ResourceManager.prototype,\n      id = 0,\n      methods = {};\n\n  methods[RESOURCE.REGISTER] = function () {\n    var resource = new PHP.VM.Resource(id++);\n    resources.push(resource);\n    return resource;\n  };\n\n  return methods;\n};\n\nPHP.VM.ResourceManager.prototype.ID = \"$Id\";\nPHP.VM.ResourceManager.prototype.REGISTER = \"$Register\";\n\nPHP.VM.Resource = function (id) {\n  this[PHP.VM.ResourceManager.prototype.ID] = id;\n};\n\nPHP.VM.Constants = function (predefined, ENV) {\n  var constants = {},\n      constantVariables = {},\n      COMPILER = PHP.Compiler.prototype,\n      VARIABLE = PHP.VM.Variable.prototype,\n      methods = {};\n  Object.keys(predefined).forEach(function (key) {\n    constants[key] = predefined[key];\n  }, this);\n\n  methods[COMPILER.CONSTANT_GET] = function (constantName) {\n    var variable = new PHP.VM.Variable(constants[constantName]);\n\n    if (constants[constantName] === undefined) {\n      if (constantVariables[constantName] === undefined) {\n        constantVariables[constantName] = variable;\n      } else {\n        return constantVariables[constantName];\n      }\n\n      variable[VARIABLE.DEFINED] = constantName;\n      variable[VARIABLE.CONSTANT] = true;\n    }\n\n    return variable;\n  };\n\n  methods[COMPILER.CONSTANT_DEFINED] = function (constantName) {\n    return constants[constantName] === undefined;\n  };\n\n  methods[COMPILER.CONSTANT_SET] = function (constantName, constantValue) {\n    if (constantVariables[constantName] !== undefined) {\n      constantVariables[constantName][COMPILER.VARIABLE_VALUE] = constantValue;\n    }\n\n    constants[constantName] = constantValue;\n  };\n\n  return methods;\n}; // manually defined constants\n\n\nPHP.Constants.PHP_BINARY = \"/bin/php\";\n/* automatically built from DateTime.php*/\n\nPHP.VM.Class.Predefined.DateTime = function (ENV, $$) {\n  ENV.$Class.New(\"DateTime\", 0, {}, function (M, $, $$) {\n    M.Constant(\"ATOM\", $$(\"Y-m-d\\\\TH:i:sP\")).Constant(\"COOKIE\", $$(\"l, d-M-y H:i:s T\")).Constant(\"ISO8601\", $$(\"Y-m-d\\\\TH:i:sO\")).Constant(\"RFC822\", $$(\"D, d M y H:i:s O\")).Constant(\"RFC850\", $$(\"l, d-M-y H:i:s T\")).Constant(\"RFC1036\", $$(\"D, d M y H:i:s O\")).Constant(\"RFC1123\", $$(\"D, d M Y H:i:s O\")).Constant(\"RFC2822\", $$(\"D, d M Y H:i:s O\")).Constant(\"RFC3339\", $$(\"Y-m-d\\\\TH:i:sP\")).Constant(\"RSS\", $$(\"D, d M Y H:i:s O\")).Constant(\"W3C\", $$(\"Y-m-d\\\\TH:i:sP\")).Method(\"__construct\", 1, [{\n      name: \"time\",\n      d: $$(\"now\")\n    }, {\n      name: \"timezone\",\n      d: $$(null),\n      p: \"DateTimeZone\"\n    }], false, function ($, ctx, $Static) {}).Method(\"add\", 1, [{\n      name: \"interval\",\n      p: \"DateInterval\"\n    }], false, function ($, ctx, $Static) {}).Method(\"createFromFormat\", 9, [{\n      name: \"format\",\n      p: \"string\"\n    }, {\n      name: \"time\",\n      p: \"string\"\n    }, {\n      name: \"timezone\",\n      p: \"DateTimeZone\"\n    }], false, function ($, ctx, $Static) {}).Method(\"diff\", 1, [{\n      name: \"datetime2\",\n      p: \"DateTime\"\n    }, {\n      name: \"absolute\",\n      d: $$(false)\n    }], false, function ($, ctx, $Static) {}).Method(\"format\", 1, [{\n      name: \"format\"\n    }], false, function ($, ctx, $Static) {}).Method(\"getLastErrors\", 9, [], false, function ($, ctx, $Static) {}).Method(\"getOffset\", 1, [], false, function ($, ctx, $Static) {}).Method(\"getTimestamp\", 1, [], false, function ($, ctx, $Static) {}).Method(\"getTimezone\", 1, [], false, function ($, ctx, $Static) {}).Method(\"modify\", 1, [{\n      name: \"modify\"\n    }], false, function ($, ctx, $Static) {}).Method(\"__set_state\", 9, [{\n      name: \"array\",\n      p: \"array\"\n    }], false, function ($, ctx, $Static) {}).Method(\"setDate\", 1, [{\n      name: \"year\"\n    }, {\n      name: \"month\"\n    }, {\n      name: \"day\"\n    }], false, function ($, ctx, $Static) {}).Method(\"setISODate\", 1, [{\n      name: \"year\"\n    }, {\n      name: \"week\"\n    }, {\n      name: \"day\",\n      d: $$(1)\n    }], false, function ($, ctx, $Static) {}).Method(\"setTime\", 1, [{\n      name: \"hour\"\n    }, {\n      name: \"minute\"\n    }, {\n      name: \"second\",\n      d: $$(0)\n    }], false, function ($, ctx, $Static) {}).Method(\"setTimestamp\", 1, [{\n      name: \"unixtimestamp\"\n    }], false, function ($, ctx, $Static) {}).Method(\"setTimezone\", 1, [{\n      name: \"timezone\",\n      p: \"DateTimeZone\"\n    }], false, function ($, ctx, $Static) {}).Method(\"sub\", 1, [{\n      name: \"interval\",\n      p: \"DateInterval\"\n    }], false, function ($, ctx, $Static) {}).Method(\"__wakeup\", 1, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from Exception.php*/\n\n\nPHP.VM.Class.Predefined.Exception = function (ENV, $$) {\n  ENV.$Class.New(\"Exception\", 0, {}, function (M, $, $$) {\n    M.Variable(\"message\", 2).Variable(\"code\", 2).Variable(\"file\", 2).Variable(\"line\", 2).Method(\"__construct\", 1, [{\n      name: \"message\",\n      d: $$(\"\")\n    }, {\n      name: \"code\",\n      d: $$(0)\n    }, {\n      name: \"previous\",\n      d: $$(null)\n    }], false, function ($, ctx, $Static) {\n      $(\"this\").$Prop(ctx, \"message\")._($(\"message\"));\n\n      $(\"this\").$Prop(ctx, \"line\")._($$(1));\n    }).Method(\"getMessage\", 33, [], false, function ($, ctx, $Static) {\n      return $(\"this\").$Prop(ctx, \"message\");\n    }).Method(\"getPrevious\", 33, [], false, function ($, ctx, $Static) {}).Method(\"getCode\", 33, [], false, function ($, ctx, $Static) {}).Method(\"getFile\", 33, [], false, function ($, ctx, $Static) {}).Method(\"getLine\", 33, [], false, function ($, ctx, $Static) {\n      return $(\"this\").$Prop(ctx, \"line\");\n    }).Method(\"getTrace\", 33, [], false, function ($, ctx, $Static) {\n      return ENV.array([{\n        v: ENV.array([{\n          v: $$(\"Error2Exception\"),\n          k: $$(\"function\")\n        }]),\n        k: undefined\n      }, {\n        v: ENV.array([{\n          v: $$(\"fopen\"),\n          k: $$(\"function\")\n        }]),\n        k: undefined\n      }]);\n    }).Method(\"getTraceAsString\", 33, [], false, function ($, ctx, $Static) {}).Method(\"__toString\", 1, [], false, function ($, ctx, $Static) {}).Method(\"__clone\", 36, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from ReflectionClass.php*/\n\n\nPHP.VM.Class.Predefined.ReflectionClass = function (ENV, $$) {\n  ENV.$Class.New(\"ReflectionClass\", 0, {}, function (M, $, $$) {\n    M.Constant(\"IS_IMPLICIT_ABSTRACT\", $$(16)).Constant(\"IS_EXPLICIT_ABSTRACT\", $$(32)).Constant(\"IS_FINAL\", $$(64)).Variable(\"name\", 1).Variable(\"class\", 4).Method(\"__construct\", 1, [{\n      name: \"argument\"\n    }], false, function ($, ctx, $Static) {\n      if (ENV.$F(\"is_string\", arguments, $(\"argument\")).$Bool.$) {\n        if ($$(!ENV.$F(\"class_exists\", arguments, $(\"argument\")).$Bool.$).$Bool.$) {\n          throw $$(new (ENV.$Class.Get(\"ReflectionException\"))(this, $$(\"Class \").$Concat($(\"argument\")).$Concat($$(\" does not exist \"))));\n        } else {\n          $(\"this\").$Prop(ctx, \"name\")._($(\"argument\"));\n        }\n\n        ;\n      }\n\n      ;\n    }).Method(\"getMethods\", 1, [], false, function ($, ctx, $Static) {\n      $(\"methods\")._(ENV.$F(\"get_class_methods\", arguments, $(\"this\").$Prop(ctx, \"name\", true)));\n\n      $(\"arr\")._(ENV.array([]));\n\n      var iterator1 = ENV.$foreachInit($(\"methods\"), ctx);\n\n      while (ENV.foreach(iterator1, false, $(\"methodName\"))) {\n        $(\"parent\")._(ENV.$F(\"get_parent_class\", arguments, $(\"this\").$Prop(ctx, \"name\", true)));\n\n        if (ENV.$F(\"method_exists\", arguments, $(\"parent\"), $(\"methodName\")).$Bool.$) {\n          $(\"arr\").$Dim(this, undefined)._($$(new (ENV.$Class.Get(\"ReflectionMethod\"))(this, $(\"parent\"), $(\"methodName\"))));\n        } else {\n          $(\"arr\").$Dim(this, undefined)._($$(new (ENV.$Class.Get(\"ReflectionMethod\"))(this, $(\"this\").$Prop(ctx, \"name\", true), $(\"methodName\"))));\n        }\n\n        ;\n      }\n\n      ENV.$foreachEnd(iterator1);\n      return $(\"arr\");\n    }).Method(\"getProperty\", 1, [{\n      name: \"name\"\n    }], false, function ($, ctx, $Static) {\n      $(\"parts\")._(ENV.$F(\"explode\", arguments, $$(\"::\"), $(\"name\")));\n\n      if (ENV.$F(\"count\", arguments, $(\"parts\")).$Greater($$(1)).$Bool.$) {\n        $$(new (ENV.$Class.Get(\"ReflectionMethod\"))(this, $(\"parts\").$Dim(this, $$(0)), $(\"parts\").$Dim(this, $$(1))));\n      }\n\n      ;\n    }).Method(\"implementsInterface\", 1, [{\n      name: \"interface\"\n    }], false, function ($, ctx, $Static) {\n      if ($$(!ENV.$F(\"interface_exists\", arguments, $(\"interface\")).$Bool.$).$Bool.$) {\n        throw $$(new (ENV.$Class.Get(\"ReflectionException\"))(this, $$(\"Interface \").$Concat($(\"interface\")).$Concat($$(\" does not exist \"))));\n      }\n\n      ;\n    }).Method(\"export\", 9, [{\n      name: \"argument\"\n    }, {\n      name: \"return\",\n      d: $$(false)\n    }], false, function ($, ctx, $Static) {}).Method(\"__toString\", 1, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from ReflectionException.php*/\n\n\nPHP.VM.Class.Predefined.ReflectionException = function (ENV, $$) {\n  ENV.$Class.New(\"ReflectionException\", 0, {\n    Extends: \"Exception\"\n  }, function (M, $, $$) {\n    M.Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from ReflectionMethod.php*/\n\n\nPHP.VM.Class.Predefined.ReflectionMethod = function (ENV, $$) {\n  ENV.$Class.New(\"ReflectionMethod\", 0, {}, function (M, $, $$) {\n    M.Constant(\"IS_IMPLICIT_ABSTRACT\", $$(16)).Constant(\"IS_EXPLICIT_ABSTRACT\", $$(32)).Constant(\"IS_FINAL\", $$(64)).Variable(\"name\", 1).Variable(\"class\", 1).Method(\"__construct\", 1, [{\n      name: \"class\"\n    }, {\n      name: \"name\",\n      d: $$(null)\n    }], false, function ($, ctx, $Static) {\n      $(\"parts\")._(ENV.$F(\"explode\", arguments, $$(\"::\"), $(\"class\")));\n\n      if (ENV.$F(\"count\", arguments, $(\"parts\")).$Greater($$(1)).$Bool.$) {\n        $(\"class\")._($(\"parts\").$Dim(this, $$(0)));\n\n        $(\"name\")._($(\"parts\").$Dim(this, $$(1)));\n      }\n\n      ;\n\n      if ($$(!ENV.$F(\"class_exists\", arguments, $(\"class\")).$Bool.$).$Bool.$) {\n        throw $$(new (ENV.$Class.Get(\"ReflectionException\"))(this, $$(\"Class \").$Concat($(\"class\")).$Concat($$(\" does not exist \"))));\n      }\n\n      ;\n\n      $(\"this\").$Prop(ctx, \"name\")._($(\"name\"));\n\n      $(\"this\").$Prop(ctx, \"class\")._($(\"class\"));\n    }).Method(\"export\", 9, [{\n      name: \"argument\"\n    }, {\n      name: \"return\",\n      d: $$(false)\n    }], false, function ($, ctx, $Static) {}).Method(\"__toString\", 1, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from ReflectionProperty.php*/\n\n\nPHP.VM.Class.Predefined.ReflectionProperty = function (ENV, $$) {\n  ENV.$Class.New(\"ReflectionProperty\", 0, {}, function (M, $, $$) {\n    M.Constant(\"IS_STATIC\", $$(1)).Constant(\"IS_PUBLIC\", $$(256)).Constant(\"IS_PROTECTED\", $$(512)).Constant(\"IS_PRIVATE\", $$(1024)).Variable(\"name\", 1).Variable(\"class\", 1).Method(\"__construct\", 1, [{\n      name: \"class\"\n    }, {\n      name: \"name\",\n      d: $$(null)\n    }], false, function ($, ctx, $Static) {\n      if ($$(!ENV.$F(\"class_exists\", arguments, $(\"class\")).$Bool.$).$Bool.$) {\n        throw $$(new (ENV.$Class.Get(\"ReflectionException\"))(this, $$(\"Class \").$Concat($(\"class\")).$Concat($$(\" does not exist \"))));\n      }\n\n      ;\n    }).Method(\"export\", 9, [{\n      name: \"argument\"\n    }, {\n      name: \"return\",\n      d: $$(false)\n    }], false, function ($, ctx, $Static) {}).Method(\"__toString\", 1, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from __PHP_Incomplete_Class.php*/\n\n\nPHP.VM.Class.Predefined.__PHP_Incomplete_Class = function (ENV, $$) {\n  ENV.$Class.New(\"__PHP_Incomplete_Class\", 0, {}, function (M, $, $$) {\n    M.Variable(\"__PHP_Incomplete_Class_Name\", 1).Method(\"__construct\", 1, [{\n      name: \"name\"\n    }], false, function ($, ctx, $Static) {\n      $(\"this\").$Prop(ctx, \"__PHP_Incomplete_Class_Name\")._($(\"name\"));\n    }).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from stdClass.php*/\n\n\nPHP.VM.Class.Predefined.stdClass = function (ENV, $$) {\n  ENV.$Class.New(\"stdClass\", 0, {}, function (M, $, $$) {\n    M.Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from Traversable.php*/\n\n\nPHP.VM.Class.Predefined.Traversable = function (ENV, $$) {\n  ENV.$Class.INew(\"Traversable\", [], function (M, $, $$) {\n    M.Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from ArrayAccess.php*/\n\n\nPHP.VM.Class.Predefined.ArrayAccess = function (ENV, $$) {\n  ENV.$Class.INew(\"ArrayAccess\", [], function (M, $, $$) {\n    M.Method(\"offsetExists\", 1, [{\n      name: \"offset\"\n    }], false, function ($, ctx, $Static) {}).Method(\"offsetGet\", 1, [{\n      name: \"offset\"\n    }], false, function ($, ctx, $Static) {}).Method(\"offsetSet\", 1, [{\n      name: \"offset\"\n    }, {\n      name: \"value\"\n    }], false, function ($, ctx, $Static) {}).Method(\"offsetUnset\", 1, [{\n      name: \"offset\"\n    }], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from Iterator.php*/\n\n\nPHP.VM.Class.Predefined.Iterator = function (ENV, $$) {\n  ENV.$Class.INew(\"Iterator\", [\"Traversable\"], function (M, $, $$) {\n    M.Method(\"current\", 1, [], false, function ($, ctx, $Static) {}).Method(\"key\", 1, [], false, function ($, ctx, $Static) {}).Method(\"next\", 1, [], false, function ($, ctx, $Static) {}).Method(\"rewind\", 1, [], false, function ($, ctx, $Static) {}).Method(\"valid\", 1, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from IteratorAggregate.php*/\n\n\nPHP.VM.Class.Predefined.IteratorAggregate = function (ENV, $$) {\n  ENV.$Class.INew(\"IteratorAggregate\", [\"Traversable\"], function (M, $, $$) {\n    M.Method(\"getIterator\", 17, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from Reflector.php*/\n\n\nPHP.VM.Class.Predefined.Reflector = function (ENV, $$) {\n  ENV.$Class.INew(\"Reflector\", [], function (M, $, $$) {\n    M.Method(\"export\", 25, [], false, function ($, ctx, $Static) {}).Method(\"__toString\", 17, [], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* automatically built from Serializable.php*/\n\n\nPHP.VM.Class.Predefined.Serializable = function (ENV, $$) {\n  ENV.$Class.INew(\"Serializable\", [], function (M, $, $$) {\n    M.Method(\"serialize\", 17, [], false, function ($, ctx, $Static) {}).Method(\"unserialize\", 17, [{\n      name: \"serialized\"\n    }], false, function ($, ctx, $Static) {}).Create();\n  });\n  ENV.$Class.Get(\"DateTime\").prototype.Native = true;\n};\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 3.7.2012 \n * @website http://hertzen.com\n */\n\n\nPHP.Adapters.XHRFileSystem = function () {\n  /*\n  var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB,\n  request = indexedDB.open(\"filesystem\"),\n  $this = this;\n   request.onsuccess = function(e) {\n       $this.db = e.target.result;\n     };\n  \n  request.onupgradeneeded = function( e ) {\n    \n      $this.db.createObjectStore( $this.FILES,\n      {\n          keyPath: \"filename\"\n      });\n      \n  };\n   request.onfailure = this.error;\n  */\n};\n\nPHP.Adapters.XHRFileSystem.prototype.lstatSync = function (filename) {\n  if (localStorage[filename] === undefined) {\n    throw Error;\n  } else {\n    return true;\n  }\n};\n\nPHP.Adapters.XHRFileSystem.prototype.error = function (e) {\n  this.db = false;\n  console.log(e);\n  throw e;\n};\n\nPHP.Adapters.XHRFileSystem.prototype.writeFileSync = function (filename, data) {\n  localStorage[filename] = data;\n  /*\n      if ( this.db === false ) {\n          return;\n      }\n      console.log( this.db );\n      var db = this.db,\n      trans = db.transaction([ this.files ], IDBTransaction.READ_WRITE, 0),\n      store = trans.objectStore( this.files );\n      \n      var request = store.put({\n          \"filename\": filename,\n          \"content\" : data\n      });\n      \n      var processing = true;\n       request.onsuccess = function(e) {\n          processing = false;\n      };\n       request.onerror = function(e) {\n          processing = false;\n          console.log(e.value);\n      };\n      \n      while ( processing ) {}\n      \n      */\n};\n\nPHP.Adapters.XHRFileSystem.prototype.readFileSync = function (filename, xhr) {\n  if (xhr === undefined) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', filename, false); // async set to false!\n\n    var response;\n\n    xhr.onload = function () {\n      response = this.responseText;\n    };\n\n    xhr.send();\n    return response;\n  } else {\n    if (localStorage[filename] === undefined) {\n      throw Error;\n    } else {\n      return localStorage[filename];\n    }\n  }\n};\n\nPHP.Adapters.XHRFileSystem.prototype.xhr = true;\nPHP.Adapters.XHRFileSystem.prototype.version = \"1.2\";\nPHP.Adapters.XHRFileSystem.prototype.FILES = \"files\";\n/* \n * @author Niklas von Hertzen <niklas at hertzen.com>\n * @created 17.7.2012 \n * @website http://hertzen.com\n */\n\nPHP.Locales = {\n  de_DE: {\n    decimal_point: \",\",\n    thousands_sep: \".\"\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (PHP);\n\n//# sourceURL=webpack:///./src/modules/php.js?");

/***/ })

}]);